"use strict";

function onSilverlightError(a, b) {
    var c = "";
    a && (c = a.getHost().source);
    var d = b.errorType;
    if ("ImageError" !== d && "MediaError" !== d) {
        var e = b.errorCode;
        if ("undefined" == typeof HandleSilverlightUpgrade || !HandleSilverlightUpgrade(e)) {
            var f = InJs.StringExtensions.format("Unhandled Error in Silverlight Application {0}\r\nCode: {1}    \r\nCategory: {2}       \r\nMessage: {3}     \r\n", c, e, d, b.errorMessage);
            throw "ParserError" === d ? f += InJs.StringExtensions.format("File: {0}     \r\nLine: {1}     \r\nPosition: {2}     \r\n", b.xamlFile, b.lineNumber, b.charPosition) : "RuntimeError" === d && (b.lineNumber && (f += InJs.StringExtensions.format("Line: {0}     \r\nPosition: {1}     \r\n", b.lineNumber, b.charPosition)), 
            f += InJs.StringExtensions.format("MethodName: {0}     \n", b.methodName)), InJs.Errors.invalidOperation(f);
        }
    }
}

var InJs;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function a() {}
            return a;
        }();
        a.UnsupportedBrowserException = b;
        var c = function() {
            function a(b) {
                this._message = a._messagePattern + b;
            }
            return a.prototype.toString = function() {
                return this._message;
            }, a._messagePattern = "Missing required dependency: ", a;
        }();
        a.MissingDependencyException = c;
        var d = function() {
            function a() {}
            return a;
        }();
        a.UnknownStorageException = d;
    }(b = a.Exceptions || (a.Exceptions = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = jsCommon.TraceType, c = function() {
        function c(a, b, c) {
            this._modalDialog = null, this._modalDialog = c ? c : new jsCommon.ModalDialog(a), 
            b && this.registerOnConnectionGroup(b);
        }
        return c.prototype.registerOnConnectionGroup = function(b) {
            b.bridge.attach(a.Events.ShowMessageEventName, c.bridge_ShowMessage, this), b.bridge.attach(a.Events.ShowPromptEventName, c.bridge_ShowPrompt, this), 
            b.bridge.attach(a.Events.ShowErrorEventName, c.bridge_ShowError, this), b.bridge.attach(a.Events.ShowCustomDialogEventName, c.bridge_ShowCustomDialog, this), 
            b.bridge.attach(a.Events.HideDialogEventName, c.bridge_HideDialog, this);
        }, c.prototype.unregisterFromConnectionGroup = function(b) {
            b.bridge.detach(a.Events.ShowMessageEventName, c.bridge_ShowMessage), b.bridge.detach(a.Events.ShowPromptEventName, c.bridge_ShowPrompt), 
            b.bridge.detach(a.Events.ShowErrorEventName, c.bridge_ShowError), b.bridge.detach(a.Events.ShowCustomDialogEventName, c.bridge_ShowCustomDialog), 
            b.bridge.detach(a.Events.HideDialogEventName, c.bridge_HideDialog);
        }, c.bridge_ShowMessage = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowMessage", "eventArgs"), d._onShowMessage(c);
        }, c.bridge_ShowPrompt = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowPrompt", "eventArgs"), d._onShowPrompt(c);
        }, c.bridge_ShowError = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowError", "eventArgs"), d._onShowError(c);
        }, c.bridge_ShowCustomDialog = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowCustomDialog", "eventArgs"), 
            d._onShowCustomDialog(c);
        }, c.bridge_HideDialog = function(a) {
            var b = a.data;
            b._onHideDialog();
        }, c.prototype._onShowMessage = function(a) {
            this.showMessage(a.messageTitle, a.messageText);
        }, c.prototype._onShowPrompt = function(a) {
            this.showPrompt(a.promptTitle, a.promptText, a.promptActions, a.isDismissable);
        }, c.prototype._onShowError = function(a) {
            this.showError(a.errorText, a.errorType, a.request, a.scriptError);
        }, c.prototype._onShowCustomDialog = function(a) {
            this.showCustomDialog(a.titleText, a.dialogContent, a.dialogActions, a.onDialogDisplayed, a.isDismissable);
        }, c.prototype._onHideDialog = function() {
            this.hideDialog();
        }, c.prototype.showMessage = function(a, b) {
            this._modalDialog.showMessage(a, b);
        }, c.prototype.showPrompt = function(a, b, c, d) {
            this._modalDialog.showPrompt(a, b, c, d);
        }, c.prototype.showError = function(c, d, e, f, g) {
            if (a.Utility.throwIfNullOrEmptyString(c, null, "ShowError", "errorText"), g) {
                var h = null;
                e && (h = a.HttpUtility.getRequestId(e)), g.telemetryService.notifyUserGotError(6, new a.UserGotErrorEventArgs(d ? b[d] : "", c, h));
            }
            var i = this.constructAdditionalErrorInfoKeyValuePairs(a.AppManager.current.activityId, e, f);
            this._modalDialog.showError(c, d, i);
            var j = c;
            f && (f.sourceUrl && (j += ", at file " + f.sourceUrl), f.lineNumber && (j += ", line number " + f.lineNumber.toString()), 
            f.columnNumber && (j += ", column number " + f.columnNumber.toString())), a.Tracing.error(j);
        }, c.prototype.showCustomDialog = function(a, b, c, d, e) {
            return this._modalDialog.showCustomDialog(a, b, c, d, e);
        }, c.prototype.hideDialog = function() {
            this._modalDialog.hideDialog();
        }, c.prototype.constructAdditionalErrorInfoKeyValuePairs = function(b, c, d) {
            var e, f, g, h, i;
            if (i = [], c) {
                if (g = c.status.toString(), f = a.HttpUtility.getErrorInfo(c), e = a.HttpUtility.getRequestId(c), 
                !a.StringExtensions.isNullOrEmpty(g)) {
                    var j = g;
                    a.StringExtensions.isNullOrEmpty(f) || (j = a.StringExtensions.format(a.Strings.infoNavErrorCodeTemplate, g, f), 
                    h = {
                        errorInfoKey: a.Strings.errorCodeText,
                        errorInfoValue: j
                    }, i.push(h));
                }
                a.StringExtensions.isNullOrEmpty(e) || (h = {
                    errorInfoKey: a.Strings.errorRequestIdText,
                    errorInfoValue: e
                }, i.push(h));
            }
            return a.StringExtensions.isNullOrEmpty(b) || (h = {
                errorInfoKey: a.Strings.errorActivityIdText,
                errorInfoValue: b
            }, i.push(h)), d && (d.sourceUrl && (h = {
                errorInfoKey: a.Strings.errorSourceFileText,
                errorInfoValue: d.sourceUrl
            }, i.push(h)), d.lineNumber && (h = {
                errorInfoKey: a.Strings.errorLineNumberText,
                errorInfoValue: d.lineNumber.toString()
            }, i.push(h)), d.columnNumber && (h = {
                errorInfoKey: a.Strings.errorColumnNumberText,
                errorInfoValue: d.columnNumber.toString()
            }, i.push(h)), d.stack && (h = {
                errorInfoKey: a.Strings.errorStackTraceText,
                errorInfoValue: d.stack
            }, i.push(h))), h = {
                errorInfoKey: a.Strings.errorTimestampText,
                errorInfoValue: new Date().toString()
            }, i.push(h), i;
        }, c;
    }();
    a.ModalDialog = c;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a() {}
        return a.isBrowserSupported = function() {
            return a.browserSupportsEssentials() && a.supportsFunctionBind() && a.supportsCors();
        }, a.browserSupportsEssentials = function() {
            return a.supportsDefineProperty();
        }, a.getInternetExplorerVersion = function() {
            var a = 0;
            if ("Microsoft Internet Explorer" === navigator.appName || window.navigator.userAgent.indexOf("MSIE") >= 0) {
                var b = new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})"), c = b.exec(window.navigator.userAgent);
                c && (a = parseFloat(c[1]));
            }
            return a;
        }, a.getOperaVersion = function() {
            return navigator.userAgent.indexOf("Opera/") > -1 ? parseFloat(navigator.appVersion) : void 0;
        }, a.supportsDefineProperty = function() {
            if (!Object.defineProperty) return !1;
            try {
                var a = {}, b = {
                    get: function() {
                        return !0;
                    },
                    enumerable: !0,
                    configurable: !1
                };
                return Object.defineProperty(a, "customProperty", b), !0;
            } catch (c) {
                return !1;
            }
        }, a.supportsFunctionBind = function() {
            return Function.prototype.bind ? !0 : !1;
        }, a.supportsCors = function() {
            return $.support.cors;
        }, a;
    }();
    a.BrowserUtility = b;
}(InJs || (InJs = {})), InJs.BrowserUtility.browserSupportsEssentials() || (window.onload = function() {
    var a = new InJs.ModalDialog($("body"));
    a.showPrompt(InJs.Strings.unsupportedBrowserMessageTitle, InJs.Strings.unsupportedBrowserMessageText, [], !1);
});

var InJs;

!function(a) {
    var b = function() {
        function b() {
            this._controlRootTemplate = '<div class="collageItemEditorLayout"><div class="layoutMain"><div class="layoutLeft"><div class="editorSection"><div class="title">{utteranceSectionTitle}</div><input id="utterance" type="text" placeholder="{utteranceInputPlaceholder}"><div class="utteranceCaption caption">{utteranceInputCaption}</div><div class="featuredQuestionLevelChoice"><input type="checkbox" name="featuredQuestionLevel" id="isTopLevel" name="isTopLevel"><label for="isTopLevel">{featureOnPowerBICaption}</label></div></div><div class="editorSection"><div class="title">{tileSizeSectionTitle}</div><div class="sizePicker"><input type="radio" name="itemSize" id="small" value="0" checked><label for="small">{tileSizeSmallCaption}</label><input type="radio" name="itemSize" id="large" value="1"><label for="large">{tileSizeLargeCaption}</label></div></div><div class="editorSection"><div class="title">{tileColorSectionTitle}</div><div class="visualPicker bgColorPicker"><input type="radio" name="itemColor" id="light-blue" value="0" checked><label for="light-blue"><div class="colorSample light-blue"></div></label><input type="radio" name="itemColor" id="blue" value="1"><label for="blue"><div class="colorSample blue"></div></label><input type="radio" name="itemColor" id="green" value="2"><label for="green"><div class="colorSample green"></div></label><input type="radio" name="itemColor" id="orange" value="3"><label for="orange"><div class="colorSample orange"></div></label><input type="radio" name="itemColor" id="red" value="4"><label for="red"><div class="colorSample red"></div></label><input type="radio" name="itemColor" id="gray" value="5"><label for="gray"><div class="colorSample gray"></div></label></div></div><div class="editorSection"><div class="title">{tileIconSectionTitle}</div><div class="visualPicker bgIconPicker"><input type="radio" name="itemIcon" id="general" value="1" checked><label for="general"><div class="iconSample general"></div></label><input type="radio" name="itemIcon" id="generalChart" value="5"><label for="generalChart"><div class="iconSample generalChart"></div></label><input type="radio" name="itemIcon" id="favorite" value="8"><label for="favorite"><div class="iconSample favorite"></div></label><input type="radio" name="itemIcon" id="columnChart" value="3"><label for="columnChart"><div class="iconSample columnChart"></div></label><input type="radio" name="itemIcon" id="lineChart" value="4"><label for="lineChart"><div class="iconSample lineChart"></div></label><input type="radio" name="itemIcon" id="pieChart" value="6"><label for="pieChart"><div class="iconSample pieChart"></div></label><input type="radio" name="itemIcon" id="number" value="7"><label for="number"><div class="iconSample number"></div></label><input type="radio" name="itemIcon" id="money" value="2"><label for="money"><div class="iconSample money"></div></label></div></div><div class="editorSection"><div class="title">{tileCustomImageSectionTitle}</div><input id="bgImgUrl" type="text" spellcheck="false" autocomplete="off" maxlength="500" placeholder="{cusomtImageUrlInputPlaceholder}"><div class="bgImgUrlCaption caption">{cusomtImageUrlInputCaption}</div></div></div><div class="layoutRight"><div class="previewHost"><div class="editorSection previewSection"><div class="title">{previewRegionTitle}</div><div class="collageItemContainer"></div></div></div></div></div><div class="editorActions"><input id="saveBtn" type="button" value="{saveBtnText}" disabled><input id="cancelBtn" type="button" value="{cancelBtnText}"></div>';
        }
        return Object.defineProperty(b.prototype, "controlTemplate", {
            get: function() {
                var b = this._controlRootTemplate.replace("{utteranceSectionTitle}", a.Strings.CollageItemEditorUtteranceFormRegionTitle).replace("{utteranceInputPlaceholder}", a.Strings.CollageItemEditorUtteranceInputPlaceholder).replace("{utteranceInputCaption}", a.Strings.CollageItemEditorUtteranceInputCaption).replace("{featureOnPowerBICaption}", a.Strings.CollageItemEditorFeatureOnPowerBICheckboxCaption).replace("{tileSizeSectionTitle}", a.Strings.CollageItemEditorTileSizeFormRegionTitle).replace("{tileSizeSmallCaption}", a.Strings.CollageItemEditorTileSizeSmallCaption).replace("{tileSizeLargeCaption}", a.Strings.CollageItemEditorTileSizeLargeCaption).replace("{tileColorSectionTitle}", a.Strings.CollageItemEditorTileColorRegionTitle).replace("{tileIconSectionTitle}", a.Strings.CollageItemEditorTileIconRegionTitle).replace("{tileCustomImageSectionTitle}", a.Strings.CollageItemCustomImageRegionTitle).replace("{cusomtImageUrlInputPlaceholder}", a.Strings.CollageItemCustomImageUrlInputPlaceholder).replace("{cusomtImageUrlInputCaption}", a.Strings.CollageItemCustomImageUrlCaption).replace("{previewRegionTitle}", a.Strings.CollageItemEditorPreviewRegionTitle).replace("{saveBtnText}", a.Strings.CollageItemEditorSaveBtnTxt).replace("{cancelBtnText}", a.Strings.CollageItemEditorCancelBtnTxt);
                return $(b);
            },
            enumerable: !0,
            configurable: !0
        }), b;
    }();
    a.CollageItemEditorTemplateProvider = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this._templateProvider = null, this._templateProvider = a;
        }
        return Object.defineProperty(a.prototype, "templateProvider", {
            get: function() {
                return this._templateProvider;
            },
            enumerable: !0,
            configurable: !0
        }), a;
    }();
    a.ClientControl = b;
}(InJs || (InJs = {}));

var CollageItemSize;

!function(a) {
    a[a.Small = 0] = "Small", a[a.Big = 1] = "Big";
}(CollageItemSize || (CollageItemSize = {}));

var CollageItemImage;

!function(a) {
    a[a.None = 0] = "None", a[a.General = 1] = "General", a[a.Money = 2] = "Money", 
    a[a.ColumnChart = 3] = "ColumnChart", a[a.LineChart = 4] = "LineChart", a[a.GeneralChart = 5] = "GeneralChart", 
    a[a.PieChart = 6] = "PieChart", a[a.Number = 7] = "Number", a[a.Favorite = 8] = "Favorite", 
    a[a.Add = 9] = "Add";
}(CollageItemImage || (CollageItemImage = {}));

var ServerTemplateTypes;

!function(a) {
    a.StaticItem = "StaticItem", a.ConstantSlotItem = "ConstantSlotItem", a.SelectionSlotItem = "SelectionSlotItem", 
    a.EntitySlotValue = "EntitySlotValue", a.EdmPropertySlotValue = "EdmPropertySlotValue", 
    a.StringSlotValue = "StringSlotValue", a.InputSlotValue = "InputSlotValue";
}(ServerTemplateTypes || (ServerTemplateTypes = {}));

var PhrasingType;

!function(a) {
    a[a.AdjectivePhrasing = 0] = "AdjectivePhrasing", a[a.AttributePhrasing = 1] = "AttributePhrasing", 
    a[a.VerbPhrasing = 2] = "VerbPhrasing";
}(PhrasingType || (PhrasingType = {}));

var InputType;

!function(a) {
    a[a.Integer = 0] = "Integer", a[a.Number = 1] = "Number", a[a.String = 2] = "String";
}(InputType || (InputType = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.Equals = 0] = "Equals", a[a.GreaterThan = 1] = "GreaterThan", a[a.LessThan = 2] = "LessThan", 
        a[a.GreaterThanOrEquals = 3] = "GreaterThanOrEquals", a[a.LessThanOrEquals = 4] = "LessThanOrEquals";
    }(a.ModelLinguisticRelationshipConditionOperator || (a.ModelLinguisticRelationshipConditionOperator = {}));
    a.ModelLinguisticRelationshipConditionOperator;
    !function(a) {
        a[a.User = 0] = "User", a[a.Generated = 1] = "Generated", a[a.Deleted = 2] = "Deleted";
    }(a.LinguisticItemSource || (a.LinguisticItemSource = {}));
    a.LinguisticItemSource;
    !function(a) {
        a[a.None = 0] = "None", a[a.Number = 1] = "Number", a[a.Integer = a.Number + 2] = "Integer", 
        a[a.DateTime = 4] = "DateTime", a[a.Time = 8] = "Time", a[a.Date = a.DateTime + 16] = "Date", 
        a[a.Month = a.Integer + 32] = "Month", a[a.Year = a.Integer + 64] = "Year", a[a.YearAndMonth = 128] = "YearAndMonth", 
        a[a.MonthAndDay = 256] = "MonthAndDay", a[a.Decade = a.Integer + 512] = "Decade", 
        a[a.YearAndWeek = 1024] = "YearAndWeek", a[a.String = 2048] = "String", a[a.Boolean = 4096] = "Boolean", 
        a[a.Table = 8192] = "Table", a[a.Range = 16384] = "Range";
    }(a.SemanticType || (a.SemanticType = {}));
    a.SemanticType;
    !function(a) {
        a[a.ZeroOrOne = 0] = "ZeroOrOne", a[a.One = 1] = "One", a[a.Many = 2] = "Many";
    }(a.ConceptualMultiplicity || (a.ConceptualMultiplicity = {}));
    a.ConceptualMultiplicity;
}(InJs || (InJs = {}));

var InterpretWarnings;

!function(a) {
    a[a.None = 0] = "None", a[a.LinguisticSchemaAutoGenerated = 1] = "LinguisticSchemaAutoGenerated", 
    a[a.LinguisticSchemaNotAvailable = 2] = "LinguisticSchemaNotAvailable", a[a.LinguisticSchemaIsStillLoading = 4] = "LinguisticSchemaIsStillLoading", 
    a[a.InvalidDataModel = 8] = "InvalidDataModel", a[a.DataRetrievalFailed = 16] = "DataRetrievalFailed", 
    a[a.DataRetrievalSkipped = 32] = "DataRetrievalSkipped", a[a.DuplicateExecuteSemanticQuery = 64] = "DuplicateExecuteSemanticQuery";
}(InterpretWarnings || (InterpretWarnings = {}));

var InterpretRequestOptions;

!function(a) {
    a[a.Data = 1] = "Data", a[a.QueryMetadata = 2] = "QueryMetadata", a[a.VisualConfiguration = 4] = "VisualConfiguration";
}(InterpretRequestOptions || (InterpretRequestOptions = {}));

var PowerViewMethods = function() {
    function a() {}
    return a.getPowerViewClearInterpretVisualizationMethod = function() {
        var b = {};
        return b.__type = a.PowerViewClearInterpretVisualizationMethodName, b;
    }, a.getPowerViewApplyInterpretResultMethod = function(b, c) {
        var d = {};
        return d.__type = a.PowerViewApplyInterpretResultMethodName, d.InteractionActivityId = c, 
        d.Result = b, d;
    }, a.getPowerViewSetSecurityTokenMethod = function(b) {
        var c = {};
        return c.__type = a.PowerViewSetSecurityTokenMethodName, c.SecurityToken = b, c;
    }, a.getPowerViewSetVisualizationTypeMethod = function(b) {
        var c = {};
        return c.__type = a.PowerViewSetVisualizationTypeMethodName, c.VisualizationType = b, 
        c;
    }, a.getPowerViewSetProgressIndicatorVisibilityMethod = function(b) {
        var c = {};
        return c.__type = a.PowerViewSetProgressIndicatorVisibilityMethodName, c.Visible = b, 
        c;
    }, a.getPowerViewSetReportSizeMethod = function(b, c) {
        var d = {};
        return d.__type = a.PowerViewSetReportSizeMethodName, d.Width = b, d.Height = c, 
        d;
    }, a.getPowerViewSetAllowGeocodingMethod = function(b) {
        var c = {};
        return c.__type = a.PowerViewSetAllowGeocodingMethodName, c.AllowGeocoding = b, 
        c;
    }, a.InteractiveReportNamespace = "http://schemas.microsoft.com/sqlserver/reporting/2012/01/InteractiveReport", 
    a.PowerViewApplyInterpretResultMethodName = "ApplyInterpretResultMethod:" + a.InteractiveReportNamespace, 
    a.PowerViewClearInterpretVisualizationMethodName = "ClearInterpretVisualizationMethod:" + a.InteractiveReportNamespace, 
    a.PowerViewSetVisualizationTypeMethodName = "SetVisualizationTypeMethod:" + a.InteractiveReportNamespace, 
    a.PowerViewSetProgressIndicatorVisibilityMethodName = "SetProgressIndicatorVisibilityMethod:" + a.InteractiveReportNamespace, 
    a.PowerViewSetSecurityTokenMethodName = "SetSecurityTokenMethod:" + a.InteractiveReportNamespace, 
    a.PowerViewSetHostMethodName = "SetHostMethod:" + a.InteractiveReportNamespace, 
    a.PowerViewSetReportSizeMethodName = "SetReportSizeMethod:" + a.InteractiveReportNamespace, 
    a.PowerViewSetAllowGeocodingMethodName = "SetAllowGeocodingMethod:" + a.InteractiveReportNamespace, 
    a;
}(), PowerViewCallbackMethods = function() {
    function a() {}
    return a.InteractiveReportNamespace = "http://schemas.microsoft.com/sqlserver/reporting/2012/01/InteractiveReport", 
    a.InitializedMethodName = "Initialized", a.AvailableVisualizationTypesMethodName = "AvailableVisualizationTypes", 
    a.PowerViewErrorMethodName = "PowerViewError", a.FieldExplorerOpenedMethodName = "FieldExplorerOpened", 
    a.FieldExplorerClosedMethodName = "FieldExplorerClosed", a.FilterPaneOpenedMethodName = "FilterPaneOpened", 
    a.FilterPaneClosedMethodName = "FilterPaneClosed", a.PowerViewActivityCompletedMethodName = "ActivityCompleted", 
    a.PinVisualMethodName = "PinVisual", a;
}(), VisualizationType;

!function(a) {
    a[a.Table = 0] = "Table", a[a.Map = 1] = "Map", a[a.Matrix = 2] = "Matrix", a[a.Card = 3] = "Card", 
    a[a.LineChart = 4] = "LineChart", a[a.PieChart = 5] = "PieChart", a[a.ScatterChart = 6] = "ScatterChart", 
    a[a.ClusteredBarChart = 7] = "ClusteredBarChart", a[a.StackedBarChart = 8] = "StackedBarChart", 
    a[a.HundredPercentStackedBarChart = 9] = "HundredPercentStackedBarChart", a[a.ClusteredColumnChart = 10] = "ClusteredColumnChart", 
    a[a.StackedColumnChart = 11] = "StackedColumnChart", a[a.HundredPercentStackedColumnChart = 12] = "HundredPercentStackedColumnChart", 
    a[a.ClusteredComboChart = 13] = "ClusteredComboChart", a[a.StackedComboChart = 14] = "StackedComboChart", 
    a[a.HundredPercentComboChart = 15] = "HundredPercentComboChart", a[a.FunnelChart = 16] = "FunnelChart", 
    a[a.Treemap = 17] = "Treemap", a[a.SunburstChart = 18] = "SunburstChart", a[a.ColorFilledMap = 19] = "ColorFilledMap", 
    a[a.DonutChart = 20] = "DonutChart", a[a.CircularTreemap = 21] = "CircularTreemap", 
    a[a.HeatMap = 22] = "HeatMap", a[a.WaterfallChart = 23] = "WaterfallChart", a[a.RoseChart = 24] = "RoseChart", 
    a[a.NetworkMap = 25] = "NetworkMap", a[a.StackedArea = 26] = "StackedArea", a[a.HundredPercentStackedArea = 27] = "HundredPercentStackedArea", 
    a[a.SmoothLineChart = 28] = "SmoothLineChart", a[a.MultiRowCard = 29] = "MultiRowCard", 
    a[a.Gauge = 30] = "Gauge", a[a.ComboChart = 31] = "ComboChart", a[a.Max = 32] = "Max";
}(VisualizationType || (VisualizationType = {}));

var SPTokenState;

!function(a) {
    a[a.None = 0] = "None", a[a.AccessDenied = 1] = "AccessDenied", a[a.Failed = 2] = "Failed", 
    a[a.Loaded = 3] = "Loaded";
}(SPTokenState || (SPTokenState = {}));

var UpdateModelFailCause;

!function(a) {
    a[a.GetSiteFailed = 0] = "GetSiteFailed", a[a.GetDocumentFailed = 1] = "GetDocumentFailed", 
    a[a.AddModelFailed = 2] = "AddModelFailed", a[a.AddModelDisallowed = 3] = "AddModelDisallowed", 
    a[a.DeleteModelFailed = 4] = "DeleteModelFailed";
}(UpdateModelFailCause || (UpdateModelFailCause = {}));

var InJs;

!function(a) {
    var b;
    !function(a) {
        a.en_US = "en-US";
    }(b = a.LanguageIdentifier || (a.LanguageIdentifier = {})), function(a) {
        a[a.NoMatch = 0] = "NoMatch", a[a.OriginalValueMatch = 1] = "OriginalValueMatch", 
        a[a.SpellCorrectedMatch = 2] = "SpellCorrectedMatch", a[a.StemmedMatch = 3] = "StemmedMatch", 
        a[a.SynonymMatch = 4] = "SynonymMatch";
    }(a.TokenMatchKind || (a.TokenMatchKind = {}));
    a.TokenMatchKind;
    !function(a) {
        a[a.None = 0] = "None", a[a.CC = 1] = "CC", a[a.CD = 2] = "CD", a[a.DT = 3] = "DT", 
        a[a.EX = 4] = "EX", a[a.FW = 5] = "FW", a[a.IN = 6] = "IN", a[a.AnyJJ = 256] = "AnyJJ", 
        a[a.JJ = 257] = "JJ", a[a.JJR = 258] = "JJR", a[a.JJS = 259] = "JJS", a[a.LS = 7] = "LS", 
        a[a.MD = 8] = "MD", a[a.AnyNN = 512] = "AnyNN", a[a.NN = 513] = "NN", a[a.NNS = 514] = "NNS", 
        a[a.NNP = 515] = "NNP", a[a.NNPS = 516] = "NNPS", a[a.PDT = 9] = "PDT", a[a.POS = 16] = "POS", 
        a[a.AnyPRP = 1024] = "AnyPRP", a[a.PRP = 1025] = "PRP", a[a.PRP_S = 1026] = "PRP_S", 
        a[a.AnyRB = 2048] = "AnyRB", a[a.RB = 2049] = "RB", a[a.RBR = 2050] = "RBR", a[a.RBS = 2051] = "RBS", 
        a[a.RP = 17] = "RP", a[a.SYM = 18] = "SYM", a[a.TO = 19] = "TO", a[a.UH = 20] = "UH", 
        a[a.AnyVB = 4096] = "AnyVB", a[a.VB = 4097] = "VB", a[a.VBD = 4098] = "VBD", a[a.VBG = 4099] = "VBG", 
        a[a.VBN = 4100] = "VBN", a[a.VBP = 4101] = "VBP", a[a.VBZ = 4102] = "VBZ", a[a.WDT = 21] = "WDT", 
        a[a.AnyWP = 8192] = "AnyWP", a[a.WP = 8193] = "WP", a[a.WP_S = 8194] = "WP_S", a[a.WRB = 22] = "WRB";
    }(a.PosTagKind || (a.PosTagKind = {}));
    a.PosTagKind;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.None = 0] = "None", a[a.ResultIsEmpty = 1] = "ResultIsEmpty", a[a.User = 2] = "User";
    }(a.UtteranceFlags || (a.UtteranceFlags = {}));
    a.UtteranceFlags;
    !function(a) {
        a[a.None = 0] = "None", a[a.Bad = 1] = "Bad", a[a.Medium = 2] = "Medium", a[a.Good = 3] = "Good";
    }(a.UtteranceFeedback || (a.UtteranceFeedback = {}));
    a.UtteranceFeedback;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.JSON = 1] = "JSON", a[a.XML = 2] = "XML";
    }(a.LinguisticSchemaFormat || (a.LinguisticSchemaFormat = {}));
    a.LinguisticSchemaFormat;
    !function(a) {
        a[a.Default = 0] = "Default", a[a.IncludeConceptualSchema = 1] = "IncludeConceptualSchema";
    }(a.GetModelingMetadataRequestOptions || (a.GetModelingMetadataRequestOptions = {}));
    a.GetModelingMetadataRequestOptions;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.NotStarted = 0] = "NotStarted", a[a.CloneDB = 2] = "CloneDB", a[a.AlterDB = 4] = "AlterDB", 
        a[a.StreamWorkbook = 8] = "StreamWorkbook", a[a.SaveWorkbook = 16] = "SaveWorkbook", 
        a[a.PublishWorkbook = 32] = "PublishWorkbook", a[a.Complete = a.PublishWorkbook << 1] = "Complete", 
        a[a.Error = a.Complete << 1] = "Error", a[a.ETagMismatch = a.Complete << 2] = "ETagMismatch";
    }(a.ModelCommitOperationPhase || (a.ModelCommitOperationPhase = {}));
    a.ModelCommitOperationPhase;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.None = 0] = "None", a[a.NotAvailable = 1] = "NotAvailable", a[a.StillLoading = 2] = "StillLoading", 
        a[a.InvalidDataModel = 4] = "InvalidDataModel", a[a.InvalidLanguage = 8] = "InvalidLanguage";
    }(a.LinguisticSchemaWarnings || (a.LinguisticSchemaWarnings = {}));
    a.LinguisticSchemaWarnings;
    !function(a) {
        a[a.CheckedIn = 0] = "CheckedIn", a[a.CheckedOut = 1] = "CheckedOut";
    }(a.CheckoutType || (a.CheckoutType = {}));
    a.CheckoutType;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.None = 0] = "None", a[a.PermissionsValidatedSuccessfully = 2] = "PermissionsValidatedSuccessfully", 
        a[a.WorkbookValidation = 4] = "WorkbookValidation", a[a.CreatingEmptyDb = 8] = "CreatingEmptyDb", 
        a[a.UploadingModel = 16] = "UploadingModel", a[a.PendingDelete = 64] = "PendingDelete", 
        a[a.FailedPublish = 128] = "FailedPublish", a[a.ModifyDataConnectionsTable = 256] = "ModifyDataConnectionsTable", 
        a[a.SuccessPublishWithThumbnailPending = 512] = "SuccessPublishWithThumbnailPending", 
        a[a.PendingModelUpdate = 1024] = "PendingModelUpdate", a[a.SuccessPublish = 134217728] = "SuccessPublish";
    }(a.WorkbookOperationPhase || (a.WorkbookOperationPhase = {}));
    a.WorkbookOperationPhase;
    !function(a) {
        a[a.None = 0] = "None", a[a.ModelIsMissing = 1] = "ModelIsMissing", a[a.AboveSizeLimit = 2] = "AboveSizeLimit", 
        a[a.XmlaError = 3] = "XmlaError", a[a.WorkbookWasDeletedOrNotPublished = 4] = "WorkbookWasDeletedOrNotPublished", 
        a[a.BeingProcessed = 5] = "BeingProcessed", a[a.EtagMismatch = 6] = "EtagMismatch", 
        a[a.EncryptionOrBadFileFormat = 7] = "EncryptionOrBadFileFormat", a[a.PowerViewSlOperationTimedOut = 8] = "PowerViewSlOperationTimedOut", 
        a[a.InvalidThumbnail = 9] = "InvalidThumbnail", a[a.WorkbookContainsMalformedUri = 10] = "WorkbookContainsMalformedUri", 
        a[a.RdlValidationFailed = 11] = "RdlValidationFailed", a[a.RdlValidationFailedBadFile = 12] = "RdlValidationFailedBadFile", 
        a[a.RdlValidationFailedSharedDataSourcesNotAllowed = 13] = "RdlValidationFailedSharedDataSourcesNotAllowed", 
        a[a.RdlValidationFailedNotSupportedDataExtension = 14] = "RdlValidationFailedNotSupportedDataExtension", 
        a[a.RdlValidationFailedPromptForCredentialsDataSourcesNotAllowed = 15] = "RdlValidationFailedPromptForCredentialsDataSourcesNotAllowed", 
        a[a.RdlValidationFailedCustomReportItemsNotAllowed = 16] = "RdlValidationFailedCustomReportItemsNotAllowed", 
        a[a.RdlValidationFailedCodeSegmentsNotAllowed = 17] = "RdlValidationFailedCodeSegmentsNotAllowed", 
        a[a.RdlValidationFailedEmbeddedSubReportsNotAllowed = 18] = "RdlValidationFailedEmbeddedSubReportsNotAllowed", 
        a[a.DownloadDocumentFromIrmEnabledDocumentLibrary = 19] = "DownloadDocumentFromIrmEnabledDocumentLibrary", 
        a[a.RdlTestDataSourceConnectionsFailure = 20] = "RdlTestDataSourceConnectionsFailure", 
        a[a.UnknownError = 255] = "UnknownError";
    }(a.PublishErrorCode || (a.PublishErrorCode = {}));
    a.PublishErrorCode;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(a) {
            this._keyFunc = a, this._verticies = {};
        }
        return b.prototype.getEdgesFromVertex = function(a) {
            var b = this._keyFunc(a);
            return this._verticies[b];
        }, b.prototype.addEdge = function(b, c, d) {
            var e = this._keyFunc(b), f = this._verticies[e];
            f || (f = this._verticies[e] = []);
            for (var g = 0, h = f.length; h > g; ++g) {
                var i = f[g];
                if (c === i.toVertex) return void a.Utility.throwIfNotTrue(i.data === d, "Conflicting edge has already been added.", "addEdge", "toVertex");
            }
            f.push({
                toVertex: c,
                data: d
            });
        }, b;
    }();
    a.DirectedGraph = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {}
        return b.setCommonRequestHeaders = function(c) {
            var d = a.Utility.generateGuid();
            return c.requestId = d, c.setRequestHeader(b.HttpActivityIdHeader, a.AppManager.current.activityId), 
            c.setRequestHeader(b.HttpRequestIdHeader, d), d;
        }, b.getErrorInfo = function(a) {
            return a.getResponseHeader(b.HttpInfoNavErrorInfoHeader);
        }, b.getRequestId = function(a) {
            var b = a;
            return b && b.requestId ? b.requestId : null;
        }, b.isForbiddenOrUnauthorized = function(a) {
            return 403 === a || 401 === a;
        }, b.HttpSpoContextTokenHeader = "X-AS-SpoContextToken", b.HttpCloudBIAccessTokenHeader = "X-SAAS-DatabaseAccessToken", 
        b.HttpInfoNavSpAccessTokenHeader = "X-AS-InfoNavSPAccessToken", b.HttpAuthorizationHeader = "Authorization", 
        b.HttpActivityIdHeader = "ActivityId", b.HttpRequestIdHeader = "RequestId", b.HttpInfoNavErrorInfoHeader = "X-InfoNav-Error-Info", 
        b;
    }();
    a.HttpUtility = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.Default = 0] = "Default", a[a.SuppressResponseDataType = 1] = "SuppressResponseDataType";
    }(a.AjaxCallSettings || (a.AjaxCallSettings = {}));
    {
        var b;
        a.AjaxCallSettings;
    }
    !function(b) {
        function c(b, c, d, h, i, j, k, l, m, n) {
            void 0 === l && (l = null), void 0 === m && (m = null), void 0 === n && (n = null);
            var o = {
                type: k,
                url: e(b, c, d, m ? m.join("/") : ""),
                timeout: g,
                contentType: a.Utility.JsonContentType,
                accepts: a.Utility.JsonContentType,
                dataType: a.Utility.JsonDataType
            };
            if (l) {
                var p = {
                    request: l
                };
                o.data = JSON.stringify(p);
            }
            n && (o.data = n);
            var q = f(d, j, o);
            return q.done(function(a, b, c) {
                h(l, a, c);
            }), q.fail(function(a) {
                i(a);
            }), q;
        }
        function d(b, c, d, h, i, j, k, l) {
            void 0 === k && (k = 0);
            var m = {
                type: i,
                url: e(b, c, d, l),
                timeout: g,
                contentType: a.Utility.JsonContentType,
                accepts: a.Utility.JsonContentType,
                data: j ? JSON.stringify(j) : j
            };
            return a.EnumExtensions.hasFlag(k, 1) || (m.dataType = a.Utility.JsonDataType), 
            f(d, h, m);
        }
        function e(b, c, d, e) {
            return a.Utility.urlCombine(b, "/infonav/" + c + "/" + d + "/" + (e || ""));
        }
        function f(b, c, d) {
            var e = "";
            return d.beforeSend = function(d) {
                a.HttpUtility.setCommonRequestHeaders(d), d.setRequestHeader(c.tokenHeader, c.tokenValue), 
                d.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), e = d.requestId, 
                a.Tracing.verbose("Executing " + b + " service", e);
            }, d.success = function() {
                a.Tracing.verbose("Success executing " + b, e);
            }, d.error = function(c, d) {
                a.Tracing.verbose("Error executing " + b + ": " + d, e);
            }, $.ajax(d);
        }
        var g = 6e4;
        b.callServiceWithCallbacks = c, b.callService = d;
    }(b = a.AjaxUtility || (a.AjaxUtility = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {}
        return b.staticConstructor = function() {
            var a = [ "\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", "\\b", "\\t", "\\n", "\\u000b", "\\f", "\\r", "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f" ];
            b._charsToEscape[0] = "\\", b._charsToEscapeRegExs["\\"] = new RegExp("\\\\", "g"), 
            b._escapeChars["\\"] = "\\\\", b._charsToEscape[1] = '"', b._charsToEscapeRegExs['"'] = new RegExp('"', "g"), 
            b._escapeChars['"'] = '\\"';
            for (var c = 0; 32 > c; c++) {
                var d = String.fromCharCode(c);
                b._charsToEscape[c + 2] = d, b._charsToEscapeRegExs[d] = new RegExp(d, "g"), b._escapeChars[d] = a[c];
            }
        }, b.serializeBooleanWithBuilder = function(b, c) {
            a.Utility.throwIfNullOrUndefined(c, this, "serializeBoolean", "stringBuilder"), 
            c.append(b.toString());
        }, b.serializeNumberWithBuilder = function(b, c) {
            a.Utility.throwIfNullOrUndefined(c, this, "serializeBoolean", "stringBuilder"), 
            a.Utility.throwIfNotTrue(isFinite(b), this, "serializeNumber", "isFinite(value)"), 
            c.append(String(b));
        }, b.serializeStringWithBuilder = function(c, d) {
            if (a.Utility.throwIfNullOrUndefined(d, this, "serializeBoolean", "stringBuilder"), 
            d.append('"'), b._escapeRegEx.test(c)) if (c.length < 128) c = c.replace(b._escapeRegExGlobal, function(a) {
                return b._escapeChars[a];
            }); else for (var e = 0; 34 > e; e++) {
                var f = b._charsToEscape[e];
                -1 !== c.indexOf(f) && (c = a.BrowserUtility.getInternetExplorerVersion() || a.BrowserUtility.getOperaVersion() ? c.split(f).join(b._escapeChars[f]) : c.replace(b._charsToEscapeRegExs[f], b._escapeChars[f]));
            }
            d.append(c), d.append('"');
        }, b.serializeWithBuilder = function(c, d, e, f) {
            var g;
            switch (typeof c) {
              case "object":
                if (c) {
                    if (f) for (var h = 0; h < f.length; h++) f[h] === c && a.Utility.throwException(a.Errors.invalidOperation("Cannot serialize objects with cycle")); else f = new Array();
                    try {
                        if (f.push(c), c instanceof Array) {
                            for (d.append("["), g = 0; g < c.length; ++g) g > 0 && d.append(","), b.serializeWithBuilder(c[g], d, !1, f);
                            d.append("]");
                        } else {
                            if (c instanceof Date) {
                                d.append('"\\/Date('), d.append(c.getTime()), d.append(')\\/"');
                                break;
                            }
                            var i = [], j = 0;
                            for (var k in c) "$" !== k.substr(0, 1) && (k === b._serverTypeFieldName && 0 !== j ? (i[j++] = i[0], 
                            i[0] = k) : i[j++] = k);
                            e && i.sort(), d.append("{");
                            var l = !1;
                            for (g = 0; j > g; g++) {
                                var m = c[i[g]];
                                "undefined" != typeof m && "function" != typeof m && (l ? d.append(",") : l = !0, 
                                b.serializeWithBuilder(i[g], d, e, f), d.append(":"), b.serializeWithBuilder(m, d, e, f));
                            }
                            d.append("}");
                        }
                    } finally {
                        f.splice(f.length - 1, 1);
                    }
                } else d.append("null");
                break;

              case "number":
                b.serializeNumberWithBuilder(c, d);
                break;

              case "string":
                b.serializeStringWithBuilder(c, d);
                break;

              case "boolean":
                b.serializeBooleanWithBuilder(c, d);
                break;

              default:
                d.append("null");
            }
        }, b.serialize = function(c) {
            var d = new a.StringBuilder();
            return b.serializeWithBuilder(c, d, !1), d.toString();
        }, b.deserialize = function(c) {
            a.Utility.throwIfNullOrUndefined(c, this, "deserialize", "Cannot deserialize empty string"), 
            a.Utility.throwIfNotTrue(c.length > 0, this, "deserialize", "Cannot deserialize empty string");
            try {
                var d = c.replace(b._dateRegEx, '$1"\\\\/Date($2)\\\\/"'), e = JSON.parse(d, function(c, d) {
                    if (a.Utility.isString(d)) {
                        var e = b._isolatedDateRegEx.test(d);
                        if (e) return b.deserializeMSAjaxDate(d);
                    }
                    return d;
                });
                return e;
            } catch (f) {
                a.Utility.throwException(a.Errors.invalidOperation("Cannot deserialize invalid JSON"));
            }
        }, b.deserializeMSAjaxDate = function(a) {
            var c = a.substring(b._msAjaxDatePrefix.length, a.length - b._dateSuffix.length - 1), d = parseInt(c);
            return new Date(d);
        }, b.deserializeDate = function(a) {
            return jsCommon.DateExtensions.deserializeDate(a);
        }, b.serializeDate = function(b) {
            return a.Utility.throwIfNullOrUndefined(b, this, "serializeDate", "Cannot serialize empty date"), 
            jsCommon.DateExtensions.serializeDate(b);
        }, b._charsToEscapeRegExs = [], b._charsToEscape = [], b._dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', "g"), 
        b._isolatedDateRegEx = new RegExp("\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/"), 
        b._msAjaxDatePrefix = "\\/Date(", b._datePrefix = "/Date(", b._dateSuffix = ")/", 
        b._escapeChars = {}, b._escapeRegEx = new RegExp('["\\\\\\x00-\\x1F]', "i"), b._escapeRegExGlobal = new RegExp('["\\\\\\x00-\\x1F]', "g"), 
        b._jsonRegEx = new RegExp("[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]", "g"), b._jsonStringRegEx = new RegExp('"(\\\\.|[^"\\\\])*"', "g"), 
        b._serverTypeFieldName = "__type", b;
    }();
    a.JavaScriptSerializer = b, b.staticConstructor();
}(InJs || (InJs = {}));

var powerbi;

!function(a) {
    var b, c = jsCommon.ArrayExtensions;
    !function(a) {
        function b(a) {
            if (!c.isUndefinedOrEmpty(a)) {
                for (var b = [], d = 0, f = a.length; f > d; ++d) {
                    var g = a[d], h = g.utterance;
                    g.completedUtterance && (h = g.completedUtterance.Text);
                    var i = e(h, g.source);
                    i && b.push(i);
                }
                return c.emptyToNull(b);
            }
        }
        function d(a) {
            return {
                utterance: a,
                restatement: null,
                queryDefn: null,
                configs: null,
                queryDescriptor: null,
                dataViewSource: null,
                queryMetadata: null,
                virtualServerName: null,
                databaseName: null
            };
        }
        function e(a, b) {
            var c = b.Command;
            if (!c) return null;
            var d = c.QueryMetadata;
            d ? !d.Select && b.QueryMetadata && (d.Select = b.QueryMetadata.Select) : d = b.QueryMetadata;
            var e = c.Binding, f = c.Data, g = null, h = null, i = null;
            if (f) {
                if (!e) return;
                if (h = JSON.parse(e), i = JSON.parse(f), !i) return;
                g = {
                    data: {
                        descriptor: h,
                        dsr: i
                    }
                };
            }
            return {
                utterance: a,
                restatement: b.Restatement,
                queryDefn: c.Query,
                queryDescriptor: h,
                queryMetadata: d,
                configs: c.VisualConfigurations,
                dataViewSource: g,
                virtualServerName: b.VirtualServerName,
                databaseName: b.DatabaseName
            };
        }
        a.parseInterpret = b, a.createSimpleUtteranceData = d;
    }(b = a.InterpretResultUtility || (a.InterpretResultUtility = {}));
}(powerbi || (powerbi = {}));

var InJs;

!function(a) {
    var b = function() {
        function a() {}
        return Object.defineProperty(a, "Traces", {
            get: function() {
                return a.initializeListener(), jsCommon.Trace.getTraces();
            },
            enumerable: !0,
            configurable: !0
        }), a.warning = function(b, c) {
            a.initializeListener(), jsCommon.Trace.warning(b, c);
        }, a.error = function(b, c) {
            a.initializeListener(), jsCommon.Trace.error(b, !1, c);
        }, a.verbose = function(b, c) {
            a.initializeListener(), jsCommon.Trace.verbose(b, c);
        }, a.initializeListener = function() {
            a.listenerInitialized || (jsCommon.Trace.addListener(new c()), a.listenerInitialized = !0);
        }, a.listenerInitialized = !1, a;
    }();
    a.Tracing = b;
    var c = function() {
        function b() {}
        return b.prototype.logTrace = function(b) {
            a.AppManager && a.AppManager.current && (b._activityId = a.AppManager.current.activityId);
        }, b;
    }();
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    a.CssConstants = jsCommon.CssConstants, a.DOMConstants = jsCommon.DOMConstants, 
    a.StringExtensions = jsCommon.StringExtensions, a.Utility = jsCommon.Utility, a.StringBuilder = jsCommon.StringBuilder, 
    a.DateExtensions = jsCommon.DateExtensions, a.EnumExtensions = jsCommon.EnumExtensions, 
    a.Errors = jsCommon.Errors, a.QueryStringUtil = jsCommon.QueryStringUtil, a.HttpStatusCode = jsCommon.HttpStatusCode, 
    a.HttpConstants = jsCommon.HttpConstants, a.VersionUtility = jsCommon.VersionUtility, 
    a.XmlUtility = jsCommon.XmlUtility, a.JQueryConstants = jsCommon.JQueryConstants, 
    a.ArrayExtensions = jsCommon.ArrayExtensions, a.DeferredBatch = jsCommon.DeferredBatch, 
    a.TimerPromiseFactory = jsCommon.TimerPromiseFactory;
    var b = function() {
        function b() {
            this._connectionGroups = {}, b._current && a.Utility.throwException(a.Errors.invalidOperation("AppManager is an implicit singleton and cannot be instantiated explicitly")), 
            this._pageLoadStartTime = window[b._pageLoadStartTimeVariableName] ? window[b._pageLoadStartTimeVariableName] : new Date().getTime();
            var c = a.QueryStringUtil.getQueryStringValue(a.QueryStringUtil.OriginClientActivityIdParameterName);
            this._activityId = c ? c : a.Utility.generateGuid(), a.Tracing.verbose("Client activity id is " + this._activityId), 
            this._initializeOrigin(), this._defineAppWidgets();
        }
        return Object.defineProperty(b, "current", {
            get: function() {
                return b._current;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "activityId", {
            get: function() {
                return this.getActivityId();
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.getActivityId = function() {
            return this._activityId;
        }, b.setGetActivityIdImpl = function(a) {
            b.prototype.getActivityId = a;
        }, Object.defineProperty(b.prototype, "pageLoadStartTime", {
            get: function() {
                return this._pageLoadStartTime;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "initialClusterUri", {
            get: function() {
                return clusterUri;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.standaloneGroup = function(b) {
            this._ensureInitialized(), this._verifyOptions(b);
            var c = $.extend({}, b, {
                isUserAdmin: !1,
                isRuntimeModelingEnabled: !1
            });
            return this._ensureConnectionGroup(b.name, function() {
                return new a.StandaloneCloudConnectionGroup(c);
            });
        }, b.prototype.powerBIGroup = function(b) {
            try {
                return this._ensureInitialized(), this._verifyOptions(b), this._ensureConnectionGroup(b.name, function() {
                    return new a.PowerBIConnectionGroup(b);
                });
            } catch (c) {
                this._handleInitializationExceptions(c, b.modalDialog);
            }
        }, b.prototype._verifyOptions = function(b) {
            return b ? a.Utility.isString(b.name) ? void 0 : (a.Utility.throwException(a.Errors.invalidOperation('The required option "name" expects a string value')), 
            null) : (a.Utility.throwException(a.Errors.invalidOperation('The required parameter "options" was not provided')), 
            null);
        }, b.prototype._ensureInitialized = function() {
            b.current._initialized || b.current._initialize();
        }, b.prototype._initializeOrigin = function() {
            var a = document.getElementsByTagName("script"), b = a[a.length - 1], c = document.createElement("a");
            c.href = b.src, this._originUri = c.protocol + "//" + c.host;
        }, b.prototype._initialize = function() {
            this._checkDependencies(), a.InfoNavApp.current ? a.Utility.throwException(a.Errors.invalidOperation("An app already exists in this context")) : a.InfoNavApp._current = new a.EmbeddedInfoNavApp(), 
            this._originUri || a.Utility.throwException(a.Errors.invalidOperation("The originUri is expected to be initialized at this point")), 
            this._defineJQueryWidgets(), this._initialized = !0;
        }, b.prototype._checkDependencies = function() {
            var c = window[b._jQueryVarName];
            (!c || a.VersionUtility.compareVersions(b._minimumRequiredJQueryVersion, jQuery.fn.jquery) > 0) && a.Utility.throwException(new a.Exceptions.MissingDependencyException("jQuery version " + b._minimumRequiredJQueryVersion));
            var d = window[b._silverlightVarName];
            d || "undefined" != typeof powerbi.session || a.Utility.throwException(new a.Exceptions.MissingDependencyException("silverlight.js"));
        }, b.prototype._defineAppWidgets = function() {
            window[b._appApiRoot] = this;
        }, b.prototype._defineJQueryWidgets = function() {
            a.WidgetFactory.defineJQueryWidget(b._infoNavQuestionBoxWidgetName, function(b, c) {
                return new a.QuestionBox.QuestionBoxControl(b, c);
            });
            var c = this._originUri;
            a.WidgetFactory.defineJQueryWidget(b._infoNavVisualizerWidgetName, function(b, d) {
                return new a.PowerViewSilverlightControl(b, d, c + "/ReportServer");
            });
        }, b.prototype._ensureConnectionGroup = function(b, c) {
            a.Utility.throwIfNullOrUndefined(b, this, "_ensureConnectionGroup", "name"), a.Utility.throwIfNullOrUndefined(c, this, "_ensureConnectionGroup", "constructor");
            var d = this._connectionGroups[b];
            return d || (this._connectionGroups[b] = d = c()), d;
        }, b.prototype._handleInitializationExceptions = function(b, c) {
            b instanceof a.Exceptions.UnsupportedBrowserException ? c.showPrompt(a.Strings.unsupportedBrowserMessageTitle, a.Strings.unsupportedBrowserMessageText, [], !1) : c.showError(a.Strings.fatalErrorDialogText, 6);
        }, b._pageLoadStartTimeVariableName = "infoNavPageLoadStartTime", b._appApiRoot = "infonav", 
        b._current = new b(), b._jQueryVarName = "jQuery", b._silverlightVarName = "Silverlight", 
        b._minimumRequiredJQueryVersion = "1.9.1", b._infoNavQuestionBoxWidgetName = "infonavQuestionBox", 
        b._infoNavVisualizerWidgetName = "infonavVisualizer", b;
    }();
    a.AppManager = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {
            if (!a.BrowserUtility.isBrowserSupported()) throw new a.Exceptions.UnsupportedBrowserException();
        }
        return Object.defineProperty(b, "current", {
            get: function() {
                return this._current;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.add_resize = function(a, c) {
            $(this).on(b.ResizeEventName, c, a);
        }, b.prototype.remove_resize = function(a) {
            $(this).off(b.ResizeEventName, a);
        }, b.prototype.raiseResizeEvent = function() {
            $(this).trigger(b.ResizeEventName);
        }, b.prototype.refreshLayout = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("InfoNavApp", "refreshLayout"));
        }, b.ResizeEventName = "resize", b;
    }();
    a.InfoNavApp = b;
}(InJs || (InJs = {}));

var __extends = this.__extends || function(a, b) {
    function c() {
        this.constructor = a;
    }
    for (var d in b) b.hasOwnProperty(d) && (a[d] = b[d]);
    c.prototype = b.prototype, a.prototype = new c();
}, InJs;

!function(a) {
    var b = (jsCommon.TraceType, function(b) {
        function c() {
            c._currentStandalone && a.Utility.throwException(a.Errors.invalidOperation("Standalone app already exists in this context")), 
            this._modalDialog = new a.ModalDialog($("body")), this._notificationControl = new a.Notifications.NotificationControl($("body")), 
            b.call(this), this.attachErrorHandler(), c._currentStandalone = this;
        }
        return __extends(c, b), Object.defineProperty(c, "currentStandalone", {
            get: function() {
                return c._currentStandalone;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "modalDialog", {
            get: function() {
                return this._modalDialog;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "notificationControl", {
            get: function() {
                return this._notificationControl;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.handleIninitalizationExceptions = function(b) {
            b instanceof a.Exceptions.UnsupportedBrowserException ? this.modalDialog.showPrompt(a.Strings.unsupportedBrowserMessageTitle, a.Strings.unsupportedBrowserMessageText, [], !1) : this.modalDialog.showError(a.Strings.fatalErrorDialogText, 6);
        }, c.prototype.attachErrorHandler = function() {
            var a = this;
            window.onerror = function(b, c, d, e, f) {
                var g = {};
                return g.message = JSON.stringify(b), f && f.message && f.stack && (g.message = f.message, 
                g.stack = f.stack), g.sourceUrl = c, g.lineNumber = d, g.columnNumber = e, a.modalDialog.showError(g.message, 5, null, g), 
                !0;
            };
        }, c;
    }(a.InfoNavApp));
    a.StandaloneInfoNavApp = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b() {
            var b = this;
            a.call(this), $(window).resize(function() {
                b.refreshLayout();
            });
        }
        return __extends(b, a), b.prototype.refreshLayout = function() {
            this.raiseResizeEvent();
        }, b;
    }(a.InfoNavApp);
    a.EmbeddedInfoNavApp = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {
            this._options = {};
        }
        return Object.defineProperty(b.prototype, "options", {
            get: function() {
                return this._options;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.setOptions = function(b) {
            a.Utility.throwIfNullOrUndefined(b, this, "setOptions", "options");
            for (var c in b) this.setOption(c, b[c]);
        }, b.prototype.setOption = function(b, c) {
            a.Utility.throwIfNullOrUndefined(b, this, "setOptions", "optionName"), c === a.Utility.Undefined && a.Utility.throwException(a.Errors.invalidOperation("Cannot set a controller option to " + a.Utility.Undefined)), 
            this._options[b] = c;
        }, b.prototype._defineOperation = function(b) {
            this[b.name] && a.Utility.throwException(a.Errors.invalidOperation('The operation "' + b.name + '" already exists on this controller')), 
            this[b.name] = b.callback;
        }, b.prototype._defineOption = function(c, d, e) {
            a.Utility.throwIfNullOrUndefined(c, this, "_defineOption", "optionDefinition"), 
            a.Utility.throwIfNullOrUndefined(d, this, "_defineOption", "options"), this._options[c.name] && a.Utility.throwException(a.Errors.invalidOperation('The option "' + c.name + '" already exists on this controller')), 
            Object.defineProperty(this._options, c.name, {
                get: c.getter,
                set: c.setter,
                enumerable: !0,
                configurable: e
            });
            var f = d[c.name], g = void 0 === c.defaultValue;
            g ? void 0 === f ? a.Utility.throwException(a.Errors.invalidOperation('Required option "' + c.name + '" was not provided')) : this.setOption(c.name, f) : void 0 !== f ? this.setOption(c.name, f) : this.setOption(c.name, c.defaultValue), 
            e && Object.defineProperty(this._options, c.name, {
                get: c.getter,
                set: b._optionIsReadOnlyStub,
                enumerable: !0,
                configurable: !1
            });
        }, b._optionIsReadOnlyStub = function() {
            a.Utility.throwException(a.Errors.invalidOperation("Option is read-only"));
        }, b;
    }();
    a.InfoNavController = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(a) {
            b.call(this), this._currentInterpretResponse = null, a && this.registerBridge(a);
        }
        return __extends(c, b), c.prototype.registerBridge = function(b) {
            this._bridge && a.Utility.throwException(a.Errors.invalidOperation("Participant is already registered on a bridge")), 
            b.attach(a.Events.ConnectionGroupInvalidatedEventName, c.bridge_ConnectionGroupInvalidated, this), 
            b.attach(a.Events.ConnectionGroupReadyEventName, c.bridge_ConnectionGroupReady, this), 
            b.attach(a.Events.InterpretSuccessEventName, c.bridge_InterpretSuccess, this), b.attach(a.Events.InterpretIssuedEventName, c.bridge_InterpretIssued, this), 
            b.attach(a.Events.InterpretErrorEventName, c.bridge_InterpretError, this), b.attach(a.Events.InterpretRetryInProgressEventName, c.bridge_InterpretTimedOut, this), 
            b.attach(a.Events.InterpretRetryCountExceededEventName, c.bridge_InterpretRetryCountExceeded, this), 
            b.attach(a.Events.InterpretProbeInProgressEventName, c.bridge_InterpretProbeInProgress, this), 
            b.attach(a.Events.InterpretProbeSuccessEvent, c.bridge_InterpretProbeSuccess, this), 
            b.attach(a.Events.InterpretProbeErrorEventName, c.bridge_InterpretProbeError, this), 
            b.attach(a.Events.ClearInterpretResultEventName, c.bridge_InterpretResultCleared, this), 
            b.attach(a.Events.InterpretResultCacheClearedEventName, c.bridge_InterpretResultCacheCleared, this), 
            b.attach(a.Events.InterpretResultChangedEventName, c.bridge_InterpretResultChanged, this), 
            b.attach(a.Events.SetVisualizationTypeEventName, c.bridge_SetVisualizedTypeIssued, this), 
            b.attach(a.Events.AvailableVisualizationTypesReadyEventName, c.bridge_AvailableVisualizationTypesReady, this), 
            b.attach(a.Events.PowerViewErrorEventName, c.bridge_PowerViewError, this), b.attach(a.Events.QuestionBoxSuggestionsDisplayedEventName, c.bridge_QuestionBoxSuggestionsDisplayed, this), 
            b.attach(a.Events.ChangeUserUtteranceEventName, c.bridge_ChangeUserUtterance, this), 
            b.attach(a.Events.UserUtteranceConfirmedEventName, c.bridge_UserUtteranceConfirmed, this), 
            b.attach(a.Events.TermSelectionChangedEventName, c.bridge_TermSelectionChanged, this), 
            b.attach(a.Events.CollageVisibilityChangedEventName, c.bridge_CollageVisibilityChanged, this), 
            b.attach(a.Events.FeaturedQuestionsUpdatedEventName, c.bridge_FeaturedQuestionsUpdated, this), 
            b.attach(a.Events.ShowMessageEventName, c.bridge_ShowMessage, this), b.attach(a.Events.ShowPromptEventName, c.bridge_ShowPrompt, this), 
            b.attach(a.Events.ShowErrorEventName, c.bridge_ShowError, this), b.attach(a.Events.ShowCustomDialogEventName, c.bridge_ShowCustomDialog, this), 
            b.attach(a.Events.HideDialogEventName, c.bridge_HideDialog, this), b.attach(a.Events.ShowNotificationEventName, c.bridge_ShowNotification, this), 
            b.attach(a.Events.HideNotificationEventName, c.bridge_HideNotification, this), this._bridge = b;
        }, c.prototype.unregisterBridge = function() {
            if (this._bridge) {
                var b = this._bridge;
                b.detach(a.Events.ConnectionGroupInvalidatedEventName, c.bridge_ConnectionGroupInvalidated), 
                b.detach(a.Events.ConnectionGroupReadyEventName, c.bridge_ConnectionGroupReady), 
                b.detach(a.Events.InterpretSuccessEventName, c.bridge_InterpretSuccess), b.detach(a.Events.InterpretIssuedEventName, c.bridge_InterpretIssued), 
                b.detach(a.Events.InterpretErrorEventName, c.bridge_InterpretError), b.detach(a.Events.InterpretRetryInProgressEventName, c.bridge_InterpretTimedOut), 
                b.detach(a.Events.InterpretRetryCountExceededEventName, c.bridge_InterpretRetryCountExceeded), 
                b.detach(a.Events.InterpretProbeInProgressEventName, c.bridge_InterpretProbeInProgress), 
                b.detach(a.Events.InterpretProbeSuccessEvent, c.bridge_InterpretProbeSuccess), b.detach(a.Events.InterpretProbeErrorEventName, c.bridge_InterpretProbeError), 
                b.detach(a.Events.ClearInterpretResultEventName, c.bridge_InterpretResultCleared), 
                b.detach(a.Events.InterpretResultCacheClearedEventName, c.bridge_InterpretResultCacheCleared), 
                b.detach(a.Events.InterpretResultChangedEventName, c.bridge_InterpretResultChanged), 
                b.detach(a.Events.SetVisualizationTypeEventName, c.bridge_SetVisualizedTypeIssued), 
                b.detach(a.Events.AvailableVisualizationTypesReadyEventName, c.bridge_AvailableVisualizationTypesReady), 
                b.detach(a.Events.PowerViewErrorEventName, c.bridge_PowerViewError), b.detach(a.Events.QuestionBoxSuggestionsDisplayedEventName, c.bridge_QuestionBoxSuggestionsDisplayed), 
                b.detach(a.Events.ChangeUserUtteranceEventName, c.bridge_ChangeUserUtterance), b.detach(a.Events.UserUtteranceConfirmedEventName, c.bridge_UserUtteranceConfirmed), 
                b.detach(a.Events.TermSelectionChangedEventName, c.bridge_TermSelectionChanged), 
                b.detach(a.Events.CollageVisibilityChangedEventName, c.bridge_CollageVisibilityChanged), 
                b.detach(a.Events.FeaturedQuestionsUpdatedEventName, c.bridge_FeaturedQuestionsUpdated), 
                b.detach(a.Events.ShowMessageEventName, c.bridge_ShowMessage), b.detach(a.Events.ShowPromptEventName, c.bridge_ShowPrompt), 
                b.detach(a.Events.ShowErrorEventName, c.bridge_ShowError), b.detach(a.Events.ShowCustomDialogEventName, c.bridge_ShowCustomDialog), 
                b.detach(a.Events.HideDialogEventName, c.bridge_HideDialog), b.detach(a.Events.ShowNotificationEventName, c.bridge_ShowNotification), 
                b.detach(a.Events.HideNotificationEventName, c.bridge_HideNotification), this._bridge = null;
            }
        }, Object.defineProperty(c.prototype, "bridge", {
            get: function() {
                return this._bridge;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype._clearCurrentInterpretResult = function() {
            this._currentInterpretResponse = null;
        }, c.prototype._hasInterpretResponse = function() {
            return !!this._currentInterpretResponse && this._currentInterpretResponse.result;
        }, c.prototype._onConnectionGroupInvalidated = function() {}, c.prototype._onConnectionGroupReady = function() {}, 
        c.prototype._onInterpretResultChanged = function() {}, c.prototype._onInterpretIssued = function() {}, 
        c.prototype._onInterpretSuccess = function() {}, c.prototype._onInterpretError = function() {}, 
        c.prototype._onInterpretRetryInProgress = function() {}, c.prototype._onInterpretRetryCountExceeded = function() {}, 
        c.prototype._onInterpretProbeInProgress = function() {}, c.prototype._onInterpretProbeSuccess = function() {}, 
        c.prototype._onInterpretProbeError = function() {}, c.prototype._onInterpretResultCleared = function() {}, 
        c.prototype._onInterpretResultCacheCleared = function() {}, c.prototype._onSetVisualizationType = function() {}, 
        c.prototype._onAvailableVisualizationTypesReady = function() {}, c.prototype._onPowerViewError = function() {}, 
        c.prototype._onQuestionBoxSuggestionsDisplayed = function() {}, c.prototype._onChangeUserUtterance = function() {}, 
        c.prototype._onUserUtteranceConfirmed = function() {}, c.prototype._onTermSelectionChanged = function() {}, 
        c.prototype._onCollageVisibilityChanged = function() {}, c.prototype._onFeaturedQuestionsUpdated = function() {}, 
        c.prototype._onShowMessage = function() {}, c.prototype._onShowPrompt = function() {}, 
        c.prototype._onShowError = function() {}, c.prototype._onShowCustomDialog = function() {}, 
        c.prototype._onHideDialog = function() {}, c.prototype._onShowNotification = function() {}, 
        c.prototype._onHideNotification = function() {}, c.bridge_ConnectionGroupInvalidated = function(a) {
            var b = a.data;
            b._onConnectionGroupInvalidated();
        }, c.bridge_ConnectionGroupReady = function(a) {
            var b = a.data;
            b._onConnectionGroupReady();
        }, c.bridge_InterpretIssued = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_InterpretIssued", "eventArgs"), d._onInterpretIssued(c);
        }, c.bridge_InterpretSuccess = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_InterpretSuccess", "eventArgs"), 
            d._currentInterpretResponse = c.response, d._onInterpretSuccess(c);
        }, c.bridge_InterpretError = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_InterpretError", "eventArgs");
            var e = c;
            d._currentInterpretResponse = null, d._onInterpretError(e);
        }, c.bridge_InterpretTimedOut = function(a) {
            var b = a.data;
            b._onInterpretRetryInProgress();
        }, c.bridge_InterpretRetryCountExceeded = function(a) {
            var b = a.data;
            b._onInterpretRetryCountExceeded();
        }, c.bridge_InterpretProbeInProgress = function(a) {
            var b = a.data;
            b._onInterpretProbeInProgress();
        }, c.bridge_InterpretProbeSuccess = function(a) {
            var b = a.data;
            b._onInterpretProbeSuccess();
        }, c.bridge_InterpretProbeError = function(a) {
            var b = a.data;
            b._onInterpretProbeError();
        }, c.bridge_InterpretResultCleared = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_InterpretResultCleared", "eventArgs"), 
            d._clearCurrentInterpretResult(), d._onInterpretResultCleared(c);
        }, c.bridge_InterpretResultCacheCleared = function(a) {
            var b = a.data;
            b._onInterpretResultCacheCleared();
        }, c.bridge_InterpretResultChanged = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_InterpretResultChanged", "eventArgs");
            var e = c;
            d._currentInterpretResponse = e.response, d._onInterpretResultChanged(e);
        }, c.bridge_SetVisualizedTypeIssued = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_SetVisualizedTypeIssued", "eventArgs"), 
            d._onSetVisualizationType(c);
        }, c.bridge_AvailableVisualizationTypesReady = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_AvailableVisualizationTypesReady", "eventArgs"), 
            d._onAvailableVisualizationTypesReady(c);
        }, c.bridge_PowerViewError = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_PowerViewError", "eventArgs"), d._onPowerViewError(c);
        }, c.bridge_QuestionBoxSuggestionsDisplayed = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_QuestionBoxSuggestionsDisplayed", "eventArgs"), 
            d._onQuestionBoxSuggestionsDisplayed(c);
        }, c.bridge_ChangeUserUtterance = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ChangeUserUtterance", "eventArgs"), 
            d._onChangeUserUtterance(c);
        }, c.bridge_UserUtteranceConfirmed = function(a) {
            var b = a.data;
            b._onUserUtteranceConfirmed();
        }, c.bridge_TermSelectionChanged = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_TermSelectionChanged", "eventArgs"), 
            d._onTermSelectionChanged(c);
        }, c.bridge_CollageVisibilityChanged = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_CollageVisibilityChanged", "eventArgs"), 
            d._onCollageVisibilityChanged(c);
        }, c.bridge_FeaturedQuestionsUpdated = function(a) {
            var b = a.data;
            b._onFeaturedQuestionsUpdated();
        }, c.bridge_ShowMessage = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowMessage", "eventArgs"), d._onShowMessage(c);
        }, c.bridge_ShowPrompt = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowPrompt", "eventArgs"), d._onShowPrompt(c);
        }, c.bridge_ShowError = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowError", "eventArgs"), d._onShowError(c);
        }, c.bridge_ShowCustomDialog = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowCustomDialog", "eventArgs"), 
            d._onShowCustomDialog(c);
        }, c.bridge_HideDialog = function(a) {
            var b = a.data;
            b._onHideDialog();
        }, c.bridge_ShowNotification = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_ShowNotification", "eventArgs"), 
            d._onShowNotification(c);
        }, c.bridge_HideNotification = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_HideNotification", "eventArgs"), 
            d._onHideNotification(c);
        }, c;
    }(a.InfoNavController);
    a.EventBridgeParticipant = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.None = 0] = "None", a[a.Default = 1] = "Default", a[a.Management = 2] = "Management", 
        a[a.SharePointOnline = 4] = "SharePointOnline", a[a.AAD = 8] = "AAD";
    }(a.InfoNavTokenKind || (a.InfoNavTokenKind = {}));
    var b, c = a.InfoNavTokenKind;
    !function(b) {
        function d(a) {
            return e(a, a.getSecurityTokenKind());
        }
        function e(b, d) {
            switch (d) {
              case 1:
                return {
                    tokenHeader: a.HttpUtility.HttpCloudBIAccessTokenHeader,
                    tokenValue: b.getSecurityToken()
                };

              case c.Management:
                return {
                    tokenHeader: a.HttpUtility.HttpInfoNavSpAccessTokenHeader,
                    tokenValue: b.getManagementSecurityToken()
                };

              case c.SharePointOnline:
                return {
                    tokenHeader: a.HttpUtility.HttpSpoContextTokenHeader,
                    tokenValue: b.getSpoContextToken()
                };

              case c.AAD:
                return {
                    tokenHeader: a.HttpUtility.HttpAuthorizationHeader,
                    tokenValue: "Bearer " + b.getSecurityToken()
                };
            }
            return null;
        }
        b.getSecurityToken = d, b.getToken = e;
    }(b = a.InfoNavServiceConfigurationUtils || (a.InfoNavServiceConfigurationUtils = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d) {
            a.Utility.throwIfNullOrUndefined(c, this, "ctor", "configurationProvider"), a.Utility.throwIfNullOrUndefined(d, this, "ctor", "configurationProvider"), 
            b.call(this, c), this._configurationProvider = d;
        }
        return __extends(c, b), Object.defineProperty(c.prototype, "configurationProvider", {
            get: function() {
                return this._configurationProvider;
            },
            enumerable: !0,
            configurable: !0
        }), c;
    }(a.EventBridgeParticipant);
    a.InfoNavClientService = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.InProgress = 0] = "InProgress", a[a.Success = 1] = "Success", a[a.Failed = 2] = "Failed";
    }(a.InterpretProbeStatus || (a.InterpretProbeStatus = {}));
    var b = (a.InterpretProbeStatus, function() {
        function a() {
            this.timedOut = !1, this.aborted = !1, this.activityId = null, this.requestId = null, 
            this.request = null, this.executor = null, this.interpretActivity = null, this.responseHandler = null;
        }
        return a;
    }());
    a.PendingInterpretRequest = b;
    var c = function() {
        function b() {
            this.requestId = null, this.results = null, this.options = null;
        }
        return b.prototype.containsWarning = function(b) {
            var c = this.results;
            if (c && c.length) for (var d = 0, e = c.length; e > d; d++) if (a.EnumExtensions.hasFlag(c[d].Warnings, b)) return !0;
            return !1;
        }, b;
    }();
    a.CachedResult = c;
    var d = function(d) {
        function e(a, b, c) {
            d.call(this, a, b), this.JQueryTimedOutStatus = "timeout", this.JQueryAbortedStatus = "abort", 
            this.MinUtteranceLength = 1, this.InterpretOperationTimeout = 15e3, this.InterpretProbeOperationTimeout = 65e3, 
            this.MaxInterpretRequests = 4, this.MaxSchemaLoadingRetryRequests = 5, this.MaxTimeoutRetryRequests = 3, 
            this._initialUtterance = null, this._initialInterpretOptions = null, this._initialUtteranceActivity = null, 
            this._resultCache = null, this._defaultResultSource = null, this._selectedResultSource = null, 
            this._currentResponse = null, this._version = 0, this._interpretRequestQueue = null, 
            this._currentSchemaLoadingRetryCount = 0, this._currentTimeoutRetryCount = 0, this._probeRequestResultCache = null, 
            this._refreshAppMetadataAttempted = !1, this._currentOrderId = 0, this._interpretRequestQueue = [], 
            this._interpretRequestTransientLinguisticSchemaMap = {}, this._probeRequestResultCache = {}, 
            this._version = c, this.configurationProvider.getIsReady() && this.onGroupReady();
        }
        return __extends(e, d), e.prototype._onConnectionGroupInvalidated = function() {
            this.onGroupInvalidated();
        }, e.prototype._onConnectionGroupReady = function() {
            this.onGroupReady();
        }, e.prototype._onInterpretResultCleared = function(a) {
            a.abortInterprets && this.abortAllInterpretRequests(!0), a.clearUtterance && (this._initialUtterance = null);
        }, e.prototype._onInterpretResultCacheCleared = function() {
            this._resultCache = {}, this._currentResponse && this.interpretAsync(this._currentResponse.utterance);
        }, e.abortInterpretRequest = function(b) {
            if (b && b.executor && !b.aborted) try {
                b.aborted = !0, b.executor.abort(), a.Tracing.verbose("Interpret request aborted", b.requestId);
            } catch (c) {
                a.Tracing.error("Error while aborting Interpret request", b.requestId);
            } finally {
                b.interpretActivity && !b.interpretActivity.completed && e.endInterpretActivityIfPresent(b.interpretActivity, 0, a.ActivityErrors.UserAborted);
            }
        }, e.isInProgressRequest = function(a) {
            return !a.aborted && a.executor.readyState !== a.executor.DONE;
        }, Object.defineProperty(e.prototype, "interpretRequestUrl", {
            get: function() {
                return a.Utility.urlCombine(this.configurationProvider.getClusterUri(), e.InterpretationServicePath + e.InterpretOperationPath);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(e.prototype, "interpretProbeRequestUrl", {
            get: function() {
                return a.Utility.urlCombine(this.configurationProvider.getClusterUri(), e.InterpretationServicePath + e.InterpretProbeOperationName);
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.raiseInterpretIssuedEvent = function(b) {
            this.bridge.raise(a.Events.InterpretIssuedEventName, b), this.bridge.raise(a.Events.InterpretUsageIssuedEventName, b);
        }, e.prototype.raiseInterpretSuccessEvent = function(b) {
            this._selectedResultSource = null, b.response.defaultResultSource = this._defaultResultSource, 
            b.response.selectedResultSource = this._selectedResultSource, this._currentResponse = b.response, 
            this.bridge.raise(a.Events.InterpretSuccessEventName, b), this.bridge.raise(a.Events.InterpretUsageSuccessEventName, b);
        }, e.prototype.raiseInterpretErrorEvent = function(b) {
            this.bridge.raise(a.Events.InterpretErrorEventName, b);
        }, e.prototype.raiseClearInterpretResultEvent = function(b) {
            this.bridge.raise(a.Events.ClearInterpretResultEventName, b);
        }, e.prototype.raiseInterpretResultChangedEvent = function(b) {
            this.bridge.raise(a.Events.InterpretResultChangedEventName, b);
        }, e.prototype.raiseRetryInProgress = function() {
            this.bridge.raise(a.Events.InterpretRetryInProgressEventName);
        }, e.prototype.raiseInterpretRetryCountExceeded = function() {
            this.bridge.raise(a.Events.InterpretRetryCountExceededEventName);
        }, e.prototype.raiseProbingRequestInProgress = function() {
            this.bridge.raise(a.Events.InterpretProbeInProgressEventName);
        }, e.prototype.raiseProbingRequestSuccessEvent = function() {
            this.bridge.raise(a.Events.InterpretProbeSuccessEvent);
        }, e.prototype.raiseInterpretProbeErrorEvent = function() {
            this.bridge.raise(a.Events.InterpretProbeErrorEventName);
        }, e.prototype.onGroupInvalidated = function(a) {
            var b = a ? a.data : this;
            b._currentTimeoutRetryCount = 0, b._currentSchemaLoadingRetryCount = 0;
        }, e.prototype.onGroupReady = function(a) {
            var b = a ? a.data : this;
            b._resultCache = {}, b.issueProbeRequest();
        }, e.prototype.onProbeRequestSuccess = function() {
            this.setProbeRequestStatus(1), this._refreshAppMetadataAttempted = !1, this.raiseProbingRequestSuccessEvent(), 
            a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(this._initialUtterance) || this.interpretAsync(this._initialUtterance, this._initialUtteranceActivity, null, null, this._initialInterpretOptions);
        }, e.prototype.onProbeRequestFailure = function(b) {
            this.setProbeRequestStatus(2), this.raiseInterpretProbeErrorEvent(), a.HttpUtility.isForbiddenOrUnauthorized(b.status) ? this._refreshAppMetadataAttempted ? a.Tracing.verbose("Not refreshing app metadata again on access denied for interpret probe", b.requestId) : (this._refreshAppMetadataAttempted = !0, 
            this.configurationProvider.invalidate(), a.Tracing.verbose("Refreshing app metadata on access denied for interpret probe", b.requestId)) : this._currentTimeoutRetryCount < this.MaxTimeoutRetryRequests ? (a.StringExtensions.isNullOrEmpty(this._initialUtterance) || this.raiseRetryInProgress(), 
            this._currentTimeoutRetryCount++, this.issueProbeRequest(), a.Tracing.verbose("Retrying unsuccessful probe request.", b.requestId)) : (this.raiseInterpretRetryCountExceeded(), 
            a.Tracing.error("Aborting initialization after probe request failures", b.requestId));
        }, e.prototype.issueProbeRequest = function() {
            this.setProbeRequestStatus(0), this.interpretProbeAsyncInternal();
        }, Object.defineProperty(e.prototype, "probeRequestInProgress", {
            get: function() {
                var a = this.configurationProvider.getSecurityToken();
                return 0 === this._probeRequestResultCache[a];
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.setProbeRequestStatus = function(a) {
            var b = this.configurationProvider.getSecurityToken();
            this._probeRequestResultCache[b] = a;
        }, e.prototype._setDefaultResultSource = function(b) {
            if (this._defaultResultSource = b, this._currentResponse) {
                this._currentResponse.defaultResultSource = this._defaultResultSource;
                var c = new a.InterpretResultChangedEventArgs(this._currentResponse, this._currentResponse.requestId);
                this.raiseInterpretResultChangedEvent(c);
            }
        }, e.prototype._setResultSources = function(b, c) {
            if (this._defaultResultSource = c, this._selectedResultSource = b, this._currentResponse) {
                this._currentResponse.defaultResultSource = this._defaultResultSource, this._currentResponse.selectedResultSource = this._selectedResultSource;
                var d = new a.InterpretResultChangedEventArgs(this._currentResponse, this._currentResponse.requestId);
                this.raiseInterpretResultChangedEvent(d);
            }
        }, e.prototype.registerTransientLinguisticSchemaProvider = function(b, c) {
            a.Utility.throwIfNullOrUndefined(b, this, "registerTransientLinguisticSchemaProvider", "databaseName"), 
            a.Utility.throwIfNullOrUndefined(c, this, "registerTransientLinguisticSchemaProvider", "provider"), 
            this._interpretRequestTransientLinguisticSchemaMap[b] = c;
        }, Object.defineProperty(e.prototype, "isInitialInterpretPending", {
            get: function() {
                return !a.StringExtensions.isNullOrEmpty(this._initialUtterance);
            },
            enumerable: !0,
            configurable: !0
        }), e.prototype.interpretAsync = function(b, c, d, f, g, h) {
            var i = this.createInterpretResponseHandler(d, f), j = null;
            return c && (j = 24 === c.activityType ? c : c.createChildActivity(24)), !this.configurationProvider.getIsReady() && !i || this.probeRequestInProgress ? (a.Tracing.verbose("Setting Interpretation Bridge Initial Utterance: " + b), 
            this._initialUtterance = b, this._initialInterpretOptions = g, e.endInterpretActivityIfPresent(this._initialUtteranceActivity, 0, a.ActivityErrors.UserAborted), 
            this._initialUtteranceActivity = j, j) : (this.interpretAsyncInternal(b, j, i, g, h), 
            j);
        }, e.prototype.abortAllInterpretRequests = function(a) {
            for (var b = 0; b < this._interpretRequestQueue.length; b++) {
                var c = this._interpretRequestQueue[b];
                e.abortInterpretRequest(c);
            }
            a === !0 && this._currentResponse && (this._currentResponse = null);
        }, e.prototype.abortAllInterpretRequestsUntilSession = function(a) {
            for (var b = 0; b < this._interpretRequestQueue.length; b++) {
                var c = this._interpretRequestQueue[b];
                if (c.requestId === a) break;
                e.abortInterpretRequest(c);
            }
        }, e.prototype.createInterpretResponseHandler = function(a, b) {
            var c = null;
            return "function" == typeof a && "function" == typeof b && (c = {
                success: a,
                error: b
            }), c;
        }, e.prototype.interpretProbeAsyncInternal = function() {
            var b = this, c = a.InfoNavServiceConfigurationUtils.getSecurityToken(this.configurationProvider);
            a.AjaxUtility.callServiceWithCallbacks(this.configurationProvider.getClusterUri(), e.Name, e.InterpretProbeOperationName, function(c, d, e) {
                a.JavaScriptSerializer.deserialize(e.responseText);
                b.onProbeRequestSuccess(), a.Tracing.verbose("Ignoring successful probe request that came back from the server.", e.requestId);
            }, function(a) {
                b.onProbeRequestFailure(a);
            }, c, a.Utility.HttpGetMethod), this.raiseProbingRequestInProgress();
        }, e.prototype.interpretAsyncInternal = function(c, d, f, g, h) {
            var i = this;
            if (a.Utility.throwIfNullOrUndefined(c, this, "InterpretAsync", "utterance"), c.length <= this.MinUtteranceLength) return f || (a.Tracing.verbose("Clearing current interpret result as the current utterance is shorter than the minimum allowed length"), 
            this.raiseClearInterpretResultEvent(new a.ClearInterpretResultEventArgs(!1, !1))), 
            void e.endInterpretActivityIfPresent(d, 0, a.ActivityErrors.UtteranceTooShort);
            var j = this.getCachedResponse(c, g);
            if (j) {
                var k = new a.InterpretResponse(j.requestId, c, j.results);
                this.abortAllInterpretRequests(), e.endInterpretActivityIfPresent(d, 1);
                var l = new a.InterpretSuccessEventArgs(k, a.ClientActivity.getParentActivityIfAny(d), this._currentOrderId++);
                return f ? f.success(l) : (this.raiseInterpretIssuedEvent(new a.InterpretIssuedEventArgs(k.requestId, a.ClientActivity.getParentActivityIfAny(d))), 
                this.raiseInterpretSuccessEvent(l)), void a.Tracing.verbose("Result for request returned from cache.", j.requestId);
            }
            var m = this.constructInterpretRequest(c, g, h), n = {
                request: m
            }, o = {};
            o.type = a.Utility.HttpPostMethod, o.contentType = o.accepts = a.Utility.JsonContentType, 
            o.dataType = a.Utility.JsonDataType, o.url = this.interpretRequestUrl, o.timeout = this.InterpretOperationTimeout, 
            o.data = a.JavaScriptSerializer.serialize(n);
            var p = new b();
            p.request = m, p.activityId = a.AppManager.current.activityId, p.responseHandler = f, 
            p.interpretActivity = d, o.beforeSend = function(b) {
                var c = a.HttpUtility.setCommonRequestHeaders(b), e = a.InfoNavServiceConfigurationUtils.getSecurityToken(i.configurationProvider);
                b.setRequestHeader(e.tokenHeader, e.tokenValue), p.requestId = c, p.executor = b, 
                b.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), f || i.raiseInterpretIssuedEvent(new a.InterpretIssuedEventArgs(p.requestId, a.ClientActivity.getParentActivityIfAny(d))), 
                d && d.addCorrelatedProperty(new a.CorrelatedProperty("interpretRequestId", c)), 
                a.Tracing.verbose("Issued new Interpret request to server.", c);
            }, o.success = function(b, c, e) {
                var f = i.deserializeResponse(e.responseText);
                p.aborted ? p.aborted && a.Tracing.verbose("Ignoring aborted request that came back from the server.", p.requestId) : i.onInterpretSuccess(f, p, d);
            }, o.error = function(b, c) {
                var f = a.HttpUtility.getErrorInfo(p.executor);
                c === i.JQueryTimedOutStatus || f === e.TimeoutExceptionErrorValue ? p.timedOut = !0 : c === i.JQueryAbortedStatus && (p.aborted = !0), 
                i.onInterpretError(p, d);
            }, this.compressInterpretRequestQueue(), this._interpretRequestQueue.push(p), $.ajax(o);
        }, e.prototype.deserializeResponse = function(b) {
            return this._version > 0 ? JSON.parse(b) : a.JavaScriptSerializer.deserialize(b);
        }, e.prototype.getCachedResponse = function(b, c) {
            var d = this._resultCache[b];
            if (d) return a.EnumExtensions.hasFlag(c, 1) && (d.containsWarning(16) || d.containsWarning(32)) ? null : d.options !== c ? null : d;
        }, e.buildTransientLinguisticSchemaMap = function(a) {
            for (var b, c = Object.getOwnPropertyNames(a), d = 0; d < c.length; ++d) {
                b = b || [];
                var e = c[d];
                b.push({
                    Key: e,
                    Value: a[e].getTransientLinguisticSchema()
                });
            }
            return b;
        }, e.prototype._isLastRequest = function(a) {
            return this._interpretRequestQueue.length > 0 && this._interpretRequestQueue[this._interpretRequestQueue.length - 1].requestId === a.requestId;
        }, e.prototype.compressInterpretRequestQueue = function() {
            for (var a = 0; a < this._interpretRequestQueue.length; a++) e.isInProgressRequest(this._interpretRequestQueue[a]) || this._interpretRequestQueue.splice(a--, 1);
            for (var b = 0, a = this._interpretRequestQueue.length; a > 0; a--) {
                var c = this._interpretRequestQueue[a - 1];
                e.isInProgressRequest(c) && ++b > this.MaxInterpretRequests && e.abortInterpretRequest(c);
            }
        }, e.prototype.onInterpretSuccess = function(b, d, f) {
            if (this._currentTimeoutRetryCount = 0, this._refreshAppMetadataAttempted = !1, 
            b) {
                var g = b.some(function(b) {
                    return a.EnumExtensions.hasFlag(b.Warnings, 4);
                });
                if (this._currentSchemaLoadingRetryCount < this.MaxSchemaLoadingRetryRequests && g) if (this._isLastRequest(d)) {
                    this._currentSchemaLoadingRetryCount++;
                    var h = d.responseHandler ? d.responseHandler.success : null, i = d.responseHandler ? d.responseHandler.error : null;
                    this.interpretAsync(d.request.Utterance, f, h, i);
                } else f && !f.completed && e.endInterpretActivityIfPresent(f, 0, a.ActivityErrors.LinguisticSchemaStillLoading); else {
                    e.endInterpretActivityIfPresent(f, 1), g || (this._currentSchemaLoadingRetryCount = 0);
                    var j = new a.InterpretResponse(d.requestId, d.request.Utterance, b), k = new a.InterpretSuccessEventArgs(j, a.ClientActivity.getParentActivityIfAny(f), this._currentOrderId++);
                    if (d.responseHandler ? d.responseHandler.success(k) : this.raiseInterpretSuccessEvent(k), 
                    a.Tracing.verbose(a.StringExtensions.format("Interpret request completed successfully:\n{0}", JSON.stringify(b)), d.requestId), 
                    !j.isEmpty(!0) && !j.hasErrors() && !j.containsPhrasingTemplates()) {
                        var l = new c();
                        l.options = d.request.Options, l.requestId = d.requestId, l.results = b, this._resultCache[d.request.Utterance] = l;
                    }
                }
            }
            this.abortAllInterpretRequestsUntilSession(d.requestId);
        }, e.prototype.onInterpretError = function(b, c) {
            if (!b.aborted) {
                var d = a.HttpUtility.getErrorInfo(b.executor);
                if (!this._refreshAppMetadataAttempted && this._shouldReRequestAppMetadata(b)) {
                    this._refreshAppMetadataAttempted = !0, this.configurationProvider.invalidate();
                    var f = b.responseHandler, g = f ? f.success : null, h = f ? f.error : null;
                    this.interpretAsync(b.request.Utterance, c, g, h);
                } else {
                    var i = this.tryGetCompatibleResultsFromCache(b.request.Utterance);
                    if (b.responseHandler || a.HttpUtility.isForbiddenOrUnauthorized(b.executor.status) || !i) {
                        a.ClientActivity.addErrorInfoIfPresent(c, b.executor), e.endInterpretActivityIfPresent(c, 3, a.ActivityErrors.InterpretError);
                        var j = new Date(), k = new a.InterpretErrorEventArgs(b.activityId, b.requestId, b.timedOut, b.executor.status, d, j, a.ClientActivity.getParentActivityIfAny(c));
                        b.responseHandler ? b.responseHandler.error(k) : this.raiseInterpretErrorEvent(k);
                    } else {
                        a.ClientActivity.addErrorInfoIfPresent(c, b.executor), e.endInterpretActivityIfPresent(c, 2, a.ActivityErrors.UsingCachedAutocompleteMatchOnInterpretError);
                        var l = new a.InterpretResponse(b.requestId, b.request.Utterance, i), m = new a.InterpretSuccessEventArgs(l, a.ClientActivity.getParentActivityIfAny(c), this._currentOrderId++);
                        this.raiseInterpretSuccessEvent(m), a.Tracing.verbose(a.StringExtensions.format("Interpret request failed but found a compatible result in the cache:\n{0}", JSON.stringify(i)), b.requestId);
                    }
                }
                a.Tracing.warning(a.StringExtensions.format("Interpret request returned an error ({0} {1})", b.executor.status.toString(), b.executor.statusText, b.requestId));
            }
            this.abortAllInterpretRequestsUntilSession(b.requestId);
        }, e.prototype.tryGetCompatibleResultsFromCache = function(b) {
            if (!this._resultCache) return null;
            var c;
            for (var d in this._resultCache) (0 === b.indexOf(d) || 0 === d.indexOf(b)) && (!c || a.StringExtensions.getLengthDifference(b, d) <= a.StringExtensions.getLengthDifference(b, c)) && (c = d);
            if (!c) return null;
            for (var e = this._resultCache[c].results, f = new Array(), g = 0, h = e.length; h > g; g++) e[g].CompletedUtterance && 0 === e[g].CompletedUtterance.Text.indexOf(b) && f.push(e[g]);
            return f.length ? f : null;
        }, e.prototype._shouldReRequestAppMetadata = function(b) {
            if (this._isLastRequest(b)) {
                if (a.HttpUtility.isForbiddenOrUnauthorized(b.executor.status)) return !0;
                var c = a.HttpUtility.getErrorInfo(b.executor);
                return c === e.InfoNavUnableToResolveScopeErrorValue;
            }
            return !1;
        }, e.endInterpretActivityIfPresent = function(a, b, c) {
            a && a.end(b, c);
        }, e.prototype.constructInterpretRequest = function(b, c, d) {
            var f = {
                Version: this._version,
                Utterance: b,
                Scope: d,
                TransientLinguisticSchemaMap: e.buildTransientLinguisticSchemaMap(this._interpretRequestTransientLinguisticSchemaMap)
            };
            if (c && (f.Options = c, this._currentResponse && a.EnumExtensions.hasFlag(f.Options, 1))) {
                var g = this._currentResponse.result;
                if (g && !g.isEmpty(!1) && !a.EnumExtensions.hasFlag(g.source.Warnings, 16)) {
                    var h = g.source.Command, i = h.VisualConfigurations;
                    f.LastQuery = {
                        Query: h.Query,
                        Binding: i && i.length > 0 ? i[0].DataShapeBinding : null
                    };
                }
            }
            return f;
        }, e.Name = "interpretation", e.InterpretationServicePath = "/infonav/" + e.Name, 
        e.InterpretOperationPath = "/interpret/", e.InterpretProbeOperationName = "interpretprobe", 
        e.TimeoutExceptionErrorValue = "InterpretGatewayTimeoutException", e.InfoNavUnableToResolveScopeErrorValue = "InfoNavUnableToResolveScopeException", 
        e;
    }(a.InfoNavClientService);
    a.InterpretService = d;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(a, c, d, e, f) {
            b.call(this, a, c), this._appCache = d, this._spSiteId = e, this._spWebId = f, this._requestQueue = [], 
            this._isProcessingRequest = !1;
        }
        return __extends(c, b), c.prototype.getFeaturedQuestions = function() {
            var b = this, c = $.Deferred(), d = {};
            d.type = a.Utility.HttpGetMethod, d.url = a.Utility.urlCombine(this.configurationProvider.getClusterUri(), "/infonav/mgmt/featuredquestions/" + this._spSiteId + "/" + this._spWebId), 
            d.contentType = a.Utility.JsonContentType;
            var e = "";
            return d.beforeSend = function(c) {
                a.HttpUtility.setCommonRequestHeaders(c), c.setRequestHeader(a.HttpUtility.HttpInfoNavSpAccessTokenHeader, b.configurationProvider.getManagementSecurityToken()), 
                c.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), e = c.requestId, 
                a.Tracing.verbose("Requesting list of current featured questions from server...", e);
            }, $.ajax(d).done(function(d) {
                c.resolve(d), a.Tracing.verbose("Successfully received list of current featured questions from server.", e);
                var f = b._appCache.getData();
                f.featuredQuestions = d, b._appCache.updateData(f);
            }).fail(function(b, d) {
                a.Tracing.error("Failed to retrieve list of current featured questions from server.", e), 
                c.reject(d);
            }), c.promise();
        }, c.prototype.addFeaturedQuestion = function(b) {
            var c = this, d = $.Deferred(), e = {
                featuredQuestion: b
            }, f = {};
            f.type = a.Utility.HttpPutMethod, f.url = a.Utility.urlCombine(this.configurationProvider.getClusterUri(), "/infonav/mgmt/featuredquestions/" + this._spSiteId + "/" + this._spWebId + "/" + b.WorkbookIdentifier.ListId + "/" + b.WorkbookIdentifier.DocumentId), 
            f.contentType = a.Utility.JsonContentType, f.data = JSON.stringify(e);
            var g = "";
            return f.beforeSend = function(d) {
                a.HttpUtility.setCommonRequestHeaders(d), d.setRequestHeader(a.HttpUtility.HttpInfoNavSpAccessTokenHeader, c.configurationProvider.getManagementSecurityToken()), 
                d.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), g = d.requestId, 
                a.Tracing.verbose("Sending request for adding featured question: " + b.Utterance, g);
            }, $.ajax(f).done(function(c) {
                d.resolve(c), a.Tracing.verbose("Successfully added featured question:" + b.Utterance, g);
            }).fail(function(c, e) {
                d.reject(e), a.Tracing.error("Unable to process featured question addition for :" + b.Utterance, g);
            }), d.promise();
        }, c.prototype.updateFeaturedQuestions = function(b) {
            var c = this, d = $.Deferred(), e = {
                featuredQuestions: b
            }, f = {};
            f.type = a.Utility.HttpPostMethod, f.url = a.Utility.urlCombine(this.configurationProvider.getClusterUri(), "/infonav/mgmt/featuredquestions/" + this._spSiteId + "/" + this._spWebId), 
            f.contentType = a.Utility.JsonContentType, f.data = JSON.stringify(e);
            var g = "";
            return f.beforeSend = function(b) {
                a.HttpUtility.setCommonRequestHeaders(b), b.setRequestHeader(a.HttpUtility.HttpInfoNavSpAccessTokenHeader, c.configurationProvider.getManagementSecurityToken()), 
                b.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), g = b.requestId, 
                a.Tracing.verbose("Sending request for updating featured questions", g);
            }, $.ajax(f).done(function(b) {
                d.resolve(b), a.Tracing.verbose("Successfully updated featured questions", g);
            }).fail(function(b, c) {
                d.reject(c), a.Tracing.error("Unable to process featured question update", g);
            }), d.promise();
        }, c.prototype.deleteFeaturedQuestion = function(b) {
            var c = this, d = $.Deferred(), e = {};
            e.type = a.Utility.HttpDeleteMethod, e.url = a.Utility.urlCombine(this.configurationProvider.getClusterUri(), "/infonav/mgmt/featuredquestions/" + this._spSiteId + "/" + this._spWebId + "/" + b.ItemId);
            var f = "";
            return e.beforeSend = function(d) {
                a.HttpUtility.setCommonRequestHeaders(d), d.setRequestHeader(a.HttpUtility.HttpInfoNavSpAccessTokenHeader, c.configurationProvider.getManagementSecurityToken()), 
                d.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), f = d.requestId, 
                a.Tracing.verbose("Sending request for removing featured question: " + b.Utterance, f);
            }, $.ajax(e).done(function() {
                d.resolve(), a.Tracing.verbose("Successfully removed featured question:" + b.Utterance, f);
            }).fail(function(c, e) {
                d.reject(e), a.Tracing.error("Unable to process featured question deletion for :" + b.Utterance, f);
            }), d.promise();
        }, c.prototype.createWorkbookIdentifier = function(b, c) {
            a.Utility.throwIfNullOrUndefined(c, this, "createWorkbookIdentifier", "dataSourceProperties"), 
            a.Utility.throwIfNullOrUndefined(c.sharePointDocument, this, "createWorkbookIdentifier", "dataSourceProperties.sharePointDocument");
            var d = {
                SiteId: this._spSiteId,
                WebId: this._spWebId,
                ListId: c.sharePointDocument.ListId,
                DocumentId: c.sharePointDocument.DocumentId
            };
            return d;
        }, c;
    }(a.InfoNavClientService);
    a.FeaturedQuestionsService = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(a) {
            this._config = a, this._firstUsage = !0;
        }
        return b.prototype.update = function(c) {
            var d = {
                UtteranceData: c
            };
            return this._firstUsage && (d.FirstUsage = !0, this._firstUsage = !1), a.AjaxUtility.callService(this._config.getClusterUri(), b.Name, "update", a.InfoNavServiceConfigurationUtils.getToken(this._config, 1), a.Utility.HttpPostMethod, {
                request: d
            }, 1);
        }, b.prototype.query = function(c, d) {
            var e = {
                VirtualServerName: c.virtualServer,
                DatabaseName: c.database,
                Command: d
            };
            return a.AjaxUtility.callService(this._config.getClusterUri(), b.Name, "query", a.InfoNavServiceConfigurationUtils.getToken(this._config, 1), a.Utility.HttpPostMethod, {
                request: e
            });
        }, b.Name = "usage", b;
    }();
    a.UsageService = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b, c, d) {
            a.Utility.throwIfNullOrUndefined(b, this, "ctor", "name"), a.Utility.throwIfNullOrUndefined(c, this, "ctor", "callback"), 
            this._name = b, this._signature = this.createSignature(b, d), this._callback = this.protectOperation(c, d);
        }
        return b.prototype.createSignature = function(a, b) {
            var c = a + "(";
            if (b) for (var d = 0, e = b.length; e > d; d++) c += b[d].typeName, d < b.length - 1 && (c += ", ");
            return c += ")";
        }, Object.defineProperty(b.prototype, "name", {
            get: function() {
                return this._name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "callback", {
            get: function() {
                return this._callback;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.protectOperation = function(b, c) {
            var d = this;
            return function() {
                if (c) if (arguments.length !== c.length) a.Utility.throwException(a.Errors.invalidOperation('Supplied parameters do not match any overload for "' + d._signature + '"')); else for (var e = 0, f = c.length; f > e; e++) c[e].verifyType(arguments[e]) || a.Utility.throwException(a.Errors.invalidOperation("Argument " + e + ' type does not match target signature "' + d._signature + '"')); else arguments && arguments.length && a.Utility.throwException(a.Errors.invalidOperation('Supplied parameters do not match any overload for "' + d._signature + '"'));
                return b.apply(d, arguments);
            };
        }, b;
    }();
    a.ControllerOperationDefinition = b;
    var c = function() {
        function b() {
            this.virtualConstructor();
        }
        return b.prototype.virtualConstructor = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("OptionDefinition", "constructor"));
        }, Object.defineProperty(b.prototype, "typeName", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("OptionDefinition", "typeName")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.verifyType = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("OptionDefinition", "decorateSetter")), 
            null;
        }, b;
    }();
    a.OperationOptionDefinition = c;
    var d = function(b) {
        function c() {
            b.apply(this, arguments);
        }
        return __extends(c, b), c.prototype.virtualConstructor = function() {}, Object.defineProperty(c.prototype, "typeName", {
            get: function() {
                return "boolean";
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.verifyType = function(b) {
            return a.Utility.isBoolean(b);
        }, c;
    }(c);
    a.BooleanOperationOptionDefinition = d;
    var e = function(b) {
        function c() {
            b.apply(this, arguments);
        }
        return __extends(c, b), c.prototype.virtualConstructor = function() {}, Object.defineProperty(c.prototype, "typeName", {
            get: function() {
                return "string";
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.verifyType = function(b) {
            return a.Utility.isString(b);
        }, c;
    }(c);
    a.StringOperationOptionDefinition = e;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b, c, d, e, f) {
            this.virtualConstructor(), a.Utility.throwIfNullOrEmptyString(b, this, "ctor", "name"), 
            a.Utility.throwIfNullOrUndefined(c, this, "ctor", "getter"), a.Utility.throwIfNullOrUndefined(d, this, "ctor", "setter"), 
            this._name = b, this._getter = c, this._setter = this.protectSetter(d), this._allowsNull = e ? e : !1, 
            this._defaultValue = f;
        }
        return Object.defineProperty(b.prototype, "name", {
            get: function() {
                return this._name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "getter", {
            get: function() {
                return this._getter;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "setter", {
            get: function() {
                return this._setter;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "allowsNull", {
            get: function() {
                return this._allowsNull;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "defaultValue", {
            get: function() {
                return this._defaultValue;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.virtualConstructor = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("OptionDefinition", "constructor"));
        }, b.prototype.protectSetter = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("OptionDefinition", "decorateSetter")), 
            null;
        }, b;
    }();
    a.ControllerOptionDefinition = b;
    var c = function(b) {
        function c(a, c, d, e, f) {
            b.call(this, a, c, d, e, f);
        }
        return __extends(c, b), c.prototype.virtualConstructor = function() {}, c.prototype.protectSetter = function(b) {
            var c = this;
            return function(d) {
                a.Utility.throwIfNotTrue(a.Utility.isBoolean(d) || c.allowsNull && null === d, c, "setter", "value"), 
                b(d);
            };
        }, c;
    }(b);
    a.BooleanControllerOptionDefinition = c;
    var d = function(b) {
        function c(a, c, d, e, f) {
            b.call(this, a, c, d, e, f);
        }
        return __extends(c, b), c.prototype.virtualConstructor = function() {}, c.prototype.protectSetter = function(b) {
            var c = this;
            return function(d) {
                a.Utility.throwIfNotTrue(a.Utility.isString(d) || c.allowsNull && null === d, c, "setter", "value"), 
                b(d);
            };
        }, c;
    }(b);
    a.StringControllerOptionDefinition = d;
    var e = function(b) {
        function c(a, c, d, e, f) {
            b.call(this, a, c, d, e, f);
        }
        return __extends(c, b), c.prototype.virtualConstructor = function() {}, c.prototype.protectSetter = function(b) {
            var c = this;
            return function(d) {
                a.Utility.throwIfNotTrue("object" == typeof d, c, "setter", "value"), a.Utility.throwIfNotTrue(d instanceof a.ConnectionGroup || c.allowsNull && null === d, c, "setter", "value"), 
                b(d);
            };
        }, c;
    }(b);
    a.ConnectionGroupControllerOptionDefinition = e;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {}
        return b.defineJQueryWidget = function(c, d) {
            a.Utility.throwIfNullOrEmptyString(c, this, "createController", "widgetName"), a.Utility.throwIfNullOrUndefined(d, this, "createController", "constructor"), 
            $.fn[c] && a.Utility.throwException(a.Errors.invalidOperation('Cannot register widget "' + name + '" because this identifier already exists on JQuery prototype')), 
            $.fn[c] = function() {
                for (var e = [], f = 0; f < arguments.length; f++) e[f - 0] = arguments[f];
                return this.length && 0 !== e.length ? 1 === e.length && "object" == typeof e[0] ? (b.createController(this, c, d, e[0]), 
                this) : 2 === e.length && "option" === e[0] && a.Utility.isString(e[1]) ? b.getWidgetControllerOption(this[0], c, e[1]) : 3 === e.length && "option" === e[0] && a.Utility.isString(e[1]) ? (b.setWidgetControllerOption(this[0], c, e[1], e[2]), 
                this) : e.length > 0 && a.Utility.isString(e[0]) ? b.invokeMethod(this[0], c, e[0], e.slice(1)) : void a.Utility.throwException(a.Errors.invalidOperation("Invalid parameter set provided")) : this;
            };
        }, b.createController = function(b, c, d, e) {
            a.Utility.throwIfNullOrUndefined(b, this, "createController", "hostElement"), a.Utility.throwIfNullOrUndefined(e, this, "createController", "options");
            var f = b[0][c];
            f && a.Utility.throwException(f instanceof a.InfoNavController ? a.Errors.invalidOperation('Widget "' + c + '" already exists on the target "' + b + '" element') : a.Errors.invalidOperation('Member "' + c + '" already exists on the target "' + b + '" element')), 
            b[0][c] = d(b, e);
        }, b.getWidgetControllerOption = function(c, d, e) {
            var f = b.getWidgetController(c, d);
            return f.options && null !== f.options[e] && void 0 !== f.options[e] || a.Utility.throwException(a.Errors.invalidOperation('The widget "' + d + '" does not have option "' + e + '"')), 
            f.options[e];
        }, b.setWidgetControllerOption = function(c, d, e, f) {
            var g = b.getWidgetController(c, d);
            g.options && null !== g.options[e] && void 0 !== g.options[e] || a.Utility.throwException(a.Errors.invalidOperation('The widget "' + d + '" does not have option "' + e + '"')), 
            g.options[e] = f;
        }, b.invokeMethod = function(c, d, e, f) {
            var g = b.getWidgetController(c, d);
            return g[e] || a.Utility.throwException(a.Errors.invalidOperation('The widget "' + d + '" does not have operation "' + e + '"')), 
            g[e].apply(this, f);
        }, b.getWidgetController = function(b, c) {
            a.Utility.throwIfNullOrUndefined(b, this, "getController", "target");
            var d = b[c];
            return d && d instanceof a.InfoNavController || a.Utility.throwException(a.Errors.invalidOperation('Widget "' + c + '" does not exist on the target "' + b + '" element')), 
            d;
        }, b;
    }();
    a.WidgetFactory = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(d, e) {
            var f = this;
            b.call(this), a.Utility.throwIfNullOrUndefined(d, this, "ConnectionGroup", "options"), 
            a.Utility.throwIfNullOrUndefined(d.name, this, "ConnectionGroup", "options.name"), 
            a.Utility.throwIfNotTrue(a.Utility.isString(d.name), this, "ConnectionGroup", "Utility.isString(options.name)"), 
            this._isReady = !1, this._name = d.name, this._bridge = d.bridge || new a.InfoNavEventBridge(), 
            this._modalDialogService = d.modalDialog || new a.ModalDialog(), this._modalDialogService.registerOnConnectionGroup(this), 
            this._notificationService = d.notificationControl || new a.Notifications.NotificationControl(), 
            this._notificationService.registerOnConnectionGroup(this), this._interpretService = d.interpretService || new a.InterpretService(this._bridge, this, d.version), 
            this._usageService = d.usageService || new a.UsageServiceContainer(this._bridge, this), 
            this._telemetryService = d.telemetryServiceFactory ? d.telemetryServiceFactory.createTelemetryService(this._bridge, this) : new a.TelemetryService(this._bridge, this), 
            this.shouldUpdateBrowserLocation() && (this._browserHandlerService = d.browserHandlerService || new a.BrowserHandler(this._bridge, this, this._interpretService, this.initialUtterance)), 
            this._defineOperation(new a.ControllerOperationDefinition(c.InterpretOperationName, function(a) {
                f.bridge.changeUserUtterance(a);
            }, [ new a.StringOperationOptionDefinition() ])), e && (this._pageLoadActivity = this.startPageLoadActivity(e));
            var g = this.bridge;
            g.attach(a.Events.ChangeUserUtteranceEventName, function() {
                return f.onQuestionBoxTextChanged();
            }), g.attach(c.TextChangedEventName, function() {
                return f.onQuestionBoxTextChanged();
            }), g.attach(a.Events.InterpretIssuedEventName, function(a, b) {
                f.onInterpretIssued(a, b);
            }), g.attach(a.Events.InterpretSuccessEventName, function(a, b) {
                f.onInterpretSuccess(a, b);
            }), g.attach(a.Events.InterpretErrorEventName, function(a, b) {
                f.onInterpretError(a, b);
            }), g.attach(a.Events.InterpretRetryCountExceededEventName, function(a, b) {
                f.onInterpretRetryCountExceeded(a, b);
            }), g.attach(a.Events.ConnectionGroupInvalidatedEventName, function(a, b) {
                f.onInvalidated(a, b);
            });
        }
        return __extends(c, b), Object.defineProperty(c.prototype, "name", {
            get: function() {
                return this._name;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getIsReady = function() {
            return this._isReady;
        }, c.prototype.getClusterUri = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "clusterUri")), 
            null;
        }, c.prototype.getSecurityToken = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "securityToken")), 
            null;
        }, c.prototype.getManagementSecurityToken = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "managementSecurityToken")), 
            null;
        }, c.prototype.getSpoContextToken = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "spoContextToken")), 
            null;
        }, c.prototype.getIsUsageReportingEnabled = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "isUsageReportingEnabled")), 
            null;
        }, c.prototype.getSecurityTokenKind = function() {
            return 1;
        }, c.prototype.invalidate = function(a) {
            var b = this;
            this._isReady = !1, this.bridge.notifyConnectionGroupInvalidated();
            var c = this._refreshMetadataInternal(a);
            return c && a && a === this._pageLoadActivity && c.onCompleted(function(a) {
                (1 !== a.activityEndResult || !b._visualizationOnPageLoadActivity || b._visualizationOnPageLoadActivity.completed) && b._pageLoadActivity.end(a.activityEndResult, a.error);
            }), c;
        }, Object.defineProperty(c.prototype, "bridge", {
            get: function() {
                return this._bridge;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "interpretService", {
            get: function() {
                return this._interpretService;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "modalDialogService", {
            get: function() {
                return this._modalDialogService;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "notificationService", {
            get: function() {
                return this._notificationService;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "telemetryService", {
            get: function() {
                return this._telemetryService;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "usageService", {
            get: function() {
                return this._usageService;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "browserHandlerService", {
            get: function() {
                return this._browserHandlerService;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "featuredQuestionsService", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype._refreshMetadataInternal = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "_refreshMetadataInternal")), 
            null;
        }, Object.defineProperty(c.prototype, "appCache", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "appCache")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "generalHelpPageUrl", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "generalHelpPageUrl")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "globalServiceClusterUri", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "globalServiceClusterUri")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "helpContentBaseUrl", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "helpContentBaseUrl")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isRuntimeModelingEnabled", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "isRuntimeModelingEnabled")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isSamplesOnlyModeEnabled", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "isSamplesOnlyModeEnabled")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isUserAdmin", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "isUserAdmin")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "resourcesUrl", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "resourcesUrl")), 
                null;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.shouldUpdateBrowserLocation = function() {
            return "function" == typeof history.pushState && "function" == typeof history.replaceState;
        }, Object.defineProperty(c.prototype, "userPermissions", {
            get: function() {
                return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "WebPermissions")), 
                0;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.commitModelChanges = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "commitModelChanges")), 
            null;
        }, c.prototype.generateSampleUtterance = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "generateSampleUtterance"));
        }, c.prototype.getCommitModelStatus = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "getCommitModelStatus"));
        }, c.prototype.getWorkbookPublishStatus = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "getWorkbookPublishStatus"));
        }, c.prototype.getUpdatedPublishedWorkbookETag = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "getUpdatedPublishedWorkbookETag"));
        }, c.prototype.getDataSourceProperties = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "getDataSourceProperties")), 
            null;
        }, c.prototype.getListOfDatabaseNames = function() {
            return a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "getListOfModelNames")), 
            null;
        }, c.prototype.getModelingMetadata = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("ConnectionGroup", "getModelingMetadata"));
        }, Object.defineProperty(c.prototype, "absoluteReportServerUrl", {
            get: function() {
                return a.Utility.urlCombine(this.getClusterUri(), c.ReportServerPath);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "autoAdjustResultsControlVerticalOffset", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "featuredQuestions", {
            get: function() {
                return new Array();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "initialClusterUri", {
            get: function() {
                return a.AppManager.current.initialClusterUri;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "initialUtterance", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "visualizationOnPageLoadActivity", {
            get: function() {
                return this._visualizationOnPageLoadActivity;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isGeocodingEnabled", {
            get: function() {
                return this.getIsReady() || a.Utility.throwException(a.Errors.invalidOperation("isGeocodingEnabled should be invoked after the connection group is ready")), 
                !1;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getFeaturedQuestions = function() {
            var a = [];
            return a;
        }, c.prototype._raiseReadyEventInternal = function() {
            this._isReady = !0, this.bridge.notifyConnectionGroupReady();
        }, c.prototype.startPageLoadActivity = function(b) {
            var c = this.createOriginActivityStack(), d = this.telemetryService.createNewActivity(b, c, !0);
            return d.activityStartTime = a.AppManager.current.pageLoadStartTime, this.initialUtterance && (this._visualizationOnPageLoadActivity = d), 
            d;
        }, c.prototype.createOriginActivityStack = function() {
            var b = a.QueryStringUtil.getQueryStringValue(a.QueryStringUtil.OriginRootActivityIdParameterName), c = a.QueryStringUtil.getQueryStringValue(a.QueryStringUtil.OriginActivityIdParameterName);
            if (b || b) {
                var d = this.telemetryService.createNewActivity(17, null, !1);
                if (d.activityId = b ? b : c, d.activityId === c) return d;
                var e = this.telemetryService.createNewActivity(17, d, !1);
                return e.activityId = c, e;
            }
        }, c.prototype.clearInterpretResult = function() {
            this.bridge.clearInterpretResult(!0, !0);
        }, c.prototype.interpretUtterance = function(a) {
            this.bridge.changeUserUtterance(a);
        }, c.prototype.raise = function(a, b) {
            $(this).trigger(a, b);
        }, c.prototype.raisePinToDashboard = function(a) {
            this.raise(c.PinToDashboardEventName, a);
        }, c.prototype.onQuestionBoxTextChanged = function() {
            this.raise(c.UtteranceChangedEventName);
        }, c.prototype.onInterpretIssued = function(b, c) {
            this.raise(a.Events.InterpretIssuedEventName, c);
        }, c.prototype.onInterpretSuccess = function(b, c) {
            this.raise(a.Events.InterpretSuccessEventName, c);
        }, c.prototype.onInterpretError = function(b, c) {
            this.raise(a.Events.InterpretErrorEventName, c);
        }, c.prototype.onInterpretRetryCountExceeded = function(b, c) {
            this.raise(a.Events.InterpretRetryCountExceededEventName, c);
        }, c.prototype.onInvalidated = function(b, c) {
            this.raise(a.Events.ConnectionGroupInvalidatedEventName, c);
        }, c.UtteranceChangedEventName = "UtteranceChangedEvent", c.TextChangedEventName = "TextChangedEvent", 
        c.PinToDashboardEventName = "PinToDashboardEvent", c.ReportServerPath = "/ReportServer", 
        c.InterpretOperationName = "interpret", c;
    }(a.InfoNavController);
    a.ConnectionGroup = b, function(a) {
        a[a.None = 0] = "None", a[a.Admin = 1] = "Admin", a[a.UserEditor = 2] = "UserEditor";
    }(a.InfoNavAppPermissions || (a.InfoNavAppPermissions = {}));
    a.InfoNavAppPermissions;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a() {}
        return Object.defineProperty(a.prototype, "parts", {
            get: function() {
                return this._parts;
            },
            set: function(a) {
                this._parts = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "text", {
            get: function() {
                var a = "";
                return this._parts.forEach(function(b) {
                    a += b.text;
                }), a;
            },
            enumerable: !0,
            configurable: !0
        }), a;
    }();
    a.UISuggestionItem = b;
    var c = function() {
        function a(a, b) {
            this._source = a, this._utterance = b;
        }
        return Object.defineProperty(a.prototype, "alternateCompletions", {
            get: function() {
                return this._source.AlternateCompletions;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "suggestionItems", {
            get: function() {
                return this._source.SuggestionItems;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "suggestedPhrasingTemplates", {
            get: function() {
                return this._source.SuggestedPhrasingTemplates;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "completedUtterance", {
            get: function() {
                return this._source.CompletedUtterance;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "warnings", {
            get: function() {
                return this._source.Warnings;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "error", {
            get: function() {
                return this._source.Error;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "databaseName", {
            get: function() {
                return this._source.DatabaseName;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "virtualServerName", {
            get: function() {
                return this._source.VirtualServerName;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "restatement", {
            get: function() {
                return this._source.Restatement;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "utterance", {
            get: function() {
                return this._utterance;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "unrecognizedTerms", {
            get: function() {
                return this._source.UnrecognizedTerms ? this._source.UnrecognizedTerms.map(function(a) {
                    return a.TermIndex;
                }) : null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "source", {
            get: function() {
                return this._source;
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.isEmpty = function(a) {
            return !(this._source.Command || a && (this.restatement || this.completedUtterance || this.alternateCompletions && this.alternateCompletions.length || this.suggestionItems && this.suggestionItems.length));
        }, a.prototype.hasCompletionSuggestions = function() {
            return !!this._source && !!this.alternateCompletions && this.alternateCompletions.length > 0;
        }, a.prototype.hasTermSuggestions = function() {
            return !!this._source && !!this.suggestionItems && this.suggestionItems.length > 0;
        }, a.prototype.getPhrasingTemplateIndexForTerm = function(a) {
            if (this._source && this.suggestedPhrasingTemplates && this.suggestedPhrasingTemplates.length > 0) for (var b = this.suggestedPhrasingTemplates, c = 0; c < b.length; c++) if (b[c].TermIndices.indexOf(a) >= 0) return c;
            return -1;
        }, a.prototype.getCompletedUtteranceAsTerms = function() {
            var b = new Array(), c = this.completedUtterance;
            if (c) for (var d = c.Terms, e = 0, f = d.length; f > e; e++) b.push(a.getTermText(c, e));
            return b;
        }, a.getTermText = function(a, b) {
            var c = a.Text, d = a.Terms, e = d[b].StartCharIndex, f = b === d.length - 1, g = f ? c.length : d[b + 1].StartCharIndex;
            return c.substring(e, g);
        }, a.prototype.getTermSuggestionsForSelection = function(a) {
            for (var b = [], c = 0; c < this.suggestionItems.length; c++) {
                var d = this.suggestionItems[c];
                d.TermStartIndex <= a.end && a.start <= d.TermEndIndex && b.push(d);
            }
            return b;
        }, a.prototype.hasSuggestionsForTermSelection = function(a) {
            if (this._source && this.suggestionItems) for (var b = this.suggestionItems, c = 0; c < b.length; c++) if (b[c].TermStartIndex <= a.end && a.start <= b[c].TermEndIndex) return !0;
            return !1;
        }, a.prototype.getCompletionSuggestions = function() {
            var a = new Array();
            if (this._source && this.completedUtterance && this.hasCompletionSuggestions()) for (var c = this.getCompletedUtteranceAsTerms(), d = 0; d < this.alternateCompletions.length; d++) {
                var e = this.alternateCompletions[d], f = new b();
                f.parts = new Array();
                for (var g = 0; g < e.Items.length; g++) {
                    var h = e.Items[g];
                    if (h.TermIndices) for (var i = 0; i < h.TermIndices.length; i++) {
                        var j = {};
                        if (j.text = h.Text ? h.Text : c[h.TermIndices[i]], j.emphasize = h.Text ? !0 : !1, 
                        f.parts.push(j), h.Text && 0 === i) break;
                    } else {
                        var k = {};
                        k.text = h.Text, k.emphasize = !0, f.parts.push(k);
                    }
                }
                a.push(f);
            }
            return a;
        }, a.prototype.getTermSuggestions = function(a) {
            var c = new Array();
            if (a && this.completedUtterance && this.hasTermSuggestions()) for (var d = this.getCompletedUtteranceAsTerms(), e = this.getTermSuggestionsForSelection(a), f = 0; f < e.length; f++) {
                var g = e[f];
                if (g.TermStartIndex <= a.end && a.start <= g.TermEndIndex) {
                    var h = new b();
                    h.parts = d.map(function(a) {
                        var b = {};
                        return b.text = a, b.emphasize = !1, b;
                    });
                    var i = g.TermEndIndex - g.TermStartIndex + 1;
                    h.parts.splice(g.TermStartIndex, i, {
                        text: g.SuggestedReplacement,
                        emphasize: !0
                    }), c.push(h);
                }
            }
            return c;
        }, a;
    }();
    a.InterpretResult = c;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b, c, d) {
            this._requestId = b, this._utterance = c, this._results = d.map(function(b) {
                return new a.InterpretResult(b, c);
            });
        }
        return Object.defineProperty(b.prototype, "utterance", {
            get: function() {
                return this._utterance;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "requestId", {
            get: function() {
                return this._requestId;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "defaultResultIndex", {
            get: function() {
                return this.getResultIndexForSource(this.defaultResultSource);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "selectedResultIndex", {
            get: function() {
                return this.getResultIndexForSource(this.selectedResultSource);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "resultIndex", {
            get: function() {
                return this.selectedResultIndex >= 0 ? this.selectedResultIndex : this.defaultResultIndex >= 0 ? this.defaultResultIndex : 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "result", {
            get: function() {
                return a.ArrayExtensions.isUndefinedOrEmpty(this._results) ? null : this._results[this.resultIndex];
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "results", {
            get: function() {
                return this._results;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.containsPhrasingTemplates = function() {
            for (var a = 0; a < this._results.length; a++) if (this._results[a].suggestedPhrasingTemplates && this._results[a].suggestedPhrasingTemplates.length > 0) return !0;
            return !1;
        }, b.prototype.isEmpty = function(a) {
            return this._results.length < 1 || this._results[0].isEmpty(a);
        }, b.prototype.hasErrors = function() {
            for (var b = 0; b < this._results.length; b++) if (!a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(this._results[b].error)) return !0;
            return !1;
        }, b.prototype.isUtteranceLinguisticallyEquivalent = function(a) {
            return a && (a._utterance || "").trim() === (this._utterance || "").trim();
        }, b.prototype.getResultIndexForSource = function(b) {
            if (!a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(b)) for (var c = 0; c < this._results.length; c++) if (this._results[c].databaseName === b) return c;
            return -1;
        }, b;
    }();
    a.InterpretResponse = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c) {
            b.call(this), c || (c = a.DomFactory.div()), this._element = c;
        }
        return __extends(c, b), c.prototype.show = function() {
            return this.isVisible ? !1 : (this._element.show(), !0);
        }, c.prototype.hide = function() {
            return this.isVisible ? (this._element.hide(), !0) : !1;
        }, Object.defineProperty(c.prototype, "isVisible", {
            get: function() {
                return this._element.is(a.JQueryConstants.VisibleSelector);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "element", {
            get: function() {
                return this._element;
            },
            enumerable: !0,
            configurable: !0
        }), c;
    }(a.InfoNavController);
    a.Control = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d) {
            a.Utility.throwIfNotTrue(null == d || null == d.group || null != d.group.bridge, this, "ctor", "If there is a connection group there has to be bridge too"), 
            b.call(this, d && d.group ? d.group.bridge : null), c || (c = a.DomFactory.div()), 
            this._element = c, d && (this._connectionGroup = d.group);
        }
        return __extends(c, b), Object.defineProperty(c.prototype, "connectionGroup", {
            get: function() {
                return this._connectionGroup;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.registerOnConnectionGroup = function(b) {
            b || a.Utility.throwException(a.Errors.invalidOperation("No connection group provided to register")), 
            this._connectionGroup && a.Utility.throwException(a.Errors.invalidOperation("ConnectionGroup is already registered")), 
            this.registerBridge(b.bridge), this._connectionGroup = b;
        }, c.prototype.unregisterFromConnectionGroup = function() {
            this.unregisterBridge(), this._connectionGroup = null;
        }, Object.defineProperty(c.prototype, "element", {
            get: function() {
                return this._element;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isVisible", {
            get: function() {
                return this._element.is(":visible");
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.show = function() {
            return this.isVisible ? !1 : (this._element.show(), a.InfoNavApp.current.refreshLayout(), 
            !0);
        }, c.prototype.hide = function() {
            return this.isVisible ? (this._element.hide(), a.InfoNavApp.current.refreshLayout(), 
            !0) : !1;
        }, c.ConnectionGroupOptionName = "group", c;
    }(a.EventBridgeParticipant);
    a.InfoNavClientControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d) {
            a.Utility.throwIfNullOrUndefined(d, this, "ctor", "options"), a.Utility.throwIfNullOrUndefined(d.group, this, "ctor", "options.group"), 
            b.call(this, c, d);
        }
        return __extends(c, b), c;
    }(a.InfoNavClientControl);
    a.InfoNavConnectedClientControl = b;
}(InJs || (InJs = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        function c(a) {
            return d.isUndefinedOrEmpty(a) ? void 0 : a[0].Settings;
        }
        {
            var d = jsCommon.ArrayExtensions, e = jsCommon.StringExtensions, f = InJs.DomFactory, g = a.data.DataViewTransform;
            InJs.ActivityEndedWith;
        }
        !function(a) {
            a[a.Blank = 0] = "Blank", a[a.HasNewVisual = 1] = "HasNewVisual", a[a.ErrorEmptyResult = 2] = "ErrorEmptyResult", 
            a[a.NoReaderResult = 3] = "NoReaderResult", a[a.NoCommandResult = 4] = "NoCommandResult", 
            a[a.QuerryErrorResult = 5] = "QuerryErrorResult", a[a.NoSecurityTokenSet = 6] = "NoSecurityTokenSet";
        }(b.QnaVisualizationState || (b.QnaVisualizationState = {}));
        var h = (b.QnaVisualizationState, function(b) {
            function d(a, c, e, g, h, i) {
                var j = this;
                b.call(this, a, c), this.currentVisualOrderId = -1, this.hostServices = e, this.dataProxy = g, 
                this.telemetryService = i, this.qnaVisualizationControlDelegates = h, this.isPinningEnabled = c.isPinningEnabled, 
                this.hasValidVisual = !1, $(window).on("resize", function() {
                    return j.updateVisualSize();
                }), this.visualContainer = this.element, c.isPowerBIDotCom && (this.visualContainer = f.div().prependTo(this.element), 
                this.skittlesContainer = f.ul().addClass(d.cssClasses.optionsMenu).append(f.li().append('<i class="glyphicon pbi-glyph-pin" id="pinVisualBtn" title="' + this.hostServices.getLocalizedString("TutorialPopup_PinVisualTitle") + '"></i>').click(function() {
                    return j.pinVisualClicked();
                })).appendTo(this.visualContainer), this.skittlesContainer.hide()), this.currentClearId = 0, 
                this.connectionGroup && $(this.connectionGroup).on(InJs.ConnectionGroup.UtteranceChangedEventName, function() {
                    return j.checkForEmptySecurityToken();
                });
            }
            return __extends(d, b), Object.defineProperty(d.prototype, "hasVisual", {
                get: function() {
                    return null != this.visualElement && null != this.currentVisual;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(d.prototype, "areSkittlesVisible", {
                get: function() {
                    return this.skittlesContainer && this.skittlesContainer.is(":visible");
                },
                enumerable: !0,
                configurable: !0
            }), d.prototype._onInterpretSuccess = function(a) {
                if (this.clearPendingTimeouts(), this.requiresVisualization(a)) {
                    var b = a.response.result;
                    if (this.currentVisualOrderId = a.orderId, this.wasDataRetrievalSkipped(b)) {
                        var c = this.createVisualizationActivity(a.clientActivity);
                        return this.data ? (this.data.utterance = b.utterance, this.data.configs = b.source.Command.VisualConfigurations, 
                        this.processDataViewResult(this.data, this.data.dataView, !0, c), c.end(1)) : c.end(1, InJs.ActivityErrors.EmptyInterpretResult), 
                        void this.addQnaControllerMetadataToActivity(a.clientActivity, a.response);
                    }
                    this.onInterpretSuccessInternal(a);
                } else {
                    var c = this.createVisualizationActivity(a.clientActivity);
                    c.end(1, InJs.ActivityErrors.RenderingSkippedOnClient);
                }
                this.addQnaControllerMetadataToActivity(a.clientActivity, a.response);
            }, d.prototype._onInterpretError = function(a) {
                this.updateStateAndClearVisual(5, null), this.addQnaControllerMetadataToActivity(a.clientActivity);
            }, d.prototype.addQnaControllerMetadataToActivity = function(a, b) {
                var c = this.qnaVisualizationControlDelegates.qnaControllerMetadataDelegate;
                c && c(a, b);
            }, d.prototype.requiresVisualization = function(a) {
                return a.orderId > this.currentVisualOrderId ? !0 : !1;
            }, d.prototype.onInterpretSuccessInternal = function(b) {
                var c = this, d = this.createVisualizationActivity(b.clientActivity);
                this.hasValidVisual = !1;
                var f, g, h, i = b.response, j = i.result;
                j && (f = j.source.Command, g = a.InterpretResultUtility.parseInterpret([ j ]), 
                g && g.length > 0 && (h = g[0]));
                var k = h || a.InterpretResultUtility.createSimpleUtteranceData(i.utterance);
                if (i.isEmpty(!0) || i.result.isEmpty(!0)) return d.end(1, InJs.ActivityErrors.EmptyInterpretResult), 
                void this.updateStateAndClearVisual(2, k);
                if (!f) return d.end(0, InJs.ActivityErrors.InterpretError), void this.updateStateAndClearVisual(4, k);
                if (!g) return this.updateStateAndClearVisual(3, k), void d.end(0, InJs.ActivityErrors.UnknownError);
                var l = h.dataViewSource;
                this.dataProxy.execute({
                    type: l.type,
                    query: {
                        command: l.data
                    }
                }).then(function(a) {
                    var b = a.dataProviderResult.error;
                    return b ? (c.updateStateAndClearVisual(5, k), void d.end(3, e.format(InJs.ActivityErrors.InterpretSuccessfulButContainsQueryError, b.code, "error occurred from RS."))) : (c.processDataViewResult(h, a.dataProviderResult.dataView, !1, d), 
                    void d.end(1));
                }, function() {
                    c.updateStateAndClearVisual(5, k), d.end(3, InJs.ActivityErrors.UnexpectedVisualizationActivityEnd);
                });
            }, d.prototype.isDataViewSuppported = function(b, c) {
                for (var d = c.dataViewMappings, e = 0, f = d.length; f > e; e++) if (a.DataViewAnalysis.supports(b, d[e], !1)) return !0;
                return !1;
            }, d.prototype.wasDataRetrievalSkipped = function(a) {
                return a && a.source.Command && InJs.EnumExtensions.hasFlag(a.source.Warnings, 32);
            }, d.prototype.updateDataForDataRetrievalSkipped = function(a, b) {
                b.utterance = a.utterance, a.source.Command && (b.configs = a.source.Command.VisualConfigurations);
            }, d.prototype.checkForEmptySecurityToken = function() {
                InJs.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(this.connectionGroup.getSecurityToken()) && this.updateStateAndClearVisual(6);
            }, d.prototype.processDataViewResult = function(b, e, f, h) {
                var i, j, k = this, l = b.configs;
                if (l.length > 0 && (i = l[0], j = this.getVisualPlugin(i.VisualizationType)), j) {
                    this.hasValidVisual = !0;
                    var m = this.currentVisual, n = !m || this.currentPlugin !== j;
                    if (n || !f) {
                        b.visualType = j.name, h.addCorrelatedProperty(new InJs.CorrelatedProperty(d.TelemetryVisualizationTypeProperty, b.visualType)), 
                        b.dataShapeBinding = i.DataShapeBinding, b.visualElements = i.VisualElements;
                        var o = g.apply({
                            prototype: e,
                            objectDescriptors: j.capabilities.objects,
                            dataViewMappings: j.capabilities.dataViewMappings,
                            transforms: g.createTransformActions(b.queryMetadata, i.VisualElements, j.capabilities.objects, null),
                            colorAllocatorFactory: a.visuals.createColorAllocatorFactory()
                        });
                        e = o[0], b.dataView = e, this.data = b, window.clearTimeout(this.renderingTimerId), 
                        this.renderingTimerId = window.setTimeout(function() {
                            n && (m = k.changeVisual(j, i.VisualizationType, c(i.VisualElements), b)), m.onDataChanged({
                                dataViews: o,
                                duration: d.AnimationDuration
                            }), k.qnaVisualizationControlDelegates.updateVisualizationState(1, b);
                        }, d.RenderingDelay);
                    }
                }
            }, d.prototype.pinVisualClicked = function() {
                var a = this.data;
                a && this.connectionGroup.raisePinToDashboard(a);
            }, d.prototype._onInterpretResultCleared = function() {
                this.hasValidVisual = !1, this.updateStateAndClearVisual(0);
            }, d.GetDisplayUnitSystemForVisualType = function(a) {
                switch (a) {
                  case 3:
                    return 1;

                  default:
                    return 0;
                }
            }, d.prototype.updateStateAndClearVisual = function(a, b) {
                var c = this;
                this.clearPendingTimeouts(), 0 === a ? this.updateStateAndClearVisualInternal(a, b) : this.currentClearId = window.setTimeout(function() {
                    c.hasValidVisual || c.updateStateAndClearVisualInternal(a, b);
                }, d.ErrorMessageDelay);
            }, d.prototype.clearPendingTimeouts = function() {
                0 !== this.currentClearId && (window.clearTimeout(this.currentClearId), this.currentClearId = 0);
            }, d.prototype.updateStateAndClearVisualInternal = function(a, b) {
                this.clearVisualAndDataCache();
                var c;
                this._currentInterpretResponse && this._currentInterpretResponse.results && (c = this._currentInterpretResponse.results.map(function(a) {
                    return {
                        databaseName: a.databaseName,
                        virtualServerName: a.virtualServerName
                    };
                })), this.qnaVisualizationControlDelegates.updateVisualizationState(a, b, c);
            }, d.prototype.clearVisualAndDataCache = function() {
                this.visualElement && this.visualElement.remove(), this.data = null, this.visualElement = null, 
                this.currentVisual = null, this.skittlesContainer && this.skittlesContainer.hide();
            }, d.prototype.changeVisual = function(a, b, c) {
                this.visualElement && (this.visualElement.remove(), this.visualElement = null);
                var e = this.currentVisual = a.create();
                this.currentPlugin = a, this.visualElement = $('<div class="visual"></div>'), this.visualElement.hide(), 
                this.visualContainer.prepend(this.visualElement), this.setContainerStyle(a);
                var f = d.GetDisplayUnitSystemForVisualType(b);
                return c ? c.DisplayUnitSystemType = f : c = {
                    DisplayUnitSystemType: f
                }, e.init({
                    element: this.visualElement,
                    host: this.hostServices,
                    style: this.qnaVisualizationControlDelegates.createVisualStyle ? this.qnaVisualizationControlDelegates.createVisualStyle() : d.createVisualStyle(),
                    viewport: this.visualViewPort,
                    settings: c
                }), this.skittlesContainer && this.isPinningEnabled && this.isPinningEnabled() && this.skittlesContainer.show(), 
                this.animateVisualElement("transition.slideLeftIn", function(a) {
                    return a.show();
                }), e;
            }, d.prototype.animateVisualElement = function(a, b) {
                if (this.visualElement) {
                    var c = this.visualElement;
                    c.velocity ? c.velocity(a, d.AnimationDuration, function() {
                        b(c);
                    }) : b(c);
                }
            }, d.prototype.updateVisualSize = function() {
                this.currentVisual && this.currentVisual.onResizing(this.visualViewPort, 0);
            }, Object.defineProperty(d.prototype, "visualViewPort", {
                get: function() {
                    var a = this.visualContainer;
                    return {
                        height: a.innerHeight(),
                        width: a.innerWidth() - (this.skittlesContainer ? d.SkittlesMargin : 0)
                    };
                },
                enumerable: !0,
                configurable: !0
            }), d.prototype.setContainerStyle = function(a) {
                switch (this.visualContainer.removeClass(), this.visualContainer.addClass(d.cssClasses.baseVisualContainer), 
                a.name) {
                  case "card":
                    this.visualContainer.addClass(d.cssClasses.cardContainer);
                    break;

                  case "pieChart":
                  case "donutChart":
                    this.visualContainer.addClass(d.cssClasses.pieContainer);
                    break;

                  case "treemap":
                    this.visualContainer.addClass(d.cssClasses.treeMapContainer);
                }
            }, d.prototype.getVisualPlugin = function(b) {
                var c = a.visuals.plugins;
                switch (b) {
                  case 3:
                    return c.card;

                  case 29:
                    return c.multiRowCard;

                  case 7:
                    return c.clusteredBarChart;

                  case 10:
                    return c.clusteredColumnChart;

                  case 20:
                    return c.donutChart;

                  case 16:
                    return c.funnel;

                  case 22:
                    return c.heatMap;

                  case 9:
                    return c.hundredPercentStackedBarChart;

                  case 12:
                    return c.hundredPercentStackedColumnChart;

                  case 4:
                    return c.lineChart;

                  case 1:
                    return c.map;

                  case 5:
                    return c.pieChart;

                  case 6:
                    return c.scatterChart;

                  case 8:
                    return c.barChart;

                  case 11:
                    return c.columnChart;

                  case 0:
                    return c.table;

                  case 17:
                    return c.treemap;

                  case 23:
                    return c.waterfallChart;
                }
                return null;
            }, d.createVisualStyle = function() {
                var b = new a.visuals.DataColorPalette();
                return {
                    titleText: {
                        color: {
                            value: "rgba(51,51,51,1)"
                        }
                    },
                    subTitleText: {
                        color: {
                            value: "rgba(145,145,145,1)"
                        }
                    },
                    labelText: {
                        color: {
                            value: "rgba(51,51,51,1)"
                        },
                        fontSize: "11px"
                    },
                    colorPalette: {
                        dataColors: b
                    },
                    isHighContrast: !1
                };
            }, d.prototype.createVisualizationActivity = function(a) {
                return this.connectionGroup.telemetryService.createNewActivity(25, a);
            }, d.cssClasses = {
                optionsMenu: "optionsMenu",
                baseVisualContainer: "visualContainer",
                cardContainer: "cardContainer",
                pieContainer: "pieContainer",
                treeMapContainer: "treeMapContainer"
            }, d.AnimationDuration = 250, d.ErrorMessageDelay = 1e3, d.SkittlesMargin = 50, 
            d.TelemetryVisualizationTypeProperty = "VisualizationType", d.RenderingDelay = 100, 
            d;
        }(InJs.InfoNavConnectedClientControl));
        b.QnaVisualizationControl = h;
    }(b = a.controls || (a.controls = {}));
}(powerbi || (powerbi = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(a, c, d, e) {
            b.call(this, a, c), this._initialLocationUpdated = !1, this._interpretService = d, 
            this._initialUtterance = e, this._lastResult = null, this._updateBrowserLocationTimerId = 0, 
            $(window).on("popstate", this, this.onStateChange);
        }
        return __extends(c, b), Object.defineProperty(c.prototype, "lastResult", {
            get: function() {
                return this._lastResult;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.clearBrowserLocation = function() {
            this.clearUpdateBrowserLocationTimer(), this._lastResult = null;
            var b = a.Utility.getUrlWithoutQueryString(window.location.href);
            b = a.Utility.urlCombine(b, a.QueryStringUtil.clearQueryString("k")), history.state && !a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(history.state.utterance) && (a.Tracing.verbose("Current utterance in state is " + history.state.utterance + ", pushing an new empty state"), 
            history.pushState({
                utterance: ""
            }, document.title, b));
        }, c.prototype.updateBrowserLocation = function(b) {
            a.Utility.throwIfNullOrUndefined(b, this, "UpdateBrowserLocation", "response"), 
            a.Utility.throwIfNullOrUndefined(b.result, this, "UpdateBrowserLocation", "response.Result"), 
            a.Utility.throwIfNullOrEmptyString(b.utterance, this, "UpdateBrowserLocation", "response.Utterance");
            var c = !this._initialLocationUpdated && b.utterance === this._initialUtterance;
            if (this._initialLocationUpdated = !0, !c) {
                this.clearUpdateBrowserLocationTimer();
                var d = a.QueryStringUtil.addOrUpdateQueryString("k", b.utterance);
                if (this._lastResult && !a.StringExtensions.isNullOrEmpty(this._lastResult.restatement) && this._lastResult.restatement === b.result.restatement) return a.Tracing.verbose("Replacing history state with utterance = " + b.utterance), 
                history.replaceState({
                    utterance: b.utterance
                }, document.title, d), void (this._lastResult = b.result);
                (null === history.state || history.state.utterance !== b.utterance) && (a.Tracing.verbose("Pushing history with utterance = " + b.utterance), 
                history.pushState({
                    utterance: b.utterance
                }, document.title, d)), this._lastResult = b.result;
            }
        }, c.prototype.updateBrowserLocationAfterTimeout = function(a) {
            var b = this;
            this.clearUpdateBrowserLocationTimer(), this._updateBrowserLocationTimerId = window.setTimeout(function() {
                b.updateBrowserLocation(a);
            }, c.UpdateBrowserLocationTimeoutInMilliseconds);
        }, c.prototype.clearUpdateBrowserLocationTimer = function() {
            this._updateBrowserLocationTimerId > 0 && (window.clearTimeout(this._updateBrowserLocationTimerId), 
            this._updateBrowserLocationTimerId = 0);
        }, c.prototype.onStateChange = function(b) {
            var c = b.data;
            if (c._initialLocationUpdated) {
                if (c.clearUpdateBrowserLocationTimer(), c._interpretService.abortAllInterpretRequests(), 
                history.state) {
                    var d = history.state.utterance;
                    if (!a.StringExtensions.isNullOrEmpty(d)) return void c.bridge.changeUserUtterance(d);
                }
                c._lastResult = null, c.bridge.clearInterpretResult(!1, !0);
            }
        }, c.UpdateBrowserLocationTimeoutInMilliseconds = 1e3, c;
    }(a.InfoNavClientService);
    a.BrowserHandler = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a() {}
        return a.isUnitTest = !1, a.siteUrl = window.location.protocol + "//" + window.location.hostname, 
        a.xapUrl = a.siteUrl + "/ReportServer", a.biToken = null, a;
    }();
    a.Configuration = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(a, b) {
            this._appCacheKey = b, this._storage = a;
        }
        return b.prototype.getData = function() {
            try {
                if (this._storage && this._storage[this._appCacheKey]) try {
                    var b = JSON.parse(this._storage[this._appCacheKey]);
                    if (b) return b;
                } catch (c) {
                    a.Tracing.warning("Unable to parse App Cache Data: " + this._storage[this._appCacheKey]);
                }
            } catch (c) {
                this.traceStorageException();
            }
            return {};
        }, b.prototype.updateData = function(a) {
            try {
                this._storage && (this._storage[this._appCacheKey] = JSON.stringify(a));
            } catch (b) {
                this.traceStorageException();
            }
        }, b.prototype.reset = function() {
            try {
                this._storage && this._storage.removeItem(this._appCacheKey);
            } catch (a) {
                this.traceStorageException();
            }
        }, b.prototype.traceStorageException = function() {
            a.Tracing.error("Exception encountered while accessing cache storage");
        }, b;
    }();
    a.InfoNavAppCache = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b(b) {
            var c = void 0;
            try {
                c = window.localStorage;
            } catch (d) {}
            a.call(this, c, b);
        }
        return __extends(b, a), b;
    }(a.InfoNavAppCache);
    a.InfoNavAppLocalCache = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b(b) {
            a.call(this, window.sessionStorage, b);
        }
        return __extends(b, a), b;
    }(a.InfoNavAppCache);
    a.InfoNavAppSessionCache = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(a) {
        a.ConnectionGroupInvalidatedEventName = "ConnectionGroupInvalidatedEvent", a.ConnectionGroupReadyEventName = "ConnectionGroupReadyEvent", 
        a.InterpretIssuedEventName = "InterpretIssuedEvent", a.InterpretSuccessEventName = "InterpretSuccessEvent", 
        a.InterpretErrorEventName = "InterpretErrorEvent", a.InterpretResultChangedEventName = "InterpretResultChangedEvent", 
        a.InterpretRetryInProgressEventName = "InterpretRetryInProgressEvent", a.InterpretRetryCountExceededEventName = "InterpretRetryCountExceededEvent", 
        a.InterpretProbeInProgressEventName = "InterpretProbeInProgressEvent", a.InterpretProbeSuccessEvent = "InterpretProbeSuccessEvent", 
        a.InterpretProbeErrorEventName = "InterpretProbeErrorEvent", a.ClearInterpretResultEventName = "ClearInterpretResultEvent", 
        a.InterpretResultCacheClearedEventName = "InterpretResultCacheClearedEvent", a.AvailableVisualizationTypesReadyEventName = "AvailableVisualizationTypesReadyEvent", 
        a.SetVisualizationTypeEventName = "SetVisualizationTypeEvent", a.ChangeUserUtteranceEventName = "ChangeUserUtteranceEvent", 
        a.UserUtteranceConfirmedEventName = "UserUtteranceConfirmed", a.TermSelectionChangedEventName = "TermSelectionChangedEvent", 
        a.PowerViewErrorEventName = "PowerViewErrorEvent", a.QuestionBoxSuggestionsDisplayedEventName = "QuestionBoxSuggestionsDisplayedEvent", 
        a.CollageVisibilityChangedEventName = "CollageVisibilityChangedEvent", a.FeaturedQuestionsUpdatedEventName = "FeaturedQuestionsUpdatedEvent", 
        a.ShowMessageEventName = "ShowMessageEvent", a.ShowPromptEventName = "ShowPromptEvent", 
        a.ShowErrorEventName = "ShowErrorEvent", a.ShowCustomDialogEventName = "ShowCustomDialogEvent", 
        a.HideDialogEventName = "HideDialogEvent", a.ShowNotificationEventName = "ShowNotificationEvent", 
        a.HideNotificationEventName = "HideNotificationEvent", a.InterpretUsageIssuedEventName = "InterpretUsageIssuedEvent", 
        a.InterpretUsageSuccessEventName = "InterpretUsageSuccessEvent";
    }(b = a.Events || (a.Events = {}));
    var c = function() {
        function c() {}
        return c.prototype.attachOnce = function(a, b, c) {
            $(this).off(a, c, b), $(this).on(a, c, b);
        }, c.prototype.attach = function(a, b, c) {
            $(this).on(a, c, b);
        }, c.prototype.detach = function(a, b, c) {
            $(this).off(a, c, b);
        }, c.prototype.raise = function(a, b) {
            $(this).trigger(a, b);
        }, c.prototype.notifyConnectionGroupInvalidated = function() {
            this.raise(b.ConnectionGroupInvalidatedEventName);
        }, c.prototype.notifyConnectionGroupReady = function() {
            this.raise(b.ConnectionGroupReadyEventName);
        }, c.prototype.notifyUserUtteranceConfirmed = function() {
            this.raise(b.UserUtteranceConfirmedEventName);
        }, c.prototype.clearInterpretResult = function(c, d, e) {
            a.Tracing.verbose("InfoNavEventBridge: Clearing interpret result"), this.raise(b.ClearInterpretResultEventName, new a.ClearInterpretResultEventArgs(c, d, e));
        }, c.prototype.clearInterpretResultCache = function() {
            this.raise(b.InterpretResultCacheClearedEventName);
        }, c.prototype.setVisualizationType = function(c) {
            this.raise(b.SetVisualizationTypeEventName, new a.SetVisualizationTypeEventArgs(c));
        }, c.prototype.availableVisualizationTypesReady = function(c) {
            this.raise(b.AvailableVisualizationTypesReadyEventName, new a.AvailableVisualizationTypesEventArgs(c));
        }, c.prototype.powerViewError = function(c) {
            this.raise(b.PowerViewErrorEventName, new a.PowerViewErrorEventArgs(c));
        }, c.prototype.notifyQuestionBoxSuggestionsDisplayed = function(c, d, e) {
            this.raise(b.QuestionBoxSuggestionsDisplayedEventName, new a.QuestionBox.QuestionBoxSuggestionsDisplayedEventArgs(c, d, e));
        }, c.prototype.notifyTermSelectionChanged = function(c) {
            this.raise(b.TermSelectionChangedEventName, new a.TermSelectionChangedEventArgs(c));
        }, c.prototype.showCollage = function() {
            this.raise(b.CollageVisibilityChangedEventName, !0);
        }, c.prototype.hideCollage = function() {
            this.raise(b.CollageVisibilityChangedEventName, !1);
        }, c.prototype.notifyFeaturedQuestionsUpdated = function() {
            this.raise(b.FeaturedQuestionsUpdatedEventName);
        }, c.prototype.changeUserUtterance = function(c, d) {
            this.raise(b.ChangeUserUtteranceEventName, new a.ChangeUserUtteranceEventArgs(c, d));
        }, c.prototype.showMessage = function(c, d) {
            this.raise(b.ShowMessageEventName, new a.ShowMessageEventArgs(c, d));
        }, c.prototype.showPrompt = function(c, d, e, f) {
            this.raise(b.ShowPromptEventName, new a.ShowPromptEventArgs(c, d, e, f));
        }, c.prototype.showError = function(c, d, e, f) {
            this.raise(b.ShowErrorEventName, new a.ShowErrorEventArgs(c, d, e, f));
        }, c.prototype.showCustomDialog = function(c, d, e, f, g) {
            this.raise(b.ShowCustomDialogEventName, new a.ShowCustomDialogEventArgs(c, d, e, f, g));
        }, c.prototype.hideDialog = function() {
            this.raise(b.HideDialogEventName);
        }, c.prototype.showNotification = function(c, d, e, f, g, h, i, j) {
            this.raise(b.ShowNotificationEventName, new a.ShowNotificationEventArgs(c, d, e, f, g, h, i, j));
        }, c.prototype.hideNotification = function(c) {
            this.raise(b.HideNotificationEventName, new a.HideNotificationEventArgs(c));
        }, c;
    }();
    a.InfoNavEventBridge = c;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b) {
            this.requestId = a, this.clientActivity = b;
        }
        return a;
    }();
    a.InterpretEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b) {
            this._visualizationTypes = null, a.Utility.throwIfNullOrUndefined(b, this, "AvailableVisualizationTypesEventArgs", "visualizationTypes"), 
            this._visualizationTypes = b;
        }
        return b;
    }();
    a.AvailableVisualizationTypesEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b) {
            this.userUtterance = null, this.userUtterance = a, this.updateOnlyUI = !!b;
        }
        return a;
    }();
    a.ChangeUserUtteranceEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b, c) {
            this.abortInterprets = !1, this.clearUtterance = !1, this.hideVisualization = !1, 
            this.abortInterprets = a, this.clearUtterance = b, this.hideVisualization = c;
        }
        return a;
    }();
    a.ClearInterpretResultEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this.id = null, this.id = a;
        }
        return a;
    }();
    a.HideNotificationEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b(b, c, d, e, f, g, h) {
            a.call(this, c, h), this.timedOut = !1, this.statusCode = 0, this.activityId = null, 
            this.timeStamp = null, this.infoNavError = null, this.timedOut = d, this.statusCode = e, 
            this.activityId = b, this.timeStamp = g, this.infoNavError = f;
        }
        return __extends(b, a), b;
    }(a.InterpretEventArgs);
    a.InterpretErrorEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b(b, c) {
            a.call(this, b, c);
        }
        return __extends(b, a), b;
    }(a.InterpretEventArgs);
    a.InterpretIssuedEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d, e) {
            b.call(this, d, e), this.response = null, a.Utility.throwIfNullOrUndefined(c, this, "InterpretResultChangedEventArgs", "response"), 
            this.response = c;
        }
        return __extends(c, b), c;
    }(a.InterpretEventArgs);
    a.InterpretResultChangedEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d, e) {
            b.call(this, c.requestId, d), a.Utility.throwIfNullOrUndefined(c, this, "InterpretSuccessEventArgs", "response"), 
            this.response = c, this.orderId = e;
        }
        return __extends(c, b), c;
    }(a.InterpretEventArgs);
    a.InterpretSuccessEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b) {
            this.error = null, a.Utility.throwIfNullOrUndefined(b, this, "PowerViewErrorEventArgs", "error"), 
            this.error = b;
        }
        return b;
    }();
    a.PowerViewErrorEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this.visualizationType = 0, this.visualizationType = a;
        }
        return a;
    }();
    a.SetVisualizationTypeEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b, c, d, e) {
            this.titleText = null, this.dialogContent = null, this.dialogActions = null, this.onDialogDisplayed = null, 
            this.isDismissable = null, this.titleText = a, this.dialogContent = b, this.dialogActions = c, 
            this.onDialogDisplayed = d, this.isDismissable = e;
        }
        return a;
    }();
    a.ShowCustomDialogEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b, c, d) {
            this.errorText = null, this.errorType = null, this.request = null, this.scriptError = null, 
            this.errorText = a, this.errorType = b, this.request = c, this.scriptError = d;
        }
        return a;
    }();
    a.ShowErrorEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b) {
            this.messageTitle = null, this.messageText = null, this.messageTitle = a, this.messageText = b;
        }
        return a;
    }();
    a.ShowMessageEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b, c, d, e, f, g, h) {
            this.id = a, this.title = b, this.message = c, this.closedCallback = d, this.isDismissable = e, 
            this.iconType = g, this.officeIconId = h, this.dismissTimeout = f;
        }
        return a;
    }();
    a.ShowNotificationEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b, c, d) {
            this.promptTitle = null, this.promptText = null, this.promptActions = null, this.isDismissable = null, 
            this.promptTitle = a, this.promptText = b, this.promptActions = c, this.isDismissable = d;
        }
        return a;
    }();
    a.ShowPromptEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this.termSelection = null, this.termSelection = a;
        }
        return a;
    }();
    a.TermSelectionChangedEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(a, c, d) {
            b.call(this, c, d), this._token = a, this._raiseReadyEventInternal();
        }
        return __extends(c, b), c.prototype.getClusterUri = function() {
            return a.AppManager.current.initialClusterUri;
        }, c.prototype.getSecurityToken = function() {
            return this._token;
        }, c.prototype.getManagementSecurityToken = function() {
            return null;
        }, c.prototype.getSpoContextToken = function() {
            return null;
        }, c.prototype.getIsUsageReportingEnabled = function() {
            return !1;
        }, c.prototype.getSecurityTokenKind = function() {
            return a.InfoNavTokenKind.AAD;
        }, c.prototype._refreshMetadataInternal = function() {
            return this._token && this._raiseReadyEventInternal(), null;
        }, c;
    }(a.ConnectionGroup);
    a.AADConnectionGroup = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d) {
            b.call(this, c, d), this._siteRootUrl = null, this._generalHelpPageUrl = null, this._siteRootUrl = a.Configuration.siteUrl;
        }
        return __extends(c, b), Object.defineProperty(c.prototype, "generalHelpPageUrl", {
            get: function() {
                return this._generalHelpPageUrl;
            },
            set: function(a) {
                this._generalHelpPageUrl = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "resourcesUrl", {
            get: function() {
                return a.Utility.urlCombine(this._siteRootUrl, "/infonav/app/Resources");
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "autoAdjustResultsControlVerticalOffset", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "browserHandler", {
            get: function() {
                return this._browserHandler;
            },
            set: function(a) {
                this._browserHandler = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "initialUtterance", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.add_resize = function(a, b) {
            $(this).on(c.ResizeEventName, b, a);
        }, c.prototype.remove_resize = function(a) {
            $(this).off(c.ResizeEventName, a);
        }, c.RequestIdHeaderName = "request-id", c.BackgroundColor = "white", c.ResizeEventName = "Resize", 
        c.HorizontalScrollbarOverlapPx = 20, c;
    }(a.ConnectionGroup);
    a.CloudConnectionGroup = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(d) {
            b.call(this, d), this._isUserAdmin = d.isUserAdmin || !1, this._isRuntimeModelingEnabled = d.isRuntimeModelingEnabled || !1, 
            this._shouldUpdateBrowserLocation = d.shouldUpdateBrowserLocation || !0, this._appCache = new a.InfoNavAppLocalCache("STANDALONE"), 
            this._appCache.reset();
            var e = c.getBIToken();
            e ? (this._securityToken = e, this._securityToken && this._raiseReadyEventInternal()) : a.Tracing.error("Security token not present in configuration or on the hosting page");
        }
        return __extends(c, b), c.requirementsMet = function() {
            return !a.StringExtensions.isNullOrEmpty(c.getBIToken());
        }, c.getBIToken = function() {
            return a.Configuration.biToken || window.securityToken;
        }, Object.defineProperty(c.prototype, "globalServiceClusterUri", {
            get: function() {
                return this.initialClusterUri;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getClusterUri = function() {
            return this.initialClusterUri;
        }, c.prototype.getSecurityToken = function() {
            return this._securityToken;
        }, c.prototype.setSecurityToken = function(a, b) {
            void 0 === b && (b = !1), this._securityToken !== a && (this._securityToken = a, 
            b || (this.clearInterpretResult(), this.invalidate()));
        }, c.prototype.getSpoContextToken = function() {
            return null;
        }, Object.defineProperty(c.prototype, "isUserAdmin", {
            get: function() {
                return !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isRuntimeModelingEnabled", {
            get: function() {
                return !0;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getIsUsageReportingEnabled = function() {
            return !0;
        }, Object.defineProperty(c.prototype, "isSamplesOnlyModeEnabled", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "appCache", {
            get: function() {
                return this._appCache;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getDataSourceProperties = function(a) {
            var b = {};
            return b.name = a, b;
        }, Object.defineProperty(c.prototype, "generalHelpPageUrl", {
            get: function() {
                return "https://sampleimages.blob.core.windows.net/help/InfoNavHelp.html";
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.shouldUpdateBrowserLocation = function() {
            return this._shouldUpdateBrowserLocation && b.prototype.shouldUpdateBrowserLocation.call(this);
        }, Object.defineProperty(c.prototype, "userPermissions", {
            get: function() {
                return 0;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getListOfDatabaseNames = function() {
            var a = [];
            return a;
        }, c.prototype._refreshMetadataInternal = function() {
            return this._securityToken && this._raiseReadyEventInternal(), null;
        }, c;
    }(a.CloudConnectionGroup);
    a.StandaloneCloudConnectionGroup = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c) {
            a.Utility.throwIfNullOrUndefined(c, this, "ctor", "options"), a.Utility.throwIfNullOrUndefined(c.clusterUri, this, "ctor", "options.clusterUri"), 
            a.Utility.throwIfNullOrEmpty(c.publicWorkbookSources, this, "ctor", "options.publicWorkbookSources"), 
            b.call(this, c, 19), this._appCache = new a.InfoNavAppLocalCache("POWERBICACHE_" + a.Utility.getUrlWithoutQueryString(window.location.href)), 
            this._appCache.reset(), this._clusterUri = c.clusterUri, this._publicWorkbookSources = c.publicWorkbookSources, 
            this._isLoadingAppMetadataNotificationDisplayed = !1, this._appMetadataLoadingNotificationTimeoutId = 0, 
            this._notificationMessage = a.Strings.workbooksLoadingTimeoutText, this.invalidate(this._pageLoadActivity);
        }
        return __extends(c, b), c.prototype.getClusterUri = function() {
            return this._clusterUri;
        }, c.prototype.getSecurityToken = function() {
            return this._securityToken;
        }, c.prototype.getManagementSecurityToken = function() {
            return a.Utility.throwException(a.Errors.invalidOperation("PublicWorkbooksConnectionGroup does not support management operations")), 
            null;
        }, c.prototype.getSpoContextToken = function() {
            return null;
        }, c.prototype.getIsUsageReportingEnabled = function() {
            return !1;
        }, Object.defineProperty(c.prototype, "isUserAdmin", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "userPermissions", {
            get: function() {
                return 0;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.shouldUpdateBrowserLocation = function() {
            return !1;
        }, Object.defineProperty(c.prototype, "appCache", {
            get: function() {
                return this._appCache;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isRuntimeModelingEnabled", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isSamplesOnlyModeEnabled", {
            get: function() {
                return !1;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype._refreshMetadataInternal = function(b) {
            var d = this, e = b ? b.createChildActivity(22) : this.telemetryService.createNewActivity(22);
            this._appMetadataLoadingNotificationTimeoutId = window.setTimeout(function() {
                d.showAppMetadataLoadingNotification();
            }, c.AppMetadataNotificationTimeoutMs);
            var f = {};
            f.type = a.Utility.HttpPostMethod, f.url = a.Utility.urlCombine(this.getClusterUri(), "/infonav/api/token/"), 
            f.contentType = a.Utility.JsonContentType;
            var g = {
                Sources: this._publicWorkbookSources
            };
            f.data = JSON.stringify({
                request: g
            });
            var h = "";
            return f.beforeSend = function(b) {
                a.HttpUtility.setCommonRequestHeaders(b), b.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), 
                b.setRequestHeader(c.PowerBIHeaderName, infonavPowerBIHeader), h = b.requestId, 
                a.Tracing.verbose("Requesting public workbooks app metadata from server...", h), 
                e.addCorrelatedProperty(new a.CorrelatedProperty("metadataRequestId", h));
            }, f.success = function(b) {
                d.hideAppMetadataLoadingNotification(), d._securityToken = b.DatabaseAccessToken, 
                d.setAccessTokenExpiryMessage(b.LifetimeInMinutes), d._raiseReadyEventInternal(), 
                a.Tracing.verbose("Successfully retrieved app metadata from server.", h), e.end(1);
            }, f.error = function(b) {
                d.hideAppMetadataLoadingNotification();
                var c = a.Strings.sharePointAppLoadModelsErrorText;
                403 === b.status && (c = a.Strings.tokenInvalidOrExpiredErrorText), d.modalDialogService.showError(c, 6, b), 
                a.Tracing.error("Failed to retrieve app metadata from server", h), a.ClientActivity.addErrorInfoIfPresent(e, b), 
                e.end(3, a.ActivityErrors.UnknownError);
            }, $.ajax(f), e;
        }, c.prototype.showAppMetadataLoadingNotification = function() {
            this._isLoadingAppMetadataNotificationDisplayed || (this.notificationService.showNotification(c.AppMetadataLoadingNotificationId, a.Strings.workbooksLoadingTimeoutTitle, this._notificationMessage, null, !1, 1), 
            this._isLoadingAppMetadataNotificationDisplayed = !0);
        }, c.prototype.hideAppMetadataLoadingNotification = function() {
            window.clearTimeout(this._appMetadataLoadingNotificationTimeoutId), this._isLoadingAppMetadataNotificationDisplayed && (this.notificationService.hideNotification(c.AppMetadataLoadingNotificationId), 
            this._isLoadingAppMetadataNotificationDisplayed = !1);
        }, c.prototype.setAccessTokenExpiryMessage = function(b) {
            var d = this;
            window.clearTimeout(this._accessTokenExpiredNotificationId);
            var e = [ new a.ModalDialogAction(a.Strings.dialogRefreshPageActionLabel, function() {
                window.location.reload();
            }) ];
            this._accessTokenExpiredNotificationId = window.setTimeout(function() {
                d.modalDialogService.showPrompt(a.Strings.connectionExpiredTitleText, a.Strings.tokenInvalidOrExpiredErrorText, e, !1), 
                a.Tracing.verbose("Token expired error raised");
            }, b * c.MillisecondsInMinute);
        }, c.AppMetadataLoadingNotificationId = "6c6c6e51-0099-43ca-94d8-41be389af351", 
        c.AppMetadataNotificationTimeoutMs = 3e3, c.MillisecondsInMinute = 6e4, c.PowerBIHeaderName = "X-IN-PowerBI", 
        c;
    }(a.ConnectionGroup);
    a.PowerBIConnectionGroup = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this.eventName = null, this.eventName = a;
        }
        return a;
    }();
    a.InteractionEventArgs = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b, c, d) {
            a.Utility.throwIfNullOrEmptyString(c, this, "StateMachine.ctor", "startDate"), a.Utility.throwIfNullOrUndefined(b, this, "StateMachine.ctor", "definition"), 
            a.Utility.throwIfNotTrue(c in b.states, this, "StateMachine.ctor", "context"), this._stateMachineDefinition = b, 
            this._currentState = c, this._context = d, this._isBusy = !1, this._transitionQueue = [];
        }
        return Object.defineProperty(b.prototype, "currentState", {
            get: function() {
                return this._currentState;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.enqueueTransition = function(b, c) {
            a.Utility.throwIfNullOrUndefined(b, this, "enqueueTransition", "transitionName"), 
            this._transitionQueue.push({
                id: b,
                data: c
            }), this.performTransitionInternal();
        }, b.prototype.performTransitionInternal = function() {
            if (!this._isBusy) {
                for (this._isBusy = !0; this._transitionQueue.length > 0; ) {
                    var a = this._transitionQueue.shift(), b = this._stateMachineDefinition.states[this._currentState], c = b[a.id.toString()];
                    void 0 !== c && (this._currentState = c.toState, c.executeActions(this._context, a.data));
                }
                this._isBusy = !1;
            }
        }, b;
    }();
    a.StateMachine = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {
            this._states = {};
        }
        return Object.defineProperty(b.prototype, "states", {
            get: function() {
                return this._states;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.addTransition = function(b, c, d, e) {
            a.Utility.throwIfNullOrEmptyString(b, this, "AddTransition", "fromState"), a.Utility.throwIfNullOrUndefined(c, this, "AddTransition", "transitionId"), 
            a.Utility.throwIfNullOrEmptyString(d, this, "AddTransition", "toState"), a.Utility.throwIfNullOrUndefined(e, this, "AddTransition", "actions");
            var f = this._states[b];
            void 0 === f && (this._states[b] = f = {}), f[c.toString()] = new a.Transition(b, e, d), 
            d in this._states || (this._states[d] = {});
        }, b.prototype.getTransitionsFrom = function(b, c) {
            void 0 === c && (c = !0), a.Utility.throwIfNullOrEmptyString(b, this, "getTransitionStatesFrom", "startState"), 
            a.Utility.throwIfNotTrue(b in this._states, this, "getTransitionStatesFrom", "startState");
            var d = [], e = this._states[b];
            for (var f in e) {
                {
                    e[f];
                }
                d.push(c ? parseInt(f) : f);
            }
            return d;
        }, b;
    }();
    a.StateMachineDefinition = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b, c, d) {
            a.Utility.throwIfNullOrEmptyString(b, this, "Transition.ctor", "fromState"), a.Utility.throwIfNullOrUndefined(c, this, "Transition.ctor", "actions"), 
            a.Utility.throwIfNullOrEmptyString(d, this, "Transition.ctor", "toState"), this._fromState = b, 
            this._actions = c, this._toState = d;
        }
        return Object.defineProperty(b.prototype, "toState", {
            get: function() {
                return this._toState;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.executeActions = function(a, b) {
            for (var c = 0; c < this._actions.length; ++c) this._actions[c](a, b);
        }, b;
    }();
    a.Transition = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            a.OnInteractionEventName = "OnInteraction", a.InactiveStateName = "Inactive", a.TypingStateName = "Typing", 
            a.BrowseSuggestionsStateName = "BrowseSuggestions", a.TermSelectionStateName = "TermSelection", 
            a.ModelingStateName = "Modeling", a.BeginSessionEventName = "BeginSession", a.EndSessionEventName = "EndSession", 
            a.ClearQueryEventName = "ClearQuery", a.ConfirmQueryEventName = "ConfirmQuery", 
            a.TextChangedEventName = "TextChanged", a.CompleteQueryEventName = "CompleteText", 
            a.NavigateUpEventName = "NavigateUp", a.NavigateDownEventName = "NavigateDown", 
            a.NavigateOutOfBoundsEventName = "NavigateOutOfBounds", a.TextSuggestionSelectedEventName = "TextSuggestionItemSelected", 
            a.TextSuggestionConfirmedEventName = "TextSuggestionConfirmed", a.SuggestionItemConfirmedEventName = "SuggestionItemConfirmed", 
            a.TermSelectedEventName = "TermSelected", a.ResultReadyEventName = "ResultReady", 
            a.ResultChangedEventName = "ResultChanged", a.InterpretFailedEventName = "InterpretFailed", 
            a.BeginModelingSessionEventName = "BeginModelingSession", a.EndModelingSessionEventName = "EndModelingSession";
        }(b = a.Constants || (a.Constants = {}));
    }(b = a.QuestionBox || (a.QuestionBox = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(a) {
            a[a.NotStarted = 0] = "NotStarted", a[a.InProgress = 1] = "InProgress", a[a.Completed = 2] = "Completed";
        }(c || (c = {}));
        var d = function(c) {
            function d(e, f) {
                var g = this;
                c.call(this, e, f), this._stateMachine = null, this._controlRoot = null, this._caretDecorator = null, 
                this._suggestionList = null, this._textInput = null, this._userInput = "", this._clearInterpretResultTimerId = 0, 
                this._isLoadingModelsNotificationDisplayed = !1, this._isCollageVisible = !1, this._answerQuestionReportingTimerId = 0, 
                this._placeholder = "", this._placeholderOnInit = "", this._utteranceFeedbackTooltip = "", 
                this._telemetryHostName = "", this._interpretOptions = f.interpretRequestOptons, 
                this._disableBlur = f.disableBlurOnConfirmQuery, this._disableNotification = f.disableNotification, 
                this._telemetryHostName = f.telemetryHostName, this._getInterpretRequestScope = f.getInterpretRequestScope, 
                this._controlRoot = $(d.QuestionBoxControlHtml), e.append(this._controlRoot);
                var h = this._controlRoot.find(d.QuestionBoxControlSelector);
                this._textInput = new b.TextInputControl(h), this._suggestionList = new b.SuggestionListControl(e, h, {
                    group: this.connectionGroup
                }), this._textInput.add_interaction(this.interactionEventHandler, this), this._suggestionList.add_interaction(this.interactionEventHandler, this), 
                this._caretDecorator = this._controlRoot.siblings(d.QuestionBoxCaretContainerSelector).find(d.QuestionBoxCaretSelector), 
                this._stateMachine = new a.StateMachine(b.QuestionBoxStateMachine.definition, b.Constants.InactiveStateName, this), 
                this._unreportedActivities = [];
                var i = this.connectionGroup.initialUtterance;
                this._hasInteraction = !1, a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(i) || (this._textInput.text = i, 
                this.interpretInternal(this.connectionGroup.visualizationOnPageLoadActivity).onCompleted(function(a) {
                    g.connectionGroup.visualizationOnPageLoadActivity && g.connectionGroup.getIsReady() && g.connectionGroup.visualizationOnPageLoadActivity.end(a.activityEndResult, a.error);
                })), this._textInput.focus(), this._defineOption(new a.BooleanControllerOptionDefinition(d.AutocompleteOptionName, function() {
                    return g._textInput.isAutocompleteEnabled;
                }, function(a) {
                    g._textInput.isAutocompleteEnabled = a;
                }, !1, !0), f), this._interpretOptions = f.interpretRequestOptons, this.registerAppActions();
            }
            return __extends(d, c), Object.defineProperty(d.prototype, "textInput", {
                get: function() {
                    return this._textInput;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(d.prototype, "suggestionList", {
                get: function() {
                    return this._suggestionList;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(d.prototype, "placeholder", {
                get: function() {
                    return this._placeholder;
                },
                set: function(a) {
                    this._placeholder = a;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(d.prototype, "placeholderOnInit", {
                get: function() {
                    return this._placeholderOnInit;
                },
                set: function(a) {
                    this._placeholderOnInit = a;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(d.prototype, "utteranceFeedbackTooltip", {
                get: function() {
                    return this._utteranceFeedbackTooltip;
                },
                set: function(b) {
                    this._utteranceFeedbackTooltip = b, this._userFeedbackBtn && this._userFeedbackBtn.attr(a.DOMConstants.titleAttribute, b);
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(d.prototype, "getLocalizedResource", {
                get: function() {
                    return this._getLocalizedResource;
                },
                set: function(a) {
                    this._getLocalizedResource = a;
                },
                enumerable: !0,
                configurable: !0
            }), d.hasInteraction = function(a) {
                a._hasInteraction = !0;
            }, d.interpret = function(a) {
                a.interpretInternal();
            }, d.userUtteranceConfirmed = function(a) {
                a.userUtteranceConfirmedInternal();
            }, d.clearInterpretResult = function(a) {
                a.clearInterpretResultInternal(!0, !0);
            }, d.clearUserInputBuffer = function(a) {
                a.clearUserInputBufferInternal();
            }, d.storeUserInput = function(a) {
                a.storeInputInternal();
            }, d.restoreUserInput = function(a) {
                a.restoreInputInternal();
            }, d.processSuggestion = function(a) {
                a.connectionGroup.telemetryService.notifyUserSelectedSuggestion(11), 0 === a._suggestionList.currentSelectionType ? a._stateMachine.enqueueTransition(b.Constants.TextSuggestionConfirmedEventName) : 1 === a._suggestionList.currentSelectionType && a.connectionGroup.interpretService.interpretAsync(a._textInput.text, null, null, null, null, a._getInterpretRequestScope ? a._getInterpretRequestScope() : null);
            }, d.exitModelingMode = function() {}, d.setInputTextToSelectedSuggestion = function(a) {
                a._textInput.setInputText(a._suggestionList.currentSelectionText, !1);
            }, d.textInput_Focus = function(a) {
                var b = a._textInput;
                b.focus();
            }, d.textInput_Blur = function(a) {
                var b = a._textInput;
                a._disableBlur || b.blur();
            }, d.textInput_ClearTermSelection = function(a) {
                a.clearTermSelectionInternal();
            }, d.textInput_CompleteInput = function(a) {
                a.connectionGroup.telemetryService.notifyUserSelectedAutocomplete(10);
                var b = a._textInput;
                b.completeInput();
            }, d.textInput_ClearAutoCompletion = function(a) {
                var b = a._textInput;
                b.clearAutoCompletion();
            }, d.textInput_ShowAutoCompletion = function(a) {
                var b = a._textInput;
                b.showAutoCompletion();
            }, d.textInput_Clear = function(b) {
                a.Tracing.verbose("Clearing current utterance due to user action");
                var c = b._textInput;
                c.clear();
            }, d.suggestionList_Clear = function(a) {
                var b = a._suggestionList;
                b.clear(!1);
            }, d.suggestionList_ClearPreserveRestatement = function(a) {
                var b = a._suggestionList;
                b.clear(!0);
            }, d.suggestionList_ClearSelection = function(a) {
                var b = a._suggestionList;
                b.clearSelection();
            }, d.suggestionList_SelectPrevious = function(a) {
                var b = a._suggestionList;
                a.clearTermSelectionInternal(), b.selectPrevious();
            }, d.suggestionList_SelectNext = function(a) {
                var b = a._suggestionList;
                a.clearTermSelectionInternal(), b.selectNext();
            }, d.updateTermSelection = function(a) {
                var b = a.textInput;
                b.updateTermSelection();
            }, d.selectTerm = function(a) {
                var a = a;
                a.selectTermInternal();
            }, d.notifyTermSelection = function(a) {
                a.connectionGroup.bridge.notifyTermSelectionChanged(a._textInput.selection);
            }, d.displayResult = function(a) {
                a.displayResultInternal();
            }, d.displayQueryResult = function(a) {
                a.displayQueryResultInternal(!0, !0);
            }, d.displayModelingResult = function(a) {
                a.displayModelingResultInternal();
            }, d.updateResult = function(a) {
                a.displayQueryResultInternal(!1, !1);
            }, d.updateBrowserLocationAfterTimeout = function(a) {
                a.updateBrowserLocationInternalAfterTimeout();
            }, d.updateBrowserLocation = function(a) {
                a.updateBrowserLocationInternal();
            }, d.clearInterpretResultAfterTimeout = function(a) {
                a.clearInterpretResultInternalAfterTimeout();
            }, d.clearClearInterpretResultTimer = function(a) {
                a.clearClearInterpretResultTimerInternal();
            }, d.prototype._onInterpretSuccess = function() {
                this._hasInterpretResponse() && (this._stateMachine.enqueueTransition(b.Constants.ResultReadyEventName), 
                this.showAppActions(), this.updateLoadingMessage(2, 0), this.setUserFeedbackBtnVisible(!0));
            }, d.prototype._onInterpretError = function() {
                this.setUserFeedbackBtnVisible(!1), this._stateMachine.enqueueTransition(b.Constants.InterpretFailedEventName);
            }, d.prototype._onInterpretResultCleared = function(b) {
                this._suggestionList.clear(!b.clearUtterance), a.Tracing.verbose("Interpret result cleared"), 
                b.clearUtterance && (this._textInput.clear(), this.clearBrowserHandler(), a.Tracing.verbose("User utterance cleared")), 
                this._textInput.hasFocus() && !this._isCollageVisible && this._suggestionList.displaySuggestions(this._textInput.text), 
                this.hideAppActions(), this.setUserFeedbackBtnVisible(!1);
            }, d.prototype._onInterpretResultChanged = function() {
                this._stateMachine.enqueueTransition(b.Constants.ResultChangedEventName);
            }, d.prototype._onChangeUserUtterance = function(a) {
                this._textInput.focus(), this._textInput.text = a.userUtterance, a.updateOnlyUI || this._stateMachine.enqueueTransition(b.Constants.TextChangedEventName);
            }, d.prototype._onPowerViewError = function() {
                this._stateMachine.enqueueTransition(b.Constants.InterpretFailedEventName);
            }, d.prototype._onCollageVisibilityChanged = function(a) {
                this._isCollageVisible = a, a && this._suggestionList.clear(!0);
            }, d.prototype._onInterpretRetryInProgress = function() {
                this.clearInterpretResultInternal(!1, !1), this.showModelsLoadingNotification();
            }, d.prototype._onInterpretRetryCountExceeded = function() {
                this.updateLoadingMessage(2, 0), this._disableNotification || this.connectionGroup.bridge.showError(this.localize("InterpretRetryMaxCountExceededMessageText", a.Strings.interpretRetryMaxCountExceededMessageText), 5);
            }, d.prototype._onInterpretProbeInProgress = function() {
                this.showModelsLoadingNotification(d.ProbeInProgressNotificationDelayMs), this.updateLoadingMessage(1);
            }, d.prototype._onInterpretProbeSuccess = function() {
                clearTimeout(this._modelLoadingDelayTimeoutId), this.updateLoadingMessage(2, 1);
            }, d.prototype._onConnectionGroupInvalidated = function() {
                this.updateLoadingMessage(0);
            }, d.prototype._onInterpretProbeError = function() {
                this.updateLoadingMessage(2, 3);
            }, d.prototype.showAppActions = function() {
                this._copyResultLinkBtn && this._copyResultLinkBtn.css(a.CssConstants.displayProperty, a.CssConstants.inlineBlockValue), 
                this._shareResultLinkBtn && this._shareResultLinkBtn.css(a.CssConstants.displayProperty, a.CssConstants.inlineBlockValue), 
                this._flagUtteranceBtn && this.connectionGroup.getIsUsageReportingEnabled() && this._flagUtteranceBtn.css(a.CssConstants.displayProperty, a.CssConstants.inlineBlockValue);
            }, d.prototype.hideAppActions = function() {
                this._copyResultLinkBtn && this._copyResultLinkBtn.css(a.CssConstants.displayProperty, a.CssConstants.noneValue), 
                this._shareResultLinkBtn && this._shareResultLinkBtn.css(a.CssConstants.displayProperty, a.CssConstants.noneValue), 
                this._flagUtteranceBtn && this._flagUtteranceBtn.css(a.CssConstants.displayProperty, a.CssConstants.noneValue);
            }, d.prototype.setUserFeedbackBtnVisible = function(b) {
                this._userFeedbackBtn && this._userFeedbackBtn.css(a.CssConstants.displayProperty, b && this.connectionGroup.getIsUsageReportingEnabled() ? a.CssConstants.inlineBlockValue : a.CssConstants.noneValue);
            }, d.prototype.registerAppActions = function() {
                var b = this;
                this._shareResultLinkBtn = $("#shareResultBtn.in_navigationBtn"), this._shareResultLinkBtn.attr(a.DOMConstants.titleAttribute, a.Strings.shareResultLinkText), 
                this._shareResultLinkBtn.on(a.DOMConstants.mouseClickEventName, function() {
                    b.connectionGroup.telemetryService.notifyUserShareResultViaEmail(16);
                }), this._flagUtteranceBtn = $("#flagUtteranceBtn.in_navigationBtn").attr(a.DOMConstants.titleAttribute, a.Strings.flagUtteranceTooltip).on(a.DOMConstants.mouseClickEventName, function() {
                    b._flagUtteranceBtn.hasClass(d.SelectedIconClass) || (b._flagUtteranceBtn.addClass(d.SelectedIconClass), 
                    b.connectionGroup.usageService.setLastUtteranceAsUserFlagged());
                }), this._userFeedbackBtn = $("#userFeedbackBtn.in_navigationBtn").attr(a.DOMConstants.titleAttribute, this._utteranceFeedbackTooltip || a.Strings.utteranceFeedbackTooltip).on(a.DOMConstants.mouseClickEventName, function() {
                    var c = [ new a.ModalDialogAction(b.localize("ModalDialog_Send", a.Strings.dialogSendActionLabel), function(a, c) {
                        b.connectionGroup.modalDialogService.hideDialog();
                        var d = $("input[type='radio']:checked", c).val();
                        if (d) {
                            var e = parseInt(d);
                            b.connectionGroup.usageService.setFeedbackForLastUtterance(e), 1 === e && b.connectionGroup.usageService.setLastUtteranceAsUserFlagged();
                        }
                    }, null, null, !0), new a.ModalDialogAction(b.localize("ModalDialog_Cancel", a.Strings.dialogCancelActionLabel), function() {
                        b.connectionGroup.modalDialogService.hideDialog();
                    }) ], e = a.DomFactory.div().addClass("utteranceFeedbackOptions"), f = a.DomFactory.div().append(a.DomFactory.div().text(b.localize("UtteranceFeedbackDialogPrompt", a.Strings.utteranceFeedbackDialogPrompt)), e);
                    e.append(d.createFeedbackRadioButton(b.localize("UtteranceFeedbackResultGood", a.Strings.utteranceFeedbackResultGood), 3, f), d.createFeedbackRadioButton(b.localize("UtteranceFeedbackResultMedium", a.Strings.utteranceFeedbackResultMedium), 2, f), d.createFeedbackRadioButton(b.localize("UtteranceFeedbackResultBad", a.Strings.utteranceFeedbackResultBad), 1, f)), 
                    b.connectionGroup.modalDialogService.showCustomDialog(b.localize("UtteranceFeedbackDialogTitle", a.Strings.utteranceFeedbackDialogTitle), f, c, function() {}, !1);
                }), this.setUserFeedbackBtnVisible(!1), a.Utility.canUseClipboard() && window.clipboardData && clipboardData.setData && (this._copyResultLinkBtn = $("#copyResultBtn.in_navigationBtn"), 
                this._copyResultLinkBtn.attr(a.DOMConstants.titleAttribute, a.Strings.copyResultLinkText), 
                this._copyResultLinkBtn.on(a.DOMConstants.mouseClickEventName, function() {
                    clipboardData.setData("text", window.location.href), b.connectionGroup.telemetryService.notifyUserCopyResultUrlToClipboard(15), 
                    b.bridge.showNotification(d.UserCopyResultUrlToClipboardNotificationId, a.Strings.resultLinkCopiedNotificationText, null, null, !1, 2e3, 2);
                }));
            }, d.createFeedbackRadioButton = function(b, c, d) {
                return $('<input type="radio" name="utteranceFeedback" id="utteranceFeedback%VALUE%" value="%VALUE%" /><label for="utteranceFeedback%VALUE%">%TEXT%</label>'.replace("%TEXT%", b).replace(/%VALUE%/g, c.toString(10))).on(a.DOMConstants.changeEventName, function() {
                    d.parent().parent().find(".infonav-dialogActions > input").filter(":first").prop("disabled", !1);
                });
            }, d.prototype.updateShareResultLink = function(b) {
                var c = window.location.protocol + "//" + window.location.hostname + window.location.pathname + "?k=" + encodeURIComponent(b.utterance), d = a.StringExtensions.format(a.Strings.shareResultEmailBodyTemplateText, c), e = a.StringExtensions.format("mailto:?Subject={0}&Body={1}", encodeURIComponent(a.Strings.shareResultEmailSubjectText), encodeURIComponent(d));
                this._shareResultLinkBtn && this._shareResultLinkBtn.attr(a.DOMConstants.hrefAttribute, e);
            }, d.prototype.showModelsLoadingNotification = function(b) {
                var c = this;
                if (void 0 === b && (b = 0), !this._disableNotification && !this._isLoadingModelsNotificationDisplayed) {
                    var e = this.localize("WorkbooksLoadingTimeoutText", a.Strings.workbooksLoadingTimeoutText);
                    this._modelLoadingDelayTimeoutId = setTimeout(function() {
                        c.connectionGroup.bridge.showNotification(d.ModelsLoadingNotificationId, c.localize("WorkbooksLoadingTimeoutTitle", a.Strings.workbooksLoadingTimeoutTitle), e, null, !1, 1);
                    }, b), this._isLoadingModelsNotificationDisplayed = !0;
                }
            }, d.prototype.interactionEventHandler = function(b, c) {
                var e = b.data;
                e._stateMachine.enqueueTransition(c.eventName), c.eventName === d.InternalTextChangedEventName && e.connectionGroup.bridge.raise(a.ConnectionGroup.TextChangedEventName);
            }, d.prototype.userUtteranceConfirmedInternal = function() {
                this.connectionGroup.bridge.notifyUserUtteranceConfirmed();
            }, d.prototype.interpretInternal = function(b) {
                this._hasInteraction = !0;
                var c = this.createAnswerQuestionActivity(b), e = a.XmlUtility.removeInvalidCharacters(this._textInput.text);
                return this.connectionGroup.interpretService.interpretAsync(e, c, null, null, this._interpretOptions, this._getInterpretRequestScope ? this._getInterpretRequestScope() : null), 
                this._flagUtteranceBtn && this._flagUtteranceBtn.removeClass(d.SelectedIconClass), 
                c;
            }, d.prototype.clearUserInputBufferInternal = function() {
                this._userInput = "";
            }, d.prototype.storeInputInternal = function() {
                this._userInput = this._textInput.text, this._textInput.hideAutoCompletion();
            }, d.prototype.restoreInputInternal = function() {
                this._userInput.length > 0 && (this._textInput.setInputText(this._userInput, !1), 
                this._textInput.showAutoCompletion(), this._userInput = ""), this._hasInterpretResponse() && this._textInput.applyNLResult(this._currentInterpretResponse.result);
            }, d.prototype.displayResultInternal = function() {
                this._stateMachine.enqueueTransition(b.Constants.ResultReadyEventName);
            }, d.prototype.displayQueryResultInternal = function(a, b, c) {
                this._isCollageVisible || 0 == this._hasInteraction || (this._hasInterpretResponse() ? (this._suggestionList.displaySuggestions(this._textInput.text, this._currentInterpretResponse, c, !b), 
                this._textInput.applyNLResult(this._currentInterpretResponse.result, a), this.updateShareResultLink(this._currentInterpretResponse.result)) : this._suggestionList.displaySuggestions(this._textInput.text));
            }, d.prototype.displayModelingResultInternal = function() {
                this._hasInterpretResponse() && this._textInput.applyNLResult(this._currentInterpretResponse.result);
            }, d.prototype.clearTermSelectionInternal = function() {
                this._textInput.clearTermHighlights();
            }, d.prototype.selectTermInternal = function() {
                var a = this._textInput.selection;
                return this._hasInterpretResponse() && !a.isUserRangeSelection && this._currentInterpretResponse.result.hasSuggestionsForTermSelection(a) ? (this._textInput.highlightSelectedTerm(), 
                void this.displayQueryResultInternal(!0, !0, a)) : void this.displayQueryResultInternal(!0, !0);
            }, d.prototype.clearInterpretResultInternal = function(b, c, d) {
                a.Tracing.verbose("QuestionBoxControl requested clearing the current Interpret result"), 
                this.clearBrowserHandler(), this.connectionGroup.bridge.clearInterpretResult(b, c, d), 
                this.stopAnswerQuestionReportingTimer();
            }, d.prototype.clearBrowserHandler = function() {
                this.connectionGroup.browserHandlerService && this.connectionGroup.browserHandlerService.clearBrowserLocation();
            }, d.prototype.clearClearInterpretResultTimerInternal = function() {
                window.clearTimeout(this._clearInterpretResultTimerId);
            }, d.prototype.clearInterpretResultInternalAfterTimeout = function() {
                var a = this;
                this.clearClearInterpretResultTimerInternal(), this._clearInterpretResultTimerId = window.setTimeout(function() {
                    a._hasInterpretResponse() && a.clearInterpretResultInternal(!1, !1, !0);
                }, d.ClearInterpretResultTimeoutInMilliseconds);
            }, d.prototype.updateBrowserLocationInternal = function() {
                this.connectionGroup.browserHandlerService && this._hasInterpretResponse() && this.connectionGroup.browserHandlerService.updateBrowserLocation(this._currentInterpretResponse);
            }, d.prototype.updateBrowserLocationInternalAfterTimeout = function() {
                if (this.connectionGroup.browserHandlerService && this._hasInterpretResponse()) {
                    var a = this._currentInterpretResponse;
                    this.connectionGroup.browserHandlerService.updateBrowserLocationAfterTimeout(a);
                }
            }, d.prototype.createAnswerQuestionActivity = function(b) {
                var c = this;
                this.stopAnswerQuestionReportingTimer();
                var d;
                if (b ? d = b.createChildActivity(23, b.reporting) : (d = this.connectionGroup.telemetryService.createNewActivity(23, null, !1), 
                this.startAnswerQuestionReportingTimer()), !a.StringExtensions.isNullOrEmpty(this._telemetryHostName)) {
                    var e = new a.CorrelatedProperty("propertyBag", "serviceInstance=" + this._telemetryHostName);
                    d.addCorrelatedProperty(e);
                }
                return this._unreportedActivities.push(d), d.onChildAdded(function(b) {
                    c._unreportedActivities.length > 0 && b.parentActivityId === c._unreportedActivities[0].activityId ? c._unreportedActivities.push(b) : a.Tracing.verbose("Ignoring addition of child event to non-current answer question activity " + d.activityId);
                }), d.onChildCompleted(function(a) {
                    if (d.addCorrelatedProperties(a.correlatedProperties), 24 === a.activityType) {
                        if (1 === a.activityEndResult || 2 === a.activityEndResult) return;
                        c.endAnswerActivity(d, a);
                    } else 25 === a.activityType && c.endAnswerActivity(d, a);
                }), d;
            }, d.prototype.endAnswerActivity = function(a, b) {
                a.end(b.activityEndResult, b.error, Math.max(a.activityStartTime, b.activityEndTime));
            }, d.prototype.stopAnswerQuestionReportingTimer = function() {
                this._answerQuestionReportingTimerId && window.clearTimeout(this._answerQuestionReportingTimerId), 
                this._answerQuestionReportingTimerId = null, this._unreportedActivities = [];
            }, d.prototype.startAnswerQuestionReportingTimer = function() {
                var a = this;
                this.stopAnswerQuestionReportingTimer(), this._answerQuestionReportingTimerId = window.setTimeout(function() {
                    for (var b = 0, c = a._unreportedActivities.length; c > b; b++) a._unreportedActivities[b].reporting = !0;
                }, d.AnswerQuestionReportingTimeout);
            }, d.prototype.localize = function(a, b) {
                return this._getLocalizedResource ? this._getLocalizedResource(a) : b;
            }, d.prototype.updateLoadingMessage = function(a, b) {
                switch (a) {
                  case 0:
                    this._textInput.placeholder = "", this._loadingActivity && (this._loadingActivity.end(0), 
                    this._loadingActivity = null);
                    break;

                  case 1:
                    this._textInput.placeholder = this.placeholderOnInit, this._loadingActivity || (this._loadingActivity = this.connectionGroup.telemetryService.createNewActivity(26, null, !0));
                    break;

                  case 2:
                    this._textInput.placeholder = this.placeholder, this._loadingActivity && (b || (b = 0), 
                    this._loadingActivity.end(b), this._loadingActivity = null), this._isLoadingModelsNotificationDisplayed && (this.connectionGroup.bridge.hideNotification(d.ModelsLoadingNotificationId), 
                    this._isLoadingModelsNotificationDisplayed = !1);
                }
            }, d.QuestionBoxControlHtml = "<div class='infonav-questionBoxContainer'><div class='infonav-questionBoxControl'></div><div class='infonav-caretContainer'><div class='infonav-caretBorderTop'></div><div class='infonav-caret'></div></div></div>", 
            d.QuestionBoxControlSelector = ".infonav-questionBoxControl", d.QuestionBoxCaretContainerSelector = ".infonav-caretContainer", 
            d.QuestionBoxCaretSelector = ".infonav-caret", d.ClearInterpretResultTimeoutInMilliseconds = 2e3, 
            d.AutocompleteOptionName = "autocomplete", d.AnswerQuestionReportingTimeout = 15e3, 
            d.SelectedIconClass = "selected", d.ModelsLoadingNotificationId = "d9b1a914-b00f-4db0-9882-c7b8420fe478", 
            d.UserCopyResultUrlToClipboardNotificationId = "13425f9b-7d9b-4edd-ba04-c1c179ff9460", 
            d.ProbeInProgressNotificationDelayMs = 5e3, d.InternalTextChangedEventName = "TextChanged", 
            d;
        }(a.InfoNavConnectedClientControl);
        b.QuestionBoxControl = d;
    }(b = a.QuestionBox || (a.QuestionBox = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c() {}
            return c.staticConstructor = function() {
                c.definition = new a.StateMachineDefinition(), c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.BeginSessionEventName, b.Constants.TypingStateName, [ b.QuestionBoxControl.hasInteraction ]), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.ClearQueryEventName, b.Constants.TypingStateName, c.clearQueryEventActions), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.ResultReadyEventName, b.Constants.InactiveStateName, c.inactiveStateResultReadyActions), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.ResultChangedEventName, b.Constants.InactiveStateName, c.inactiveStateResultChangedActions), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.InterpretFailedEventName, b.Constants.InactiveStateName, [ b.QuestionBoxControl.clearClearInterpretResultTimer ]), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.BeginModelingSessionEventName, b.Constants.ModelingStateName, c.beginModelingSessionActions), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.TextSuggestionConfirmedEventName, b.Constants.TypingStateName, c.textSuggestionConfirmedActions), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.TextSuggestionSelectedEventName, b.Constants.TypingStateName, [ b.QuestionBoxControl.setInputTextToSelectedSuggestion ]), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.SuggestionItemConfirmedEventName, b.Constants.TypingStateName, c.suggestionItemConfirmedActions), 
                c.definition.addTransition(b.Constants.InactiveStateName, b.Constants.TextChangedEventName, b.Constants.InactiveStateName, c.textChangedEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.TextChangedEventName, b.Constants.TypingStateName, c.textChangedEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.ClearQueryEventName, b.Constants.TypingStateName, c.clearQueryEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.CompleteQueryEventName, b.Constants.TypingStateName, c.completeQueryEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.NavigateUpEventName, b.Constants.BrowseSuggestionsStateName, c.navigateUpEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.NavigateDownEventName, b.Constants.BrowseSuggestionsStateName, c.navigateDownEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.SuggestionItemConfirmedEventName, b.Constants.TypingStateName, c.suggestionItemConfirmedActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.TextSuggestionConfirmedEventName, b.Constants.TermSelectionStateName, c.textSuggestionConfirmedActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.EndSessionEventName, b.Constants.InactiveStateName, c.endSessionEventTypingActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.TermSelectedEventName, b.Constants.TermSelectionStateName, c.termSelectedActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.ResultReadyEventName, b.Constants.TypingStateName, c.queryResultReadyEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.ResultChangedEventName, b.Constants.TypingStateName, c.resultChangedEventActions), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.InterpretFailedEventName, b.Constants.TypingStateName, [ b.QuestionBoxControl.clearClearInterpretResultTimer ]), 
                c.definition.addTransition(b.Constants.TypingStateName, b.Constants.BeginModelingSessionEventName, b.Constants.ModelingStateName, c.beginModelingSessionActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.ClearQueryEventName, b.Constants.TypingStateName, c.clearQueryEventActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.TextChangedEventName, b.Constants.TypingStateName, c.textChangedEventActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.TermSelectedEventName, b.Constants.TypingStateName, c.termSelectedActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.ConfirmQueryEventName, b.Constants.TermSelectionStateName, c.confirmQueryEventActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.SuggestionItemConfirmedEventName, b.Constants.TypingStateName, c.suggestionItemConfirmedActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.TextSuggestionConfirmedEventName, b.Constants.TermSelectionStateName, c.textSuggestionConfirmedActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.TextSuggestionSelectedEventName, b.Constants.BrowseSuggestionsStateName, [ b.QuestionBoxControl.setInputTextToSelectedSuggestion ]), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.NavigateUpEventName, b.Constants.BrowseSuggestionsStateName, [ b.QuestionBoxControl.suggestionList_SelectPrevious ]), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.NavigateDownEventName, b.Constants.BrowseSuggestionsStateName, [ b.QuestionBoxControl.suggestionList_SelectNext ]), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.NavigateOutOfBoundsEventName, b.Constants.TypingStateName, c.navigateOutOfBoundsEventActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.EndSessionEventName, b.Constants.InactiveStateName, c.endSessionBrowseSuggestionsEventActions), 
                c.definition.addTransition(b.Constants.BrowseSuggestionsStateName, b.Constants.BeginModelingSessionEventName, b.Constants.ModelingStateName, c.beginModelingSessionActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.ClearQueryEventName, b.Constants.TypingStateName, c.clearQueryEventActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.TextChangedEventName, b.Constants.TypingStateName, c.textChangedEventActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.TermSelectedEventName, b.Constants.TypingStateName, c.termSelectedActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.NavigateUpEventName, b.Constants.BrowseSuggestionsStateName, c.navigateUpEventActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.NavigateDownEventName, b.Constants.BrowseSuggestionsStateName, c.navigateDownEventActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.TextSuggestionSelectedEventName, b.Constants.TypingStateName, [ b.QuestionBoxControl.setInputTextToSelectedSuggestion ]), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.TextSuggestionConfirmedEventName, b.Constants.TypingStateName, c.textSuggestionConfirmedActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.SuggestionItemConfirmedEventName, b.Constants.TypingStateName, c.suggestionItemConfirmedActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.EndSessionEventName, b.Constants.InactiveStateName, c.endSessionBrowseSuggestionsEventActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.BeginModelingSessionEventName, b.Constants.ModelingStateName, c.beginModelingSessionActions), 
                c.definition.addTransition(b.Constants.TermSelectionStateName, b.Constants.ResultReadyEventName, b.Constants.TypingStateName, c.termSelectionQueryResultReadyEventActions), 
                c.definition.addTransition(b.Constants.ModelingStateName, b.Constants.ResultReadyEventName, b.Constants.ModelingStateName, c.modelingResultReadyEventActions), 
                c.definition.addTransition(b.Constants.ModelingStateName, b.Constants.TermSelectedEventName, b.Constants.ModelingStateName, [ b.QuestionBoxControl.notifyTermSelection ]), 
                c.definition.addTransition(b.Constants.ModelingStateName, b.Constants.EndModelingSessionEventName, b.Constants.TypingStateName, c.endModelingSessionActions), 
                c.definition.addTransition(b.Constants.ModelingStateName, b.Constants.TextChangedEventName, b.Constants.TypingStateName, c.modelingTextChangedEventActions), 
                c.definition.addTransition(b.Constants.ModelingStateName, b.Constants.ClearQueryEventName, b.Constants.TypingStateName, c.modelingClearQueryEventActions);
            }, c.definition = null, c.clearQueryEventActions = [ b.QuestionBoxControl.textInput_Clear, b.QuestionBoxControl.suggestionList_Clear, b.QuestionBoxControl.clearInterpretResult ], 
            c.completeQueryEventActions = [ b.QuestionBoxControl.textInput_CompleteInput, b.QuestionBoxControl.interpret, b.QuestionBoxControl.userUtteranceConfirmed ], 
            c.inactiveStateResultReadyActions = [ b.QuestionBoxControl.updateResult, b.QuestionBoxControl.updateBrowserLocationAfterTimeout, b.QuestionBoxControl.clearClearInterpretResultTimer ], 
            c.inactiveStateResultChangedActions = [ b.QuestionBoxControl.updateResult, b.QuestionBoxControl.clearClearInterpretResultTimer ], 
            c.textChangedEventActions = [ b.QuestionBoxControl.clearUserInputBuffer, b.QuestionBoxControl.interpret, b.QuestionBoxControl.textInput_ClearTermSelection, b.QuestionBoxControl.clearInterpretResultAfterTimeout ], 
            c.navigateUpEventActions = [ b.QuestionBoxControl.storeUserInput, b.QuestionBoxControl.suggestionList_SelectPrevious ], 
            c.navigateDownEventActions = [ b.QuestionBoxControl.storeUserInput, b.QuestionBoxControl.suggestionList_SelectNext ], 
            c.suggestionItemConfirmedActions = [ b.QuestionBoxControl.processSuggestion ], c.textSuggestionConfirmedActions = [ b.QuestionBoxControl.setInputTextToSelectedSuggestion ].concat(c.textChangedEventActions), 
            c.endSessionEventActions = [ b.QuestionBoxControl.userUtteranceConfirmed, b.QuestionBoxControl.textInput_ClearTermSelection, b.QuestionBoxControl.suggestionList_ClearPreserveRestatement, b.QuestionBoxControl.textInput_ShowAutoCompletion, b.QuestionBoxControl.updateBrowserLocation ], 
            c.endSessionBrowseSuggestionsEventActions = [ b.QuestionBoxControl.restoreUserInput ].concat(c.endSessionEventActions), 
            c.endSessionEventTypingActions = [ b.QuestionBoxControl.textInput_Blur ].concat(c.endSessionEventActions), 
            c.queryResultReadyEventActions = [ b.QuestionBoxControl.displayQueryResult, b.QuestionBoxControl.updateBrowserLocationAfterTimeout, b.QuestionBoxControl.clearClearInterpretResultTimer ], 
            c.termSelectionQueryResultReadyEventActions = c.queryResultReadyEventActions.concat(b.QuestionBoxControl.updateTermSelection), 
            c.modelingResultReadyEventActions = [ b.QuestionBoxControl.displayModelingResult ], 
            c.resultChangedEventActions = [ b.QuestionBoxControl.displayResult, b.QuestionBoxControl.clearClearInterpretResultTimer ], 
            c.confirmQueryEventActions = c.textChangedEventActions.concat([ b.QuestionBoxControl.userUtteranceConfirmed ]), 
            c.navigateOutOfBoundsEventActions = [ b.QuestionBoxControl.suggestionList_ClearSelection, b.QuestionBoxControl.restoreUserInput ], 
            c.termSelectedActions = [ b.QuestionBoxControl.notifyTermSelection, b.QuestionBoxControl.textInput_ClearTermSelection, b.QuestionBoxControl.selectTerm ], 
            c.beginModelingSessionActions = [ b.QuestionBoxControl.suggestionList_Clear ], c.endModelingSessionActions = [ b.QuestionBoxControl.textInput_Focus ], 
            c.exitModelingModeActions = [ b.QuestionBoxControl.exitModelingMode ], c.modelingTextChangedEventActions = c.exitModelingModeActions.concat(c.textChangedEventActions), 
            c.modelingClearQueryEventActions = c.exitModelingModeActions.concat(c.clearQueryEventActions), 
            c;
        }();
        b.QuestionBoxStateMachine = c, c.staticConstructor();
    }(b = a.QuestionBox || (a.QuestionBox = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function a(a, b, c) {
                this.totalSuggestionsPixelOffset = 0, this.animationDuration = 0, this.numberOfSuggestions = 0, 
                this.animationDuration = b, this.totalSuggestionsPixelOffset = a, this.numberOfSuggestions = c;
            }
            return a;
        }();
        a.QuestionBoxSuggestionsDisplayedEventArgs = b;
    }(b = a.QuestionBox || (a.QuestionBox = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(b) {
        !function(a) {
            a[a.Text = 0] = "Text", a[a.RuntimeModelingAction = 1] = "RuntimeModelingAction";
        }(b.SuggestionType || (b.SuggestionType = {}));
        var c = (b.SuggestionType, function(c) {
            function d(b, e, f) {
                var g = this;
                c.call(this, b, f), this._controlRoot = null, this._suggestionsHostInnerLayout = null, 
                this._suggestionsList = null, this._questionBoxHost = null, this._currentSelectionIndex = 0, 
                this._currentSelectionType = null, this._currentSelectionText = null;
                a.Utility.generateGuid() + "_suggestionsHost";
                this._questionBoxHost = e;
                var h = this._controlRoot = $(d.SuggestionsListControlHtml);
                b.append(h), this._suggestionsHostInnerLayout = h.find(d.SuggestionsHostInnerLayoutSelector), 
                this._suggestionsList = h.find(d.SuggestionsListSelector), a.InfoNavApp.current.add_resize(function() {
                    g.updateControlPosition();
                });
            }
            return __extends(d, c), Object.defineProperty(d.prototype, "currentSelectionType", {
                get: function() {
                    return this._currentSelectionType;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(d.prototype, "currentSelectionText", {
                get: function() {
                    return this._currentSelectionText;
                },
                enumerable: !0,
                configurable: !0
            }), d.prototype.add_interaction = function(a, c) {
                $(this).on(b.Constants.OnInteractionEventName, c, a);
            }, d.prototype.remove_interaction = function(a) {
                $(this).off(b.Constants.OnInteractionEventName, a);
            }, d.prototype.displaySuggestions = function(b, c, e, f, g) {
                var h = c ? c.result : null, i = h && !a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(h.restatement);
                this._suggestionsList.empty(), i && this.renderRestatement(h);
                var j = new Array();
                if (e) j = h.getTermSuggestions(e); else {
                    if (!g && this.connectionGroup.featuredQuestions) {
                        var k = h ? this.connectionGroup.getFeaturedQuestions(h.databaseName) : this.connectionGroup.featuredQuestions;
                        g = k.map(function(a) {
                            return a.Utterance;
                        });
                    }
                    if (g) {
                        var l = this.generateCompletionSuggestionsFromStrings(g, b);
                        j = j.concat(l);
                    }
                    if (h) {
                        var m = h.getCompletionSuggestions().filter(function(a) {
                            return !j.some(function(b) {
                                return b.text.toLowerCase === a.text.toLowerCase;
                            });
                        });
                        j = j.concat(m);
                    }
                }
                f || (this.renderSuggestionItems(j), e && this.renderTermActions(h, e)), i || !f && j.length > 0 ? (this._currentSelectionIndex = 0, 
                this._suggestionsList.find("li[" + d.ListItemDataIdAttribute + "]").on(a.DOMConstants.mouseEnterEventName, this, this.onSuggestionsListItemMouseEnter).on(a.DOMConstants.mouseDownEventName, this, this.onSuggestionMouseDown), 
                this.expandSuggestionsList()) : this.collapseSuggestionsList(!1);
            }, d.prototype.clear = function(a) {
                this.clearSelection(), this.collapseSuggestionsList(a);
            }, d.prototype.clearSelection = function() {
                this._currentSelectionIndex = 0, this._currentSelectionText = "";
            }, d.prototype.selectPrevious = function() {
                var a = this._currentSelectionIndex - 1;
                -1 === a && (a = this._suggestionsList.children("[" + d.ListItemDataIdAttribute + "]").length), 
                this.attemptSelection(a);
            }, d.prototype.selectNext = function() {
                this.attemptSelection(this._currentSelectionIndex + 1);
            }, d.prototype.generateCompletionSuggestionsFromStrings = function(b, c) {
                for (var d = new Array(), e = b.filter(function(a) {
                    return 0 === a.indexOf(c) && a.length > c.length;
                }), f = 0, g = e.length; g > f; f++) {
                    var h = new a.UISuggestionItem();
                    h.parts = [], h.parts.push({
                        text: c,
                        emphasize: !1
                    }), h.parts.push({
                        text: e[f].replace(c, ""),
                        emphasize: !0
                    }), d.push(h);
                }
                return d;
            }, d.prototype.renderRestatement = function(a) {
                var b = this._suggestionsList.find("li[" + d.ListItemDataIdAttribute + "]").length + 1, c = $("<li></li>");
                c.text(a.restatement), c.addClass(d.RestatementCssClass), d.AllowRestatementSelection ? c.attr(d.ListItemDataIdAttribute, b.toString()) : c.addClass(d.DisallowedListItemCssClass), 
                this._suggestionsList.append(c);
            }, d.prototype.renderSuggestionItems = function(a) {
                var b = this, c = this._suggestionsList.find("li[" + d.ListItemDataIdAttribute + "]").length + 1;
                a.length > 0 && this._suggestionsList.append(d.RestatementHorizontalRowBreak);
                var e = a.map(function(a, d) {
                    return b.createSuggestionItemElement(a, d + c);
                });
                this._suggestionsList.append(e.slice(0, d.MaxSuggestionItems));
            }, d.prototype.createSuggestionItemElement = function(a, b) {
                var c = $("<li></li>");
                c.attr(d.ListItemDataIdAttribute, b.toString());
                var e = a.parts.map(function(a) {
                    var b = $("<span/>").text(a.text);
                    return a.emphasize && b.addClass(d.SuggestedTermReplacementCssClass), b;
                });
                return c.append(e), c;
            }, d.prototype.renderTermActions = function(b, c) {
                var e = this._suggestionsList.find("li[" + d.ListItemDataIdAttribute + "]").length + 1;
                if (this.connectionGroup.isUserAdmin && this.connectionGroup.isRuntimeModelingEnabled && d.EnableRuntimeModeling === !0) {
                    this._suggestionsList.append(d.RestatementHorizontalRowBreak);
                    var f = b.getCompletedUtteranceAsTerms(), g = $("<li></li>"), h = $("<div></div>");
                    g.attr(d.ListItemDataIdAttribute, e.toString()), g.addClass(d.TermActionListItemCssClass), 
                    g.attr(d.ListItemDataTypeAttribute, d.TermActionItemType);
                    var i, j = f.slice(c.start, c.end + 1).join("");
                    c.isSingleTermSelection && b.unrecognizedTerms && b.unrecognizedTerms.indexOf(c.start) >= 0 ? i = a.Strings.modelingClarifyTermCommand : (i = a.Strings.modelingAddSynonymTermCommand, 
                    c.isUserRangeSelection && (j = c.userRangeText));
                    var k = i.split("{term}");
                    h.append("<span>" + k[0] + "</span>"), h.append("<span class='" + d.SuggestionTermTextCssClass + "'> " + j + " </span>"), 
                    h.append("<span>" + k[1] + "</span>"), h.addClass(d.TermActionCssClass), g.append(h), 
                    this._suggestionsList.append(g);
                }
            }, d.prototype.attemptSelection = function(c) {
                var e = this;
                this._suggestionsList.children().removeClass(d.ListItemSelectedCssClass);
                var f = this._suggestionsList.find("[" + d.ListItemDataIdAttribute + "='" + c + "']");
                if (f.length > 0) {
                    this._currentSelectionIndex = c;
                    var g = f.attr(d.ListItemDataTypeAttribute);
                    g === d.TermActionItemType ? this._currentSelectionType = 1 : (this._currentSelectionType = 0, 
                    this._currentSelectionText = f.text(), this.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.TextSuggestionSelectedEventName))), 
                    f.addClass(d.ListItemSelectedCssClass), window.setTimeout(function() {
                        return e.scrollSelectionIntoView(f);
                    }, 0);
                } else this._currentSelectionIndex = 0, this.scrollToTop(), this.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.NavigateOutOfBoundsEventName));
            }, d.prototype.scrollToTop = function() {
                this._suggestionsHostInnerLayout.scrollTop(0);
            }, d.prototype.scrollSelectionIntoView = function(a) {
                var b = a.offset(), c = a.outerHeight(), d = this._suggestionsHostInnerLayout, e = this._suggestionsHostInnerLayout.height(), f = d.offset(), g = b.top >= f.top, h = b.top + c <= e + f.top;
                if (!g || !h) {
                    var i = 0;
                    a.prevAll().each(function(a, b) {
                        i += $(b).outerHeight();
                    }), g ? h || d.scrollTop(i - e + c) : d.scrollTop(i);
                }
            }, d.prototype.updateControlPosition = function() {
                var b = this._questionBoxHost[0].offsetHeight, c = this._questionBoxHost[0].offsetWidth, d = this._questionBoxHost.position().top, e = this._questionBoxHost.position().left, f = parseInt(this._questionBoxHost.css(a.CssConstants.marginTopProperty)), g = parseFloat(this._questionBoxHost.css(a.CssConstants.borderBottomWidthProperty)) || 0;
                g = Math.ceil(g);
                var h = d + f + b - g;
                this._controlRoot.css(a.CssConstants.topProperty, h.toString() + a.CssConstants.pixelUnits), 
                this._controlRoot.css(a.CssConstants.leftProperty, e.toString() + a.CssConstants.pixelUnits), 
                this._controlRoot.css(a.CssConstants.widthProperty, c.toString() + a.CssConstants.pixelUnits);
            }, d.prototype.raiseOnInteractionEvent = function(a) {
                $(this).trigger(b.Constants.OnInteractionEventName, a);
            }, d.prototype.onSuggestionMouseDown = function(c) {
                c.preventDefault();
                var d = c.data;
                d.attemptSelection(d._currentSelectionIndex), d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.SuggestionItemConfirmedEventName));
            }, d.prototype.onSuggestionsListItemMouseEnter = function(a) {
                var b = a.data, c = $(a.currentTarget);
                if (!c.hasClass(d.DisallowedListItemCssClass)) {
                    b._suggestionsList.children().removeClass(d.ListItemSelectedCssClass);
                    var e = parseInt(c.attr(d.ListItemDataIdAttribute));
                    b._currentSelectionIndex = e, c.addClass(d.ListItemSelectedCssClass);
                }
            }, d.prototype.expandSuggestionsList = function() {
                var b = this._suggestionsList.children("li").length;
                if (b > 0) {
                    this.updateControlPosition(), this._controlRoot.css(a.CssConstants.displayProperty, a.CssConstants.blockValue);
                    var c = 0;
                    this._suggestionsList.children().each(function(a, b) {
                        return c += $(b).outerHeight(), a === d.MaxVisibleSuggestionItems ? !1 : void 0;
                    }), this.bridge && this.bridge.notifyQuestionBoxSuggestionsDisplayed(c, d.ExpandAnimationDuration, b), 
                    this._suggestionsHostInnerLayout.css(a.CssConstants.heightProperty, c.toString() + a.CssConstants.pixelUnits).css(a.CssConstants.opacityProperty, "1"), 
                    this.updateControlPosition();
                }
            }, d.prototype.collapseSuggestionsList = function(b) {
                var c = this._suggestionsList.find(a.Utility.createClassSelector(d.RestatementCssClass));
                c.text() && b ? (this._suggestionsList.children().not(a.Utility.createClassSelector(d.RestatementCssClass)).not(a.Utility.createClassSelector(d.RestatementSeparatorCssClass)).remove(), 
                this._suggestionsHostInnerLayout.css(a.CssConstants.heightProperty, this._suggestionsList.outerHeight())) : (this._suggestionsList.empty(), 
                this._suggestionsHostInnerLayout.css(a.CssConstants.heightProperty, a.CssConstants.zeroPixelValue), 
                this._controlRoot.css(a.CssConstants.displayProperty, a.CssConstants.noneValue)), 
                this.bridge && this.bridge.notifyQuestionBoxSuggestionsDisplayed(0, d.CollapseAnimationDuration, 0);
            }, d.EnableRuntimeModeling = !1, d.SuggestionsListControlHtml = "<div class='infonav-suggestionsHost'><div class='infonav-suggestionsHostInnerBorder'><div class='infonav-suggestionsHostInnerLayout'><ul class='infonav-suggestionsList'></ul></div></div><div class='infonav-caretContainer'><div class='infonav-caretBorderTop'></div><div class='infonav-caret'></div></div></div>", 
            d.RestatementRowItemHtml = '<div class="infonav-hr infonav-restatement_hr"/>', d.RestatementHorizontalRowBreak = "<div class='infonav-hr'/>", 
            d.ListItemSelectedCssClass = "infonav-listItemSelected", d.SuggestedTermReplacementCssClass = "infonav-suggestedTermReplacement", 
            d.RestatementCssClass = "infonav-restatement", d.TermActionListItemCssClass = "infonav-termActionListItem", 
            d.TermActionCssClass = "infonav-termAction", d.SuggestionTermTextCssClass = "infonav-termText", 
            d.SuggestionsHostInnerLayoutSelector = ".infonav-suggestionsHostInnerLayout", d.SuggestionsListSelector = ".infonav-suggestionsList", 
            d.DisallowedListItemCssClass = "disallowed", d.RestatementSeparatorCssClass = "infonav-restatement_hr", 
            d.ListItemDataTypeAttribute = "data-suggestionType", d.TermActionItemType = "termAction", 
            d.AllowRestatementSelection = !1, d.ListItemDataIdAttribute = "data-suggestionIndex", 
            d.MaxSuggestionItems = 50, d.MaxVisibleSuggestionItems = 4, d.ExpandAnimationDuration = 0, 
            d.CollapseAnimationDuration = 0, d;
        }(a.InfoNavConnectedClientControl));
        b.SuggestionListControl = c;
    }(b = a.QuestionBox || (a.QuestionBox = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c(a) {
                this._text = "", this._controlRoot = null, this._inputBox = null, this._inputAutoComplete = null, 
                this._inputRenderer = null, this._inputTermSelection = null, this._userInput = null, 
                this._terms = null, this._currentResult = null, this._inputRenderFormatTimeoutId = 0, 
                this._inputRenderFormatTimeoutMs = 250, this._hasUncommitedText = !0, this._supportsHtml5InputRendering = !1, 
                this._textSelectionTimeoutId = 0, this._controlRoot = $(c.TextInputControlHtml), 
                this._inputBox = this._controlRoot.find(c.InputBoxSelector), this._inputAutoComplete = this._controlRoot.find(c.InputAutoCompleteSelector), 
                this._inputRenderer = this._controlRoot.find(c.InputRendererSelector), this._inputTermSelection = this._controlRoot.find(c.InputTermSelectionSelector), 
                this._userInput = this._controlRoot.find(c.UserInputSelector), this._terms = [], 
                this.bindEvents(), a.append(this._controlRoot);
            }
            return Object.defineProperty(c.prototype, "isAutocompleteEnabled", {
                get: function() {
                    return this._isAutocompleteEnabled;
                },
                set: function(a) {
                    !a && this._isAutocompleteEnabled && this.clearAutoCompletion(), this._isAutocompleteEnabled = a;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(c.prototype, "text", {
                get: function() {
                    return this._text;
                },
                set: function(a) {
                    this.setInputText(a, !0);
                },
                enumerable: !0,
                configurable: !0
            }), c.prototype.setInputText = function(a, b) {
                var c = this;
                this._hasUncommitedText = !0, this._text = a, this._userInput.val(this._text), this.renderInputText(), 
                this.clearAutoCompletion(), b && this._text.length > 0 && window.setTimeout(function() {
                    c.setCursorPosition(c._text.length);
                }, 0);
            }, Object.defineProperty(c.prototype, "selection", {
                get: function() {
                    return this._selection;
                },
                enumerable: !0,
                configurable: !0
            }), c.prototype.completeInput = function() {
                this.isAutocompleteEnabled && (this.text = this._inputAutoComplete.text());
            }, c.prototype.clearAutoCompletion = function() {
                this._inputAutoComplete.empty(), this.setPlaceholderText();
            }, Object.defineProperty(c.prototype, "placeholder", {
                get: function() {
                    return this._placeholder;
                },
                set: function(a) {
                    this._placeholder = a, this.setPlaceholderText();
                },
                enumerable: !0,
                configurable: !0
            }), c.prototype.clearTermHighlights = function() {
                this._inputTermSelection.hide();
            }, c.prototype.highlightSelectedTerm = function() {
                if (this.clearTermHighlights(), !(a.BrowserUtility.getInternetExplorerVersion() > 0 && this.text.indexOf("	") >= 0)) {
                    for (var b = 0, c = 0, d = 0, e = 0, f = this._selection.start; f <= this._selection.end; f++) {
                        var g = this._inputRenderer.find("span[data-termindex='" + f + "']");
                        e += g.width(), g.length > 0 && f === this._selection.start && (b = g.position().top, 
                        c = g.position().left, d = g.height());
                    }
                    this._inputTermSelection.show().css(a.CssConstants.topProperty, b).css(a.CssConstants.leftProperty, c).css(a.CssConstants.widthProperty, e).css(a.CssConstants.heightProperty, d);
                }
            }, c.prototype.focus = function() {
                this.hasFocus() || this._userInput.focus();
            }, c.prototype.hasFocus = function() {
                return this._userInput.is(":focus");
            }, c.prototype.blur = function() {
                this._userInput.blur();
            }, c.prototype.clear = function() {
                a.Tracing.verbose("Question box text input was cleared"), this.text = "", this.clearAutoCompletion(), 
                this._userInput.empty(), this._inputRenderer.empty(), this._currentResult = null, 
                this.clearTermHighlights(), this._terms = [];
            }, c.prototype.add_interaction = function(a, c) {
                $(this).on(b.Constants.OnInteractionEventName, c, a);
            }, c.prototype.remove_interaction = function(a) {
                $(this).off(b.Constants.OnInteractionEventName, a);
            }, c.prototype.applyNLResult = function(b, c) {
                this._currentResult !== b && (this._currentResult = b, this._terms = b.getCompletedUtteranceAsTerms(), 
                a.Utility.isBoolean(c) && c && (this.setCompletionText(), this.showAutoCompletion()), 
                this.renderInputText(b), this.trackSelectionInternal(!1));
            }, c.prototype.updateTermSelection = function() {
                this.trackSelectionInternal(!0);
            }, c.prototype.showAutoCompletion = function() {
                this.isAutocompleteEnabled && this._inputAutoComplete.css(a.CssConstants.displayProperty, a.CssConstants.blockValue);
            }, c.prototype.hideAutoCompletion = function() {
                this.isAutocompleteEnabled && this._inputAutoComplete.css(a.CssConstants.displayProperty, a.CssConstants.noneValue);
            }, c.prototype.bindEvents = function() {
                var b = a.BrowserUtility.getInternetExplorerVersion(), d = a.Utility.isEventSupported(a.DOMConstants.inputEventName, this._userInput.get(0));
                d && (0 === b || b >= 10) ? (this._userInput.on(a.DOMConstants.inputEventName, this, c.onUserInputTextChanged), 
                this.enableHtml5InputRendering()) : this._userInput.on(a.DOMConstants.keyUpEventName, this, c.onUserInputTextChanged).on(a.DOMConstants.changeEventName, this, c.onUserInputTextChanged).on(a.DOMConstants.cutEventName, this, function(a) {
                    window.setTimeout(function() {
                        c.onUserInputTextChanged(a);
                    }, 10);
                }).on(a.DOMConstants.pasteEventName, this, function(a) {
                    window.setTimeout(function() {
                        c.onUserInputTextChanged(a);
                    }, 10);
                }), this._userInput.on(a.DOMConstants.keyDownEventName, this, c.onUserInputKeyPress).on(a.DOMConstants.keyUpEventName, this, c.trackSelection).on(a.DOMConstants.mouseClickEventName, this, c.trackSelection).on(a.DOMConstants.selectEventName, this, c.trackSelection).on(a.DOMConstants.focusInEventName, this, c.onUserInputFocusIn).on(a.DOMConstants.focusOutEventName, this, c.onTextInputFocusOut).on(a.DOMConstants.mouseClickEventName, this, c.selectUserInput);
            }, c.onUserInputFocusIn = function(c) {
                var d = c.data;
                d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.BeginSessionEventName));
            }, c.onTextInputFocusOut = function(c) {
                var d = c.data;
                d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.EndSessionEventName));
            }, c.onUserInputKeyPress = function(c) {
                var d = c.data;
                if (c.keyCode !== a.DOMConstants.altKeyCode && c.keyCode !== a.DOMConstants.ctrlKeyCode && c.keyCode !== a.DOMConstants.shiftKeyCode) {
                    var e = d.getSelectionEnd();
                    e !== d._userInput.val().length && d.clearAutoCompletion();
                    var f = !a.StringExtensions.isNullOrEmpty(d._inputRenderer.text()), g = c.keyCode;
                    if (g === a.DOMConstants.enterKeyCode) c.preventDefault(), d._hasUncommitedText ? (d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.ConfirmQueryEventName)), 
                    d._hasUncommitedText = !1) : d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.EndSessionEventName)); else if (g === a.DOMConstants.escKeyCode) a.Tracing.verbose("User initiated clearing of the current utterance via ESC key"), 
                    d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.ClearQueryEventName)); else if (g !== a.DOMConstants.tabKeyCode && g !== a.DOMConstants.rightArrowKeyCode || !f) g === a.DOMConstants.upArrowKeyCode && f ? (c.preventDefault(), 
                    d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.NavigateUpEventName))) : g === a.DOMConstants.downArrowKeyCode && f && (c.preventDefault(), 
                    d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.NavigateDownEventName))); else {
                        var h = d._inputAutoComplete.text();
                        h.length > 0 && (c.preventDefault(), d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.CompleteQueryEventName)));
                    }
                }
            }, c.onUserInputTextChanged = function(c) {
                var d = c.data;
                d.renderInputText(), d.setCompletionText(), d.setPlaceholderText();
                var e = d._userInput.val(), f = d.text !== e;
                f && (d._text = e, d._inputAutoComplete.text().indexOf(d._text) && d.clearAutoCompletion(), 
                d.text.length > 0 ? d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.TextChangedEventName)) : 0 === d.text.length && d.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.ClearQueryEventName)), 
                d._hasUncommitedText = !1);
            }, c.trackSelection = function(b) {
                var d = b.data, e = b.keyCode;
                (b.type === a.DOMConstants.mouseClickEventName || b.type === a.DOMConstants.selectEventName || b.type === a.DOMConstants.keyUpEventName && (e === a.DOMConstants.leftArrowKeyCode || e === a.DOMConstants.rightArrowKeyCode || e === a.DOMConstants.endKeyCode || e === a.DOMConstants.homeKeyCode)) && (window.clearTimeout(d._textSelectionTimeoutId), 
                d._textSelectionTimeoutId = window.setTimeout(function() {
                    d.trackSelectionInternal(!0, b);
                }, c.textSelectionTimeoutMs));
            }, c.prototype.trackSelectionInternal = function(c, d) {
                var e = this, f = 0, g = this.getSelectionStart(), h = this.getSelectionEnd();
                if (null === h || null === g) return void a.Tracing.warning("An invalid selection event was intercepted, the source event type was " + d.type);
                for (var i = g === h, j = [], k = 0; k < this._terms.length; k++) {
                    var l = this._terms[k];
                    l.trim().length > 0 && (i && h >= f && g <= f + l.length ? j.push(k) : !i && h > f && g < f + l.length && j.push(k)), 
                    f += l.length;
                }
                if (j.length > 0) {
                    if (this._selection = {}, this._selection.start = j[0], this._selection.end = j[j.length - 1], 
                    this._currentResult.suggestionItems) {
                        var m = this._currentResult.suggestionItems.filter(function(a) {
                            return a.TermStartIndex <= e._selection.end && e._selection.start <= a.TermEndIndex;
                        });
                        if (m.length > 0) {
                            var n = m.filter(function(a) {
                                return m[0].TermStartIndex === a.TermStartIndex && m[0].TermEndIndex === a.TermEndIndex;
                            });
                            n.length === m.length && (this._selection.start = m[0].TermStartIndex, this._selection.end = m[0].TermEndIndex);
                        }
                    }
                    this._selection.text = this._terms.slice(this._selection.start, this._selection.end + 1).join(""), 
                    this._selection.isUserRangeSelection = !i, this._selection.userRangeText = this._text.substring(g, h), 
                    this._selection.isSingleTermSelection = this._selection.start === this._selection.end, 
                    c && this.raiseOnInteractionEvent(new a.InteractionEventArgs(b.Constants.TermSelectedEventName));
                }
            }, c.prototype.getSelectionStart = function() {
                var b = this._userInput.get(0);
                try {
                    return b.selectionStart;
                } catch (c) {
                    return a.Tracing.error("Unable to retrieve selection end for text input box"), null;
                }
            }, c.prototype.getSelectionEnd = function() {
                var b = this._userInput.get(0);
                try {
                    return b.selectionEnd;
                } catch (c) {
                    return a.Tracing.error("Unable to retrieve selection end for text input box"), null;
                }
            }, c.prototype.setCursorPosition = function(a) {
                var b = this._userInput.get(0);
                b.selectionStart = b.selectionEnd = a;
            }, c.prototype.raiseOnInteractionEvent = function(a) {
                $(this).trigger(b.Constants.OnInteractionEventName, a);
            }, c.prototype.setCompletionText = function() {
                if (this.isAutocompleteEnabled) {
                    var b = this._currentResult;
                    this._inputAutoComplete.empty();
                    var c = this._userInput.val();
                    if (b && b.completedUtterance && b.completedUtterance.Text.length >= c.length && 0 === b.completedUtterance.Text.indexOf(c)) {
                        var d = b.completedUtterance.Text.substring(c.length);
                        this._inputAutoComplete.empty(), this._inputAutoComplete.append($("<span/>").text(c).css(a.CssConstants.opacityProperty, "0")), 
                        this._inputAutoComplete.append($("<span/>").text(d));
                    }
                }
            }, c.prototype.enableHtml5InputRendering = function() {
                this._supportsHtml5InputRendering = !0, this._userInput.addClass(c.userInputHtml5Class), 
                this._inputRenderer.addClass(c.inputRendererHtml5Class);
            }, c.prototype.renderInputText = function(b) {
                var d = this;
                if (b && b.completedUtterance) {
                    var e = b.getCompletedUtteranceAsTerms();
                    this._inputRenderer.empty();
                    for (var f = this._userInput.val(), g = 0; g < e.length; g++) {
                        var h = e[g], i = $("<span/>");
                        if (0 === f.indexOf(h) && (i.attr(c.TermIndexDataAttribute, g), b.unrecognizedTerms && -1 !== b.unrecognizedTerms.indexOf(g) && i.attr(c.UnrecognizedTermDataAttribute, "true"), 
                        i.text(h), this._inputRenderer.append(i), f = f.replace(h, "")), 0 === f.length) break;
                    }
                    if (f.length > 0) {
                        var j = $("<span/>");
                        j.addClass(c.RemainderInputCssClass), j.text(f), this._inputRenderer.append(j);
                    }
                    this._supportsHtml5InputRendering && (a.BrowserUtility.getInternetExplorerVersion() > 0 && f.indexOf("	") >= 0 ? (this._userInput.removeClass(c.userInputHtml5Class), 
                    this._inputRenderer.removeClass(c.inputRendererHtml5Class)) : this.enableHtml5InputRendering(), 
                    window.clearTimeout(this._inputRenderFormatTimeoutId), this._inputRenderFormatTimeoutId = window.setTimeout(function() {
                        d.formatRenderedText();
                    }, this._inputRenderFormatTimeoutMs));
                } else this._inputRenderer.text(this._userInput.val());
            }, c.prototype.formatRenderedText = function() {
                this._inputRenderer.find(c.UnrecognizedTermsSelector).addClass(c.UnrecognizedTermCssClass);
            }, c.prototype.setPlaceholderText = function() {
                var b = this, c = this._userInput.val(), d = this.placeholder;
                a.StringExtensions.isNullOrEmpty(c) && window.setTimeout(function() {
                    b._inputAutoComplete.empty(), b._inputBox.scrollLeft(0), b._inputAutoComplete.append($("<span/>").text(d));
                });
            }, c.selectUserInput = function(b) {
                var c = b.data;
                a.StringExtensions.isNullOrEmpty(c._userInput.val()) && c._userInput.select();
            }, c.TextInputControlHtml = "<div class='infonav-textInputControl'><div class='infonav-textInputBox'><div class='infonav-inputAutoComplete'></div><div class='infonav-inputTermSelection'></div><div class='infonav-inputRenderer'></div><input class='infonav-userInput' type='text' spellcheck='false' autocomplete='off' maxlength='500'></input></div></div>", 
            c.ControlRootSelector = ".infonav-textInputControl", c.InputBoxSelector = ".infonav-textInputBox", 
            c.InputAutoCompleteSelector = ".infonav-inputAutoComplete", c.InputRendererSelector = ".infonav-inputRenderer", 
            c.UserInputSelector = ".infonav-userInput", c.InputTermSelectionSelector = ".infonav-inputTermSelection", 
            c.TermIndexDataAttribute = "data-termindex", c.UnrecognizedTermDataAttribute = "data-unrecognizedterm", 
            c.UnrecognizedTermCssClass = "infonav-unrecognizedTerm", c.RemainderInputCssClass = "infonav-remainderInput", 
            c.UnrecognizedTermsSelector = "span[data-unrecognizedterm]", c.userInputHtml5Class = "infonav-userInputHTML5", 
            c.inputRendererHtml5Class = "infonav-inputRendererHTML5", c.textSelectionTimeoutMs = 20, 
            c;
        }();
        b.TextInputControl = c;
    }(b = a.QuestionBox || (a.QuestionBox = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b(b, c) {
            a.call(this, b), c && this.onClicked(c);
        }
        return __extends(b, a), b.prototype.onClicked = function(a) {
            this.element.on("click", a);
        }, Object.defineProperty(b.prototype, "isEnabled", {
            get: function() {
                return !this.element.is(":disabled");
            },
            set: function(a) {
                this.element.prop("disabled", !a);
            },
            enumerable: !0,
            configurable: !0
        }), b;
    }(a.Control);
    a.InputControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d, e) {
            d || (d = a.DomFactory.button()), b.call(this, d, e), this.element.attr("value", c);
        }
        return __extends(c, b), c.prototype.disableButton = function(a) {
            this.element.prop("disabled", !0), void 0 !== a && this.element.attr("value", a);
        }, c.prototype.enableButton = function(a) {
            this.element.prop("disabled", !1), void 0 !== a && this.element.attr("value", a);
        }, c;
    }(a.InputControl);
    a.Button = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d, e) {
            e || (e = a.DomFactory.img()), e.attr("src", c), e.attr("alt", d), b.call(this, e);
        }
        return __extends(c, b), c;
    }(a.Control);
    a.ImageControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d, e, f) {
            if (f || (f = a.DomFactory.select()), b.call(this, f), c && this.addOption(""), 
            d) for (var g = 0, h = d.length; h > g; g++) this.addOption(d[g]);
            e && this.setSelected(e), f.change(this.onChange.bind(this));
        }
        return __extends(c, b), c.prototype.addOptions = function(a, b, c) {
            for (var d = 0, e = a.length; e > d; ++d) this.addOption(a[d], b[d], c);
        }, c.prototype.addOption = function(a, b, d) {
            void 0 === d && (d = !0);
            var e = $("<option></option>");
            e.attr("value", a), e.text(a), d && e.data(c.SelectDataItemKey, b), e.data(c.SelectIsOptionValidKey, d), 
            this.element.append(e);
        }, c.prototype.getSelectedItem = function() {
            return this.element.find(":selected");
        }, c.prototype.getSelectedItemData = function() {
            return c.getOptionData(this.element.find(":selected"));
        }, c.getOptionData = function(a) {
            return a.data(c.SelectDataItemKey);
        }, c.prototype.isSelectedOptionValid = function() {
            return this.getSelectedItem().data(c.SelectIsOptionValidKey);
        }, c.prototype.filterOptions = function(a) {
            return this.element.find("option").filter(function() {
                return a($(this));
            });
        }, c.prototype.setSelected = function(a) {
            this.filterOptions(function(b) {
                return b.text() === a;
            }).prop("selected", !0), this.onChange();
        }, c.prototype.setSelectedByData = function(a) {
            this.filterOptions(function(b) {
                return c.getOptionData(b) === a;
            }).prop("selected", !0), this.onChange();
        }, c.prototype.clear = function() {
            this.element.find("option").remove();
        }, c.prototype.markSelectInError = function() {
            this.element.addClass(c.ErrorSelectClassName);
        }, c.prototype.unmarkSelectInError = function() {
            this.element.removeClass(c.ErrorSelectClassName);
        }, c.prototype.onChange = function() {
            this.isSelectedOptionValid() ? this.unmarkSelectInError() : this.markSelectInError();
        }, c.SelectDataItemKey = "SelectDataItemKey", c.SelectIsOptionValidKey = "IsSelectOptionValidKey", 
        c.ErrorSelectClassName = "errorSelect", c;
    }(a.Control);
    a.Select = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(a) {
        a[a.Enabled = 0] = "Enabled", a[a.TemporarilyDisabled = 1] = "TemporarilyDisabled";
    }(b || (b = {}));
    var c = function(b) {
        function c(c, d) {
            d || (d = a.DomFactory.textBox()), b.call(this, d), c && (this.text = c);
        }
        return __extends(c, b), c.prototype.attachDataToInput = function(a) {
            this.element.data(c.TextBoxDataItemKey, a);
        }, c.getAttachedData = function(a) {
            return a.data(c.TextBoxDataItemKey);
        }, c.prototype.getAttachedData = function() {
            return this.element.data(c.TextBoxDataItemKey);
        }, Object.defineProperty(c.prototype, "text", {
            get: function() {
                return this.element.val();
            },
            set: function(a) {
                this.element.val(a);
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.clear = function() {
            this.text = "";
        }, c.TextBoxDataItemKey = "TextBoxDataItemKey", c.ExtraScrollBuffer = 1e3, c;
    }(a.InputControl);
    a.TextBox = c;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(d, e, f) {
            f || (f = a.DomFactory.div().addClass("radioGroup")), b.call(this, f), f = this.element, 
            this._radioGroupName = d;
            for (var g = "", h = 0; h < e.length; h++) {
                var i = c.RadioInputHtml.replace("%VALUE%", e[h]);
                i = i.replace("%TEXT%", e[h]), i = i.replace("%GRPNAME%", d), g += i;
            }
            f.append($(g));
        }
        return __extends(c, b), c.RadioInputHtml = '<input type="radio" name="%GRPNAME%" value="%VALUE%" checked><label for = "no">%TEXT%</label><br>', 
        c;
    }(a.Control);
    a.RadioGroup = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b(c, d, e) {
            e || (e = $('<li class="group accordionItemGroup"><div class="accordionHeader"></div><div class="accordionContent"></div></li>')), 
            a.call(this, e), e.find(b.AccordionItemHeaderSelector).append(c), e.find(b.AccordionItemContentSelector).append(d);
        }
        return __extends(b, a), b.AccordionItemHeaderSelector = ".accordionHeader", b.AccordionItemContentSelector = ".accordionContent", 
        b.AccordionItemGroupSelector = ".accordionItemGroup", b;
    }(a.Control);
    a.AccordionItem = b;
    var c = function(b) {
        function c(d, e, f) {
            if (void 0 === e && (e = !0), f || (f = a.DomFactory.ul().addClass(c.AccordionControlClassName)), 
            b.call(this, f), d) for (var g = 0; g < d.length; g++) f.append(d[g].element);
            this._autoSort = e, this.initializeAccordion();
        }
        return __extends(c, b), c.prototype.initializeAccordion = function() {
            this._autoSort && this.sort(), this.element.accordion({
                header: "> li > div.accordionHeader",
                collapsible: !0,
                icons: null,
                heightStyle: "content",
                beforeActivate: function(a, b) {
                    b.newHeader.find("span").addClass("accordionHeaderIconnActive"), b.oldHeader.find("span").removeClass("accordionHeaderIconActive");
                    var d = b.oldPanel.find(".accordionChangeListener"), e = b.newPanel.find(".accordionChangeListener"), f = d.length > 0 ? d.data(c.AccordionChangeListenerKey) : null, g = e.length > 0 ? e.data(c.AccordionChangeListenerKey) : null;
                    f && f.accordionItemClosing(), g && g.accordionItemOpening(), b.newHeader.trigger(c.AccordionItemClickedEventName);
                },
                activate: function(a, b) {
                    c.autoScrollItemIntoView(b.newHeader, b.newPanel);
                },
                animate: !1,
                active: !1
            });
        }, c.prototype.scrollToTop = function(a) {
            var b = this.element.closest(c.AccordionScrollableAreaClassSelector);
            0 == b.scrollTop() ? a && a() : b.animate({
                scrollTop: 0
            }, c.AnimationDuration, a);
        }, c.autoScrollItemIntoView = function(a, b) {
            if (a.length > 0) if ("none" !== a.css("display")) {
                var d = a.closest(c.AccordionScrollableAreaClassSelector);
                if (d.length > 0) {
                    var e = d.scrollTop(), f = a.position().top, g = d.innerHeight(), h = a.outerHeight(!0) + b.outerHeight(!0) + c.ItemHeightOffSet;
                    if (f + h > g) {
                        var i = e + f + h - g;
                        i > e + f && (i = e + f), d.animate({
                            scrollTop: i
                        });
                    }
                }
            } else {
                var d = b.closest(c.AccordionScrollableAreaClassSelector);
                if (d.length > 0) {
                    var e = d.scrollTop(), f = b.position().top, g = d.innerHeight(), h = b.outerHeight(!0) + c.ItemHeightOffSet;
                    if (f + h > g) {
                        var i = e + f + h - g;
                        i > e + f && (i = e + f), d.animate({
                            scrollTop: i
                        });
                    }
                }
            }
        }, c.prototype.refresh = function() {
            this._autoSort && this.sort(), this.element.accordion("refresh");
        }, c.prototype.addItem = function(a) {
            this.element.prepend(a.element), this.refresh(), a.element.fadeOut(c.AnimationDuration).fadeIn(c.AnimationDuration);
        }, c.prototype.collapseAllItems = function() {
            this.element.find(".ui-accordion-header-active").click();
        }, c.prototype.sort = function() {
            var a = this.element.find("li").get();
            a.sort(function(a, b) {
                var c = $(a).find("div.accordionHeader").text().toLowerCase(), d = $(b).find("div.accordionHeader").text().toLowerCase();
                return d > c ? -1 : c > d ? 1 : 0;
            });
            var b = this.element;
            $.each(a, function(a, c) {
                b.append(c);
            });
        }, c.AccordionControlSelector = ".accordionControl", c.AccordionControlClassName = "accordionControl", 
        c.AccordionChangeListenerKey = "AccordionChangeListenerKey", c.AccordionItemClickedEventName = "AccordionItemClickedEventName", 
        c.AccordionScrollableAreaClassName = "AccordionScrollableArea", c.AccordionScrollableAreaClassSelector = ".AccordionScrollableArea", 
        c.AnimationDuration = 250, c.EaseInOutQuadEasingFuctionName = "easeInOutQuad", c.ItemHeightOffSet = 1, 
        c;
    }(a.Control);
    a.AccordionControl = c;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d, e, f) {
            b.call(this, e), this._contentFrameHost = null, this._expanderBtn = null, this._paneCaptionTextElem = null, 
            this._name = c, this.initialize(), this.content = f;
            var g = this.element.width() + parseInt(this.element.css(a.CssConstants.rightProperty));
            this.element.width(d), this._collapsedWidth = g - d, this.element.css(a.CssConstants.rightProperty, this._collapsedWidth);
        }
        return __extends(c, b), c.prototype.initialize = function() {
            var b = this;
            this.element.addClass("collapsiblePaneControl"), this.element.append($(c.InnerLayoutHtml.replace("{panePulloutText}", this._name))), 
            this._contentFrameHost = this.element.find(".contentFrameHost"), this._expanderBtn = this.element.find(".expanderBtn"), 
            this._paneHandle = this.element.find(".paneHandle"), this._paneCaptionTextElem = this.element.find(".paneCaption .innerText"), 
            this._paneHandle.on(a.DOMConstants.mouseClickEventName, this, function(a) {
                return b.onExpanderBtnClick(a);
            }), this._paneHandle.css(a.CssConstants.topProperty, this._contentFrameHost.height() / 2), 
            this.element.on(c.CollapsePaneEventName, function() {
                return b.collapse();
            }), this.show();
        }, Object.defineProperty(c.prototype, "content", {
            set: function(a) {
                this._contentFrameHost.empty(), this._contentFrameHost.append(a);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isExpanded", {
            get: function() {
                return this.element.hasClass(c.ExpandedClassName);
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.expand = function() {
            this.isExpanded || this.toggleExpansionState();
        }, c.prototype.collapse = function() {
            this.isExpanded && this.toggleExpansionState();
        }, c.prototype.registerPaneExpandingEvent = function(a) {
            this._expandPaneEvent = a;
        }, c.prototype.registerPaneCollapsingEvent = function(a) {
            this._collapsePaneEvent = a;
        }, c.prototype.toggleExpansionState = function() {
            this.isExpanded ? this.element.css(a.CssConstants.rightProperty, this._collapsedWidth) : this.element.css(a.CssConstants.rightProperty, 0), 
            this.element.toggleClass(c.ExpandedClassName);
        }, c.prototype.onExpanderBtnClick = function() {
            this.toggleExpansionState();
        }, c.CollapsePaneEventName = "CollapsePaneEvent", c.InnerLayoutHtml = '<div class="innerLayout"><div class="paneHandle"><div class = "expanderBtn"></div></div><div class="paneCaption"><div class="innerText"></div></div><div class="contentFrameHost"></div></div>', 
        c.ExpandedClassName = "expanded", c;
    }(a.Control);
    a.CollapsiblePaneControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(a, d) {
            d || (d = $(c.DefaultHtml)), b.call(this, d), this.initializeControls(), this.bindEvents(), 
            this._primaryInput.attr("placeholder", a);
        }
        return __extends(c, b), c.prototype.showSpinner = function() {
            this._spinner.show();
        }, c.prototype.hideSpinner = function() {
            this._spinner.hide();
        }, Object.defineProperty(c.prototype, "text", {
            get: function() {
                return this._primaryInput.val();
            },
            set: function(a) {
                this._primaryInput.val(a);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "left", {
            get: function() {
                return this._primaryInput.scrollLeft();
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.updateSuggestions = function(a) {
            this.clearSuggestions(), a.length > 0 && (this._suggestionBox.show().append(a), 
            this._suggestionBox.children().addClass(c.SuggestionItemClassName));
        }, c.prototype.clearSuggestions = function() {
            this._suggestionBox.empty().hide();
        }, c.prototype.calculateLengthOfText = function(a) {
            return this._textMeasurer.text(a).width();
        }, c.prototype.underlineTerms = function() {}, c.prototype.clear = function() {
            this._primaryInput.val(""), this.clearSuggestions(), this.hideSpinner();
        }, c.prototype.initializeControls = function() {
            var a = this.element;
            this._primaryInput = a.find(".primaryInput"), this._textMeasurer = a.find(".textMeasurer"), 
            this._underlineRenderer = a.find(".underlineRenderer"), this._suggestionBox = a.find(c.SuggestionBoxSelector), 
            this._spinner = a.find(".spinner"), this.hideSpinner();
        }, c.prototype.bindEvents = function() {
            var b = this;
            this.element.focusout(this, function() {
                return b.onFocusOut();
            }), this._primaryInput.on("propertychange keydown input paste", function(a) {
                return b.onKeyPress(a);
            }), this._suggestionBox.on(a.DOMConstants.mouseDownEventName, c.SuggestionItemSelector, function(a) {
                return b.onSuggestionItemClick(a);
            }), this._suggestionBox.on(a.DOMConstants.mouseOverEventName, c.SuggestionItemSelector, function(a) {
                return b.onSuggestionHoverIn(a);
            }), this._suggestionBox.on(a.DOMConstants.mouseOutEventName, c.SuggestionItemSelector, function(a) {
                return b.onSuggestionHoverOut(a);
            });
        }, c.prototype.onSuggestionItemClick = function(a) {
            this.updateSelection(this.element.find(c.SelectedItemSelector), $(a.currentTarget)), 
            this.onSuggestionSelected(a);
        }, c.prototype.getCaretPosition = function() {
            var a = this._primaryInput.get(0), b = 0;
            return (a.selectionStart || "0" == a.selectionStart) && (b = a.selectionStart), 
            b;
        }, Object.defineProperty(c.prototype, "suggestionsCount", {
            get: function() {
                return this.element.find(c.SuggestionItemSelector).length;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.focus = function() {
            this._primaryInput.focus();
        }, c.prototype.onSuggestionHoverIn = function(a) {
            this.updateSelection(this.element.find(c.SelectedItemSelector), $(a.currentTarget));
        }, c.prototype.onSuggestionHoverOut = function() {
            this.updateSelection(this.element.find(c.SelectedItemSelector), null);
        }, c.prototype.onSuggestionSelected = function(a) {
            var b = this.element.find(c.SelectedItemSelector);
            return b.length > 0 ? (b.trigger(c.IntelliInputboxSuggestionItemSelectedEventName, [ a, b ]), 
            !0) : !1;
        }, c.prototype.onKeyPress = function(b) {
            var d, e = b.keyCode;
            switch (e) {
              case a.DOMConstants.downArrowKeyCode:
                d = this._suggestionBox.find(c.SelectedItemSelector);
                var f;
                f = d.length ? d.next() : this._suggestionBox.find(c.SuggestionItemSelector).first(), 
                this.updateSelection(d, f), b.preventDefault();
                break;

              case a.DOMConstants.upArrowKeyCode:
                d = this._suggestionBox.find(c.SelectedItemSelector);
                var f;
                f = d.length ? d.prev() : this._suggestionBox.find(c.SuggestionItemSelector).last(), 
                this.updateSelection(d, f), b.preventDefault();
                break;

              case a.DOMConstants.tabKeyCode:
                return b.preventDefault(), void (this.onSuggestionSelected(b) || this.element.trigger(c.IntelliInputboxTabPressedEventName));

              case a.DOMConstants.enterKeyCode:
                return void (this.onSuggestionSelected(b) ? b.preventDefault() : this._suggestionBox.is(a.JQueryConstants.VisibleSelector) && (this.hideSuggestions(), 
                b.preventDefault()));
            }
            this.element.trigger(c.IntelliInputboxUpdateEventName, b);
        }, c.prototype.updateSelection = function(a, b) {
            a && a.length && a.removeClass(c.SelectedItemClassName), b && b.length && (b.addClass(c.SelectedItemClassName), 
            this.scrollSuggestionIntoView(b));
        }, c.prototype.onFocusOut = function() {
            this.hideSuggestions();
        }, c.prototype.hideSuggestions = function() {
            this._suggestionBox.hide();
        }, c.prototype.scrollSuggestionIntoView = function(a) {
            var b = this._suggestionBox.scrollTop(), c = this._suggestionBox.innerHeight(), d = this._suggestionBox.outerHeight(!0) - this._suggestionBox.innerHeight(), e = a.position().top + d, f = a.outerHeight(!0);
            if (e + f > c) {
                var g = b + e + f - c;
                g > b + e && (g = b + e), this._suggestionBox.scrollTop(g);
            } else if (0 > e - d) {
                var g = b + e - d;
                this._suggestionBox.scrollTop(g);
            }
        }, c.IntelliInputboxUpdateEventName = "IntelliInputboxUpdateEvent", c.IntelliInputboxTabPressedEventName = "IntelliInputboxTabPressedEvent", 
        c.IntelliInputboxSuggestionItemSelectedEventName = "IntelliInputboxSuggestionItemSelectedEvent", 
        c.SelectedItemSelector = ".selectedItem", c.SelectedItemClassName = "selectedItem", 
        c.SuggestionBoxSelector = ".suggestionbox", c.SuggestionItemClassName = "suggestionItem", 
        c.SuggestionItemSelector = ".suggestionItem", c.DefaultHtml = '<div class="intelliInputBox"><div class="underlineRenderer"/><div class="spinner"/><input class="primaryInput commonInputStyle" spellcheck="false" /><div class="textMeasurer commonInputStyle" hidden/><div class="suggestionbox"/></div>', 
        c;
    }(a.InputControl);
    a.IntelliInputbox = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(a) {
        function b(c, d) {
            if (a.call(this, d), this._hostElement = $(b.DefaultHTML), c) for (var e = 0, f = c.length; f > e; e++) this._hostElement.append(c[e].element);
            this.initializeTogglePanel(), this.element.append(this._hostElement);
        }
        return __extends(b, a), b.prototype.initializeTogglePanel = function() {
            this._hostElement.togglePanelControl();
        }, b.DefaultHTML = '<ul class="togglePanelControl"></ul>', b;
    }(a.Control);
    a.TogglePanelControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b) {
            this._name = a, this._content = b;
        }
        return Object.defineProperty(a.prototype, "content", {
            get: function() {
                return this._content;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "name", {
            get: function() {
                return this._name;
            },
            enumerable: !0,
            configurable: !0
        }), a;
    }();
    a.Tab = b;
    var c = function(a) {
        function b(b, c) {
            a.call(this, c), this._controlRoot = $("<div class='tabcontrol'></div>"), this._currentContent = $("<div class='currentTabContent'></div>"), 
            this._tabSkeleton = "<span class='tab'>%TABNAME%</span>", this._tabContainer = $("<div class='tabcontainer'></div>"), 
            this._enabled = !0, this._controlRoot.append(this._tabContainer), this._controlRoot.append("<hr class = 'divider'></hr>"), 
            this._controlRoot.append(this._currentContent), this.wireEvents();
            for (var d = 0; d < b.length; d++) this.addTab(b[d]);
            this.element.append(this._controlRoot);
        }
        return __extends(b, a), b.prototype.addTab = function(a) {
            return this._tabContainer.append($(this._tabSkeleton.replace("%TABNAME%", a.name))), 
            a.content.attr("contentname", a.name), a.content.addClass("hidden"), this._currentContent.append(a.content), 
            1 === this._tabContainer.children().length && this._tabContainer.children().click(), 
            !0;
        }, Object.defineProperty(b.prototype, "currentContent", {
            get: function() {
                return this._currentContent;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.updateContentForTab = function() {
            return !1;
        }, Object.defineProperty(b.prototype, "enabled", {
            set: function(a) {
                this._enabled = a;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.wireEvents = function() {
            this._tabContainer.on("click", "span", this, function(a) {
                var c = a.data;
                if (c._enabled) {
                    var d = $(this);
                    c._lastSelected && c._lastSelected.removeClass("tab-selected"), c._lastSelected = d, 
                    d.addClass("tab-selected"), c._currentContent.children().hide();
                    var e = d.text(), f = c._currentContent.children('[contentname="' + e + '"]');
                    f.fadeIn();
                    var g = f.data(b.ITabContentKey);
                    g && g.tabSelected();
                }
            });
        }, b.ITabContentKey = "ITabContentKey", b;
    }(a.Control);
    a.TabControl = c;
}(InJs || (InJs = {}));

var ClientModelingTemplateType;

!function(a) {
    a[a.Synonym = 0] = "Synonym";
}(ClientModelingTemplateType || (ClientModelingTemplateType = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this.type = a.PhrasingType, this.slotItems = a.TemplateItems, this.termIndices = a.TermIndices, 
            this.displayText = a.DisplayText, this.slotValues = [];
        }
        return a;
    }();
    a.ServerModelingTemplate = b;
    var c = function() {
        function a(a, b, c, d) {
            this.type = a, this.slotItems = b, this.termIndices = c, this.displayText = d, this.slotValues = [];
        }
        return a;
    }();
    a.ClientModelingTemplate = c;
    var d = function() {
        function a() {}
        return a.prototype.contructor = function() {}, a;
    }();
    a.ClientModelingStringSlot = d;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b, c, d, e, f, g) {
            this._controlId = null, this._allowTextInput = !1, this._itemToString = null, this._itemFromString = null, 
            this._isValid = !1, this._selectedItem = null, this._highlightedItemIndex = -1, 
            a.Utility.throwIfNullOrUndefined(b, this, "ctor", "parent"), a.Utility.throwIfNullOrUndefined(c, this, "ctor", "itemType"), 
            a.Utility.throwIfNullOrUndefined(d, this, "ctor", "items"), a.Utility.throwIfNullOrUndefined(e, this, "ctor", "itemToString"), 
            a.Utility.throwIfNullOrUndefined(f, this, "ctor", "itemFromString"), a.Utility.throwIfNullOrUndefined(g, this, "ctor", "allowTextInput"), 
            this._parent = b, this._items = d, this._currentItems = d, this._itemType = c, this._itemToString = e, 
            this._itemFromString = f, this._allowTextInput = g, this.initializeControl();
        }
        return b.prototype.add_selectionChanged = function(a, c) {
            $(this).on(b.SelectionChangedEventName, c, a);
        }, b.prototype.remove_selectionChanged = function(a) {
            $(this).off(b.SelectionChangedEventName, a);
        }, b.prototype.add_enterKeyPressed = function(a, c) {
            $(this).on(b.EnterKeyPressedEventName, c, a);
        }, b.prototype.remove_onEnterKeyPressed = function(a) {
            $(this).off(b.EnterKeyPressedEventName, a);
        }, b.prototype.add_escKeyPressed = function(a, c) {
            $(this).on(b.EscKeyPressedEventName, c, a);
        }, b.prototype.remove_onEscKeyPressed = function(a) {
            $(this).off(b.EscKeyPressedEventName, a);
        }, Object.defineProperty(b.prototype, "indexMap", {
            get: function() {
                return this._indexMap;
            },
            set: function(a) {
                this._indexMap = a, this.updateCurrentItems();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "isValid", {
            get: function() {
                return this._isValid;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "selectedItem", {
            get: function() {
                return this._selectedItem;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "itemType", {
            get: function() {
                return this._itemType;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.initializeControl = function() {
            var c = this;
            this._controlId = a.Utility.generateGuid();
            var d = $(b.SelectionControlTemplate.replace(/{controlId}/g, this._controlId));
            this._parent.append(d), this._controlRoot = $(d[0]), this._pulldown = $(d[1]), this._textField = this._controlRoot.find("input.textField"), 
            this._selectorList = this._pulldown.find(".selectorList"), this._allowTextInput ? this.initializeWithTextInput() : this.initializeWithNoTextInput(), 
            this.populateItemList(), window.setTimeout(function() {
                c.updateLayout(!1);
            }, 0);
        }, b.prototype.initializeWithTextInput = function() {
            var c = this;
            this._textField.on(a.DOMConstants.focusInEventName, function(a) {
                a.stopPropagation(), c._controlRoot.addClass(b.ControlFocusedCssClass), c.updateLayout(!0, function() {
                    c.highlightItem(0), window.setTimeout(function() {
                        $(a.currentTarget).select();
                    }, 0);
                });
            }), $("body").on(a.DOMConstants.mouseDownEventName, this, this.onDocumentClick), 
            this._textField.on(a.DOMConstants.keyDownEventName, this, b.onTextFieldKeyPress), 
            this._textField.on(a.DOMConstants.inputEventName, this, b.onTextFieldInput);
        }, b.prototype.initializeWithNoTextInput = function() {
            var c = this;
            this._controlRoot.addClass(b.PointerCursorCssClass), this._textField.addClass(b.PointerCursorCssClass), 
            this._textField.attr(a.DOMConstants.disabledAttributeOrValue, a.DOMConstants.disabledAttributeOrValue), 
            this._textField.val(this._itemToString(this._currentItems[0], this._currentItems)), 
            this.updateSelectedItemValue(), this._controlRoot.on(a.DOMConstants.mouseClickEventName, function() {
                c._currentItems.length > 1 && (c._controlRoot.addClass(b.ControlFocusedCssClass), 
                c.updateLayout(!0, function() {
                    c.highlightItem(0);
                }));
            }), $("body").on(a.DOMConstants.mouseDownEventName, this, this.onDocumentClick);
        }, b.prototype.onDocumentClick = function(a) {
            var c = a.data;
            return $(a.target).closest("[data-controlid]").attr("data-controlid") === c._controlId ? (a.stopPropagation(), 
            void (c._allowTextInput && c._textField.focus())) : (c._controlRoot.removeClass(b.ControlFocusedCssClass), 
            void c.hidePulldown());
        }, b.prototype.populateItemList = function() {
            for (var c = this, d = 0; d < this._currentItems.length; d++) {
                var e = this._itemToString(this._currentItems[d], this._currentItems);
                if (null !== e) {
                    var f = $(b.ListItemTemplate);
                    f.text(e), f.on(a.DOMConstants.mouseEnterEventName, function(d) {
                        c._selectorList.children().removeClass(b.ControlHighlightedCssClass), $(d.currentTarget).addClass(b.ControlHighlightedCssClass), 
                        c._highlightedItemIndex = c._selectorList.children(a.JQueryConstants.VisibleSelector).index(d.currentTarget);
                    }), f.on(a.DOMConstants.mouseLeaveEventName, function(a) {
                        $(a.currentTarget).removeClass(b.ControlHighlightedCssClass), c._highlightedItemIndex = -1;
                    }), f.on(a.DOMConstants.mouseDownEventName, this, b.onItemSelected), this._selectorList.append(f);
                }
            }
        }, b.onTextFieldKeyPress = function(c) {
            var d = c.data, e = c.keyCode;
            if (e === a.DOMConstants.enterKeyCode) c.preventDefault(), $(d).trigger(b.EnterKeyPressedEventName); else if (e === a.DOMConstants.tabKeyCode) d.selectHighlightedItem(), 
            d.updateLayout(!0); else if (e === a.DOMConstants.escKeyCode) c.preventDefault(), 
            $(d).trigger(b.EscKeyPressedEventName); else if (e === a.DOMConstants.upArrowKeyCode) {
                c.preventDefault();
                var f = d._selectorList.children(a.JQueryConstants.VisibleSelector).length;
                d._highlightedItemIndex > 0 && d._highlightedItemIndex < f && (d._highlightedItemIndex--, 
                d.highlightItem(d._highlightedItemIndex));
            } else if (e === a.DOMConstants.downArrowKeyCode) {
                c.preventDefault();
                var f = d._selectorList.children(a.JQueryConstants.VisibleSelector).length;
                d._highlightedItemIndex >= -1 && d._highlightedItemIndex < f - 1 && (d._highlightedItemIndex++, 
                d.highlightItem(d._highlightedItemIndex));
            }
        }, b.onTextFieldInput = function(a) {
            var b = a.data;
            b.updateLayout(!0, function() {
                b.updateSelectedItemValue(), b.highlightItem(0);
            });
        }, b.onItemSelected = function(a) {
            a.preventDefault();
            var b = a.data;
            b._textField.val($(a.currentTarget).text()), b.updateLayout(!1), b.updateSelectedItemValue();
        }, b.prototype.selectHighlightedItem = function() {
            var c = this._selectorList.find(a.Utility.createClassSelector(b.ControlHighlightedCssClass));
            c.length > 0 && (this._textField.val(c.text()), this.updateSelectedItemValue());
        }, b.prototype.highlightItem = function(c) {
            var d = this;
            this._selectorList.children().removeClass(b.ControlHighlightedCssClass), this._selectorList.children(a.JQueryConstants.VisibleSelector).each(function(a, e) {
                return c === a ? ($(e).addClass(b.ControlHighlightedCssClass), d._highlightedItemIndex = c, 
                !1) : void 0;
            });
        }, b.prototype.showPulldown = function() {
            var b = !1;
            this._selectorList.children().each(function(c, d) {
                return $(d).css(a.CssConstants.displayProperty) === a.CssConstants.blockValue ? (b = !0, 
                !1) : void 0;
            }), b ? this._pulldown.css(a.CssConstants.displayProperty, a.CssConstants.blockValue) : this.hidePulldown();
        }, b.prototype.hidePulldown = function() {
            this._pulldown.css(a.CssConstants.displayProperty, a.CssConstants.noneValue);
        }, b.prototype.updateLayout = function(c, d) {
            var e = this, f = this._textField.val().trim(), g = 0;
            this._allowTextInput ? 0 === f.length ? (this._controlRoot.addClass(b.ControlEmptyCssClass), 
            g = b.EmptyControlMinWidthPx, this._selectorList.children().css(a.CssConstants.displayProperty, a.CssConstants.blockValue)) : (this._controlRoot.removeClass(b.ControlEmptyCssClass), 
            g = this.measureText(f), this._selectorList.children().each(function(b, c) {
                0 === $(c).text().indexOf(e._textField.val()) && $(c).text().length > e._textField.val().length ? $(c).css(a.CssConstants.displayProperty, a.CssConstants.blockValue) : $(c).css(a.CssConstants.displayProperty, a.CssConstants.noneValue);
            })) : (g = this.measureText(f), this._selectorList.children().css(a.CssConstants.displayProperty, a.CssConstants.blockValue));
            var h = 0;
            this._selectorList.children().each(function(b, c) {
                $(c).css(a.CssConstants.displayProperty) === a.CssConstants.blockValue && (h = Math.max(e.measureText($(c).text()) + parseInt($(c).css(a.CssConstants.paddingLeftProperty)) + parseInt($(c).css(a.CssConstants.paddingRightProperty)), h));
            }), this._selectorList.css(a.CssConstants.minWidthProperty, h), this._textField.width(g + b.TextFieldLeadSpacePx), 
            this._controlRoot.width(g), this._selectorList.width(g + b.PulldownPaddingPx), c ? this.showPulldown() : this.hidePulldown(), 
            d && d();
        }, b.prototype.measureText = function(a) {
            var c = $(b.TextMeasurementElementTemplate).text(a);
            this._controlRoot.append(c);
            var d = c.outerWidth();
            return c.remove(), d;
        }, b.prototype.updateSelectedItemValue = function() {
            this._isValid = !1, this._selectedItem = null;
            var a = this._textField.val().trim(), c = this._itemFromString(a, this._currentItems);
            null !== c && (this._isValid = !0, this._selectedItem = c), $(this).trigger(b.SelectionChangedEventName);
        }, b.prototype.updateCurrentItems = function() {
            var a = !0;
            if (this._indexMap) {
                this._currentItems = [];
                for (var b = 0; b < this._indexMap.length; b++) {
                    var c = this._items[this._indexMap[b]];
                    c === this._selectedItem && (a = !1), this._currentItems.push(c);
                }
            } else a = !1, this._currentItems = this._items;
            this._selectorList.empty(), this.populateItemList(), this._selectedItem && a && (this._currentItems.length > 0 ? this._textField.val(this._itemToString(this._currentItems[0], this._currentItems)) : this._textField.val()), 
            this.updateSelectedItemValue(), this.updateLayout(!1);
        }, b.SelectionControlTemplate = "<div class='in_itemSelectionControl' data-controlid='{controlId}'><input class='textField' autocomplete='off' spellcheck='off' maxlength='40' type='text'></input></div><div class='in_itemSelectionPulldown' data-controlid='{controlId}'><ul class='selectorList'></ul></div>", 
        b.TextMeasurementElementTemplate = '<span style="position:absolute; opacity:0; white-space:nowrap;"/>', 
        b.ListItemTemplate = '<li class="item"/>', b.EmptyControlMinWidthPx = 60, b.TextFieldLeadSpacePx = 15, 
        b.PulldownPaddingPx = 30, b.SelectionChangedEventName = "selectionChanged", b.EnterKeyPressedEventName = "enterKeyPressed", 
        b.EscKeyPressedEventName = "escKeyPressed", b.PointerCursorCssClass = "in_cursorPointer", 
        b.ControlHighlightedCssClass = "highlighted", b.ControlFocusedCssClass = "focused", 
        b.ControlEmptyCssClass = "empty", b;
    }();
    a.ItemSelectionControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this.modelingTemplate = null, this.modelingTemplate = a;
        }
        return a;
    }();
    a.TemplateValuesChangedEventArgs = b;
    var c = function() {
        function a() {
            this.Values = {};
        }
        return a;
    }();
    a.TemplateOptions = c;
    var d = function() {
        function c(a, b) {
            this._lastTemplateValuesArgs = null, this._parent = a, this._template = b, this._slotTemplateItems = new Array(), 
            this._selectionControls = new Array(), this.initializeControl();
        }
        return c.prototype.add_templateValuesChanged = function(a, b) {
            $(this).on(c.TemplateValuesChangedEventName, b, a);
        }, c.prototype.remove_templateValuesChanged = function(a) {
            $(this).off(c.TemplateValuesChangedEventName, a);
        }, c.prototype.add_confirmChanges = function(a, b) {
            $(this).on(c.ConfirmChangesEventName, b, a);
        }, c.prototype.remove_confirmChanges = function(a) {
            $(this).off(c.ConfirmChangesEventName, a);
        }, c.prototype.add_discardChanges = function(a, b) {
            $(this).on(c.DiscardChangesEventName, b, a);
        }, c.prototype.remove_discardChanges = function(a) {
            $(this).off(c.DiscardChangesEventName, a);
        }, c.prototype.initializeControl = function() {
            for (var b = this._parent, c = 0; c < this._template.slotItems.length; c++) {
                var d = this._template.slotItems[c];
                if (c > 0 && b.append(" "), this._template instanceof a.ServerModelingTemplate) switch (a.Utility.getType(d)) {
                  case ServerTemplateTypes.StaticItem:
                    b.append(this.getStaticItemSection(d));
                    break;

                  case ServerTemplateTypes.ConstantSlotItem:
                    b.append(this.getConstantSlotItemSection(d));
                    break;

                  case ServerTemplateTypes.SelectionSlotItem:
                    b.append(this.getSelectionSlotItemSection(d));
                    break;

                  default:
                    a.Errors.invalidOperation("Unexpected Template Type: " + a.Utility.getType(d));
                } else this._template instanceof a.ClientModelingTemplate && d instanceof a.ClientModelingStringSlot && b.append(this.getStringFreeInputSection(d));
            }
        }, c.prototype.getStaticItemSection = function(a) {
            return $(c.StaticSectionTemplate.replace("{DisplayText}", a.DisplayText));
        }, c.prototype.getConstantSlotItemSection = function(a) {
            return this._slotTemplateItems.push(a), $(c.StaticSectionTemplate.replace("{DisplayText}", a.SlotValue.DisplayText));
        }, c.prototype.getSelectionSlotItemSection = function(b) {
            var d = $("<div>"), e = !b.IsSimpleSelection, f = new a.ItemSelectionControl(d, b.DisplayText ? b.DisplayText : b.Name, b.SlotValues, c.slotValueToStringConverter, c.slotValueFromStringConverter, e);
            return this.addSelectionControl(f), d;
        }, c.prototype.getStringFreeInputSection = function() {
            var b = $("<div>"), c = new a.ItemSelectionControl(b, "", [], function(a) {
                return a;
            }, function(a) {
                return 0 === a.length ? null : a;
            }, !0);
            return this.addSelectionControl(c), b;
        }, c.prototype.addSelectionControl = function(a) {
            a.add_selectionChanged(this.onSelectionControlSelectionChanged, this), a.add_enterKeyPressed(this.onSelectionControlEnterKeyPressed, this), 
            a.add_escKeyPressed(this.onSelectionControlEscKeyPressed, this), this._selectionControls.push(a);
        }, c.slotValueToStringConverter = function(b) {
            switch (a.Utility.getType(b)) {
              case ServerTemplateTypes.StringSlotValue:
              case ServerTemplateTypes.EntitySlotValue:
              case ServerTemplateTypes.EdmPropertySlotValue:
                return b.DisplayText;

              case ServerTemplateTypes.InputSlotValue:
                return null;

              default:
                a.Utility.throwException("Unexpected type in slotValueFromStringConverter");
            }
        }, c.slotValueFromStringConverter = function(b, d) {
            for (var e = 0; e < d.length; e++) {
                var f = d[e];
                switch (a.Utility.getType(f)) {
                  case ServerTemplateTypes.StringSlotValue:
                  case ServerTemplateTypes.EntitySlotValue:
                  case ServerTemplateTypes.EdmPropertySlotValue:
                    if (0 === f.DisplayText.localeCompare(b)) return f;
                    break;

                  case ServerTemplateTypes.InputSlotValue:
                    var g = f;
                    if (1 === d.length && c.isValidValue(b, g.InputType)) return g.Value = b, f;
                    break;

                  default:
                    a.Utility.throwException("Unexpected type in slotValueFromStringConverter");
                }
            }
            return null;
        }, c.isValidValue = function(b, c) {
            if (0 === b.length) return !1;
            switch (c) {
              case 2:
                return !0;

              case 0:
                var d = parseInt(b);
                return 0/0 !== d && d === parseFloat(b);

              case 1:
                return 0/0 !== parseFloat(b);

              default:
                a.Utility.throwException("Unexpected type in isValidValue");
            }
            return !1;
        }, c.prototype.onSelectionControlEnterKeyPressed = function(a) {
            var b = a.data, d = b._selectionControls.some(function(a) {
                return !a.isValid;
            });
            d || $(b).trigger(c.ConfirmChangesEventName);
        }, c.prototype.onSelectionControlEscKeyPressed = function(a) {
            var b = a.data;
            $(b).trigger(c.DiscardChangesEventName);
        }, c.prototype.onSelectionControlSelectionChanged = function(d) {
            var e = d.data, f = new b(e._template);
            e._template.slotValues = [];
            var g = e._selectionControls.some(function(a) {
                return !a.isValid;
            });
            if (!g) {
                for (var h = 0; h < e._selectionControls.length; h++) {
                    var i = e._selectionControls[h];
                    e._template.slotValues.push({
                        Key: i.itemType,
                        Value: i.selectedItem
                    });
                }
                for (var h = 0; h < e._slotTemplateItems.length; h++) {
                    var j = e._slotTemplateItems[h];
                    e._template.slotValues.push({
                        Key: j.Name,
                        Value: j.SlotValue
                    });
                }
            }
            var k = JSON.stringify(f);
            k !== e._lastTemplateValuesArgs && (a.Tracing.verbose("Updated Template Args: " + k), 
            e._lastTemplateValuesArgs = k, $(e).trigger(c.TemplateValuesChangedEventName, f));
            for (var h = 0; h < e._selectionControls.length; h++) {
                var i = e._selectionControls[h];
                if (i.isValid) {
                    var l = i.selectedItem;
                    if (l.SlotValueFilters) for (var m = 0; m < l.SlotValueFilters.length; m++) {
                        var n = l.SlotValueFilters[m], o = e._selectionControls.filter(function(a) {
                            return a.itemType === n.Key;
                        })[0];
                        o && o.indexMap !== n.Value && (o.indexMap = n.Value);
                    }
                }
            }
        }, c.TemplateValuesChangedEventName = "templateValuesChanged", c.ConfirmChangesEventName = "confirmChanges", 
        c.DiscardChangesEventName = "discardChanges", c.StaticSectionTemplate = "<div class='phrasingTemplateStaticSection'>{DisplayText}</div>", 
        c;
    }();
    a.PhrasingTemplateControl = d;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(a) {
            this._layoutRoot = null, this._templateSelectorHost = null, this._templateControlHost = null, 
            this._templateControl = null, this._templateSelectorControl = null, this._modelingTemplates = null, 
            this._layoutRoot = $(b.ControlTemplate), this._templateSelectorHost = this._layoutRoot.find(".templateSelectorHost"), 
            this._templateControlHost = this._layoutRoot.find(".templateControlHost"), a.append(this._layoutRoot);
        }
        return b.prototype.add_templateValuesChanged = function(b, c) {
            $(this).on(a.PhrasingTemplateControl.TemplateValuesChangedEventName, c, b);
        }, b.prototype.remove_templateValuesChanged = function(b) {
            $(this).off(a.PhrasingTemplateControl.TemplateValuesChangedEventName, b);
        }, b.prototype.add_confirmChanges = function(b, c) {
            $(this).on(a.PhrasingTemplateControl.ConfirmChangesEventName, c, b);
        }, b.prototype.remove_confirmChanges = function(b) {
            $(this).off(a.PhrasingTemplateControl.ConfirmChangesEventName, b);
        }, b.prototype.add_discardChanges = function(b, c) {
            $(this).on(a.PhrasingTemplateControl.DiscardChangesEventName, c, b);
        }, b.prototype.remove_discardChanges = function(b) {
            $(this).off(a.PhrasingTemplateControl.DiscardChangesEventName, b);
        }, b.prototype.applyInterpretResult = function(c, d) {
            if (c.completedUtterance) {
                {
                    c.getCompletedUtteranceAsTerms();
                }
                if (this._layoutRoot.find(".termText").text(d.text), this._modelingTemplates = [], 
                d.isSingleTermSelection && c.suggestedPhrasingTemplates) for (var e = 0; e < c.suggestedPhrasingTemplates.length; e++) {
                    var f = c.suggestedPhrasingTemplates.slice(e, e + 1)[0];
                    f.TermIndices.indexOf(d.start) >= 0 && this._modelingTemplates.push(new a.ServerModelingTemplate(f));
                }
                this._modelingTemplates.push(new a.ClientModelingTemplate(0, [ new a.ClientModelingStringSlot() ], [ -1 ], a.Strings.modelingSynonymTemplateDisplayText)), 
                this._templateSelectorControl = new a.ItemSelectionControl(this._templateSelectorHost, "", this._modelingTemplates, b.runtimeModelingTemplateToStringConverter, b.runtimeModelingTemplateFromStringConverter, !1), 
                this._templateSelectorControl.add_selectionChanged(this.onTemplateSelectorSelectionChanged, this), 
                this.createTemplateControl(0);
            }
        }, b.prototype.createTemplateControl = function(b) {
            this._templateControl && (this._templateControl.remove_templateValuesChanged(this.onTemplateValuesChanged), 
            this._templateControl.remove_confirmChanges(this.onConfirmChanges), this._templateControl.remove_discardChanges(this.onDiscardChanges)), 
            this._templateControlHost.empty(), this._templateControl = new a.PhrasingTemplateControl(this._templateControlHost, this._modelingTemplates[b]), 
            this._templateControl.add_templateValuesChanged(this.onTemplateValuesChanged, this), 
            this._templateControl.add_confirmChanges(this.onConfirmChanges, this), this._templateControl.add_discardChanges(this.onDiscardChanges, this);
        }, b.runtimeModelingTemplateToStringConverter = function(a) {
            return a.displayText;
        }, b.runtimeModelingTemplateFromStringConverter = function(a, b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                if (0 === d.displayText.localeCompare(a)) return d;
            }
            return null;
        }, b.prototype.onTemplateValuesChanged = function(b, c) {
            var d = b.data;
            $(d).trigger(a.PhrasingTemplateControl.TemplateValuesChangedEventName, c);
        }, b.prototype.onConfirmChanges = function(b, c) {
            var d = b.data;
            $(d).trigger(a.PhrasingTemplateControl.ConfirmChangesEventName, c);
        }, b.prototype.onDiscardChanges = function(b, c) {
            var d = b.data;
            $(d).trigger(a.PhrasingTemplateControl.DiscardChangesEventName, c);
        }, b.prototype.onTemplateSelectorSelectionChanged = function(a) {
            var b = a.data, c = b._templateSelectorControl.selectedItem;
            b.createTemplateControl(b._modelingTemplates.indexOf(c));
        }, b.ControlTemplate = "<div class='in_templateSelectorControl'><div class='termText'>{termText}</div><div> means </div> <div class='templateSelectorHost'></div><div class='templateControlHost'></div></div>", 
        b;
    }();
    a.PhrasingTemplateSelectorControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a) {
            this._originalSchema = a;
        }
        return Object.defineProperty(a.prototype, "originalSchema", {
            get: function() {
                return this._originalSchema;
            },
            enumerable: !0,
            configurable: !0
        }), a.prototype.getSchemaEntry = function(a) {
            for (var b = null, c = 0; c < this._originalSchema.length; c++) if (this._originalSchema[c].Key === a) {
                b = this._originalSchema[c];
                break;
            }
            return b = b ? {
                Key: a,
                Value: b.Value
            } : {
                Key: a,
                Value: null
            };
        }, a.prototype.getSchema = function(a) {
            for (var b = this._originalSchema.slice(0), c = b.length, d = 0; d < this._originalSchema.length; d++) if (this._originalSchema[d].Key === a.Key) {
                c = d;
                break;
            }
            return b[c] = a, b;
        }, a;
    }();
    a.TransientLinguisticSchemaManager = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.none = 0] = "none", a[a.empty = 1] = "empty", a[a.powerView = 2] = "powerView", 
        a[a.server = 3] = "server";
    }(a.ErrorType || (a.ErrorType = {}));
    var b = a.ErrorType, c = function(c) {
        function d(b, e) {
            c.call(this, b, e), this._controlRoot = null, this._powerViewDisplayElement = null, 
            this._isPowerViewReady = !1, this._currentSecurityToken = null, this._currentErrorType = 0, 
            this._lastIssuedRequestId = null, this._emptyErrorTimerId = 0, this._areSuggestionsDisplayed = !1, 
            this._errorElement = null, this._currentRequestId = null, this._progressIndicatorVisible = !1, 
            this._filterPaneOpened = !1, this._fieldExplorerOpened = !1, this._visualizingInterpretResponse = !1, 
            this._visualizeInterpretResponseTimerId = 0, this._userStoppedTypingTimerId = 0, 
            this._pendingVisualizationActivity = null, this._currentVisualizationActivities = null, 
            this._controlRoot = b, this._currentVisualizationActivities = new Array(), this._errorElement = $("<div />").addClass(d.InfonavErrorMessageClass).css(a.CssConstants.displayProperty, a.CssConstants.noneValue), 
            this._controlRoot.append(this._errorElement);
        }
        return __extends(d, c), d.prototype.getVisualizationSnapshot = function() {
            return null;
        }, d.prototype._onPowerViewReady = function() {
            if (this._isPowerViewReady = !0, this._currentInterpretResponse) {
                this._visualizingInterpretResponse = !0;
                var a = this._pendingVisualizationActivity;
                this._pendingVisualizationActivity = null, this.applyInterpretResponse(this._currentInterpretResponse, a, !0);
            }
        }, d.prototype._onInterpretSuccess = function(b) {
            this._currentRequestId = b.requestId;
            var c = this.createVisualizationActivity(b.clientActivity);
            this._isPowerViewReady ? (this._visualizingInterpretResponse = !0, this.applyInterpretResponse(b.response, c, !0)) : (a.Tracing.verbose("Waiting for PowerView ready before applying interpret response", b.requestId), 
            this._pendingVisualizationActivity && this._pendingVisualizationActivity.end(0, a.ActivityErrors.NewVisualizationRequestWhileWaitingForPowerViewReady), 
            this._pendingVisualizationActivity = c);
        }, d.prototype._onInterpretError = function(a) {
            this.showServerError(a);
        }, d.prototype._onInterpretIssued = function(a) {
            var b = this;
            window.clearTimeout(this._visualizeInterpretResponseTimerId), this.hideError(), 
            this._lastIssuedRequestId = a.requestId, this.setProgressIndicatorVisibility(!1), 
            window.clearTimeout(this._userStoppedTypingTimerId), this._userStoppedTypingTimerId = window.setTimeout(function() {
                b._userStoppedTypingTimerId = 0, b.setProgressIndicatorVisibility(!0);
            }, d.DelayBeforeNotifyingUserStoppedTyping);
        }, d.prototype._onInterpretResultCleared = function(a) {
            window.clearTimeout(this._visualizeInterpretResponseTimerId), this.hideError(), 
            a && a.hideVisualization === !0 ? this._powerViewDisplayElement.addClass(d.TransparentClass) : this.clearInterpretVisualization();
        }, d.prototype._onInterpretResultChanged = function(b) {
            var c = this.createVisualizationActivity(b.clientActivity);
            this._isPowerViewReady ? (this._visualizingInterpretResponse = !0, this.applyInterpretResponse(this._currentInterpretResponse, c, !1)) : (a.Tracing.verbose("Waiting for PowerView ready before applying interpret result", b.requestId), 
            this._pendingVisualizationActivity && this._pendingVisualizationActivity.end(0, a.ActivityErrors.NewVisualizationRequestWhileWaitingForPowerViewReady), 
            this._pendingVisualizationActivity = c);
        }, d.prototype._onQuestionBoxSuggestionsDisplayed = function(b) {
            if (this.connectionGroup.autoAdjustResultsControlVerticalOffset) {
                a.Utility.throwIfNullOrUndefined(b, this, "OnQuestionBoxSuggestionsDisplayed", "e"), 
                c.prototype._onQuestionBoxSuggestionsDisplayed.call(this, b);
                var d = b.totalSuggestionsPixelOffset;
                this._controlRoot.stop().animate({
                    "margin-top": d
                }, b.animationDuration);
            }
            this._areSuggestionsDisplayed = b.numberOfSuggestions > 0, this._hasInterpretResponse() && (this._currentInterpretResponse.result.isEmpty(this._areSuggestionsDisplayed) ? this.showEmptyError(!0) : this.hideEmptyError());
        }, d.prototype._onSetVisualizationType = function(b) {
            a.Utility.throwIfNullOrUndefined(b, this, "OnSetVisualizationType", "e"), this.setVisualizationType(b.visualizationType);
        }, d.prototype._onPowerViewError = function(b) {
            a.Utility.throwIfNullOrUndefined(b, this, "OnPowerViewError", "e");
            var c = $("<p />");
            c.append(a.InfoNavUtility.constructErrorField(a.Strings.errorActivityIdText, b.error.ActivityId)), 
            c.append(a.InfoNavUtility.constructErrorField(a.Strings.errorCallStackText, b.error.CallStack)), 
            this.clearEmptyErrorTimer(), b.error.ExceptionTypeName !== a.PowerViewSilverlightControl.InvalidSemanticQueryExceptionName ? this.showError(a.Strings.serverErrorTitleText, a.Strings.serverErrorDetailsText, c, 2) : this.showError(a.Strings.serverErrorTitleText, a.Strings.serverReloadDetailsText, c, 2);
        }, d.prototype._fixVisualizationAspectRatio = function() {
            this._controlRoot.is(":visible") && this._controlRoot.width(Math.round(this._controlRoot.height() / d.VisualizationAspectRatioY * d.VisualizationAspectRatioX));
        }, d.prototype._hostCallbackHandler = function(b) {
            a.Utility.throwIfNullOrUndefined(b, this, "HostCallbackHandler", "serializedCallback");
            var c = JSON.parse(b);
            if (this._validateCallbackArgument(c)) if (c.MethodName === PowerViewCallbackMethods.AvailableVisualizationTypesMethodName) {
                this.connectionGroup.bridge.availableVisualizationTypesReady(c.Parameter);
                var d = new a.AvailableVisualizationTypesEventArgs(c.Parameter), e = d._visualizationTypes[0];
                if (this._visualizingInterpretResponse) d._visualizationTypes.length && (this._currentVisualizationType = d._visualizationTypes[0], 
                this.connectionGroup.telemetryService.notifyVisualizedInterpretResult(9, new a.VisualizedInterpretResultEventArgs(this._currentVisualizationType))), 
                this._visualizingInterpretResponse = !1; else if (void 0 !== this._currentVisualizationType && void 0 !== e && this._currentVisualizationType !== e) {
                    var f = new a.UserChangedVisualizationTypeEventArgs(this._currentVisualizationType, e);
                    this.connectionGroup.telemetryService.notifyUserChangedVisualizationType(13, f);
                }
            } else c.MethodName === PowerViewCallbackMethods.PowerViewErrorMethodName ? (this.connectionGroup.bridge.powerViewError(c.Parameter), 
            this._visualizingInterpretResponse = !1) : c.MethodName === PowerViewCallbackMethods.FieldExplorerOpenedMethodName ? this.connectionGroup.telemetryService.notifyUserOpenedFieldExplorer(8) : c.MethodName === PowerViewCallbackMethods.FilterPaneOpenedMethodName ? this.connectionGroup.telemetryService.notifyUserOpenedFilterPane(7) : c.MethodName === PowerViewCallbackMethods.PowerViewActivityCompletedMethodName ? this.handleVisualizationEndFromPowerView(c.Parameter) : c.MethodName === PowerViewCallbackMethods.PinVisualMethodName && this.connectionGroup.raisePinToDashboard(c.Parameter); else a.Tracing.warning(a.StringExtensions.format("Unrecognized callback received: '{0}'", b));
        }, d.prototype._dispatchToPowerView = function() {
            a.Utility.throwException(a.Errors.pureVirtualMethodException("PowerViewControl", "_dispatchToPowerView"));
        }, d.prototype._validateCallbackArgument = function(a) {
            return a && "MethodName" in a && "Namespace" in a ? a.Namespace !== PowerViewCallbackMethods.InteractiveReportNamespace ? !1 : !0 : !1;
        }, d.prototype._onCollageVisibilityChanged = function(a) {
            a ? this._controlRoot.addClass(d.TransparentClass) : this._controlRoot.removeClass(d.TransparentClass);
        }, d.prototype.applyInterpretResponse = function(b, c, e) {
            var f = this;
            a.Utility.throwIfNullOrUndefined(b, this, "ApplyInterpretResult", "response"), a.Utility.throwIfNullOrUndefined(c, this, "ApplyInterpretResult", "visualizationActivity"), 
            b.isEmpty(this._areSuggestionsDisplayed) || b.result.isEmpty(this._areSuggestionsDisplayed) ? (c && c.end(0, a.ActivityErrors.EmptyInterpretResult), 
            this.showEmptyError(e)) : (this.hideError(), window.clearTimeout(this._visualizeInterpretResponseTimerId), 
            this._pendingVisualizationActivity && this._pendingVisualizationActivity.end(0, a.ActivityErrors.NewVisualizationRequestDelayingPrevious), 
            this._pendingVisualizationActivity = c || this.createVisualizationActivity(), this._visualizeInterpretResponseTimerId = window.setTimeout(function() {
                if (f._currentSecurityToken !== f.connectionGroup.getSecurityToken()) {
                    if (a.StringExtensions.isNullOrEmpty(f.connectionGroup.getSecurityToken())) return;
                    f.setSecurityToken(f.connectionGroup.getSecurityToken());
                }
                f._currentVisualizationActivities.push(f._pendingVisualizationActivity);
                var c = PowerViewMethods.getPowerViewApplyInterpretResultMethod(b.result.source, f._pendingVisualizationActivity.activityId);
                f._pendingVisualizationActivity = null, f._dispatchToPowerView(c), a.Tracing.verbose(a.StringExtensions.format("Rendering visualization for '{0}'", b.result.completedUtterance.Text));
            }, d.DelayBeforeVisualizeInterpretResponse, this._currentInterpretResponse));
        }, d.prototype.showServerError = function(b) {
            this.clearEmptyErrorTimer();
            var c = this.getServerErrorDetailsText(b), d = null;
            b.statusCode && !a.StringExtensions.isNullOrEmpty(b.requestId) && (d = a.InfoNavUtility.constructAdditionalErrorInfoBlock(b.statusCode.toString(), b.infoNavError, b.activityId, b.requestId, b.timeStamp)), 
            this.showError(a.Strings.serverErrorTitleText, c, d, 3, b.requestId);
        }, d.prototype.showEmptyError = function(a) {
            var b = this;
            this.clearEmptyErrorTimer(), a ? this._emptyErrorTimerId = window.setTimeout(function() {
                b.showEmptyErrorTimerCallback();
            }, d.EmptyErrorTimeout) : this.showEmptyErrorTimerCallback();
        }, d.prototype.showEmptyErrorTimerCallback = function() {
            this._lastIssuedRequestId === this._currentRequestId && this.showError(a.Strings.emptyResultTitleText, a.Strings.emptyResultDescriptionText, null, 1, this._currentRequestId);
        }, d.prototype.showError = function(c, e, f, g, h) {
            var i = this;
            if (this._currentErrorType !== g) {
                this._currentErrorType = g, this._errorElement.empty(), this.connectionGroup.telemetryService.notifyUserGotError(1, new a.UserGotErrorEventArgs(g ? b[g] : "", c + ";" + e, h));
                var j = $("<div />");
                j.addClass(d.TextLargeClass), j.addClass(d.InfonavErrorTitleClass), j.text(c);
                var k = $("<div />");
                if (k.text(e), k.addClass(d.InfonavErrorDetailClass), this._errorElement.append(j), 
                this._errorElement.append(k), f) {
                    var l = a.InfoNavUtility.constructShowDetailsContainer(f);
                    this._errorElement.append(l);
                }
                if (0 !== this.connectionGroup.featuredQuestions.length) {
                    this._errorElement.append(d.CollageNavigationHtml);
                    var m = this._errorElement.find(d.CollageNavigationTextSelector);
                    m.text(a.Strings.showCollageText), m.addClass(d.TextLargeClass);
                    var n = this._errorElement.find(d.CollageNavigationElementsSelector);
                    n.on(a.DOMConstants.mouseClickEventName, function() {
                        i.connectionGroup.telemetryService.notifyUserDisplayedFeaturedQuestions(2), i.hideEmptyError(), 
                        i.connectionGroup.bridge.showCollage();
                    }), this._errorElement.append(n);
                }
                this.clearInterpretVisualization(), this._powerViewDisplayElement.addClass(d.TransparentClass), 
                this._errorElement.css(a.CssConstants.displayProperty, a.CssConstants.blockValue), 
                e && a.Tracing.error(e + "\n" + f);
            }
        }, d.prototype.hideEmptyError = function() {
            1 === this._currentErrorType && this.hideError();
        }, d.prototype.hideError = function() {
            this._currentErrorType = 0, this.clearEmptyErrorTimer(), this._powerViewDisplayElement.removeClass(d.TransparentClass), 
            this._errorElement.css(a.CssConstants.displayProperty, a.CssConstants.noneValue);
        }, d.prototype.clearEmptyErrorTimer = function() {
            this._emptyErrorTimerId && window.clearTimeout(this._emptyErrorTimerId);
        }, d.prototype.getServerErrorDetailsText = function(b) {
            return b.timedOut ? a.Strings.serverTimeoutDetailsText : a.Strings.serverErrorDetailsText;
        }, d.prototype.clearInterpretVisualization = function() {
            var a = PowerViewMethods.getPowerViewClearInterpretVisualizationMethod();
            this._dispatchToPowerView(a);
        }, d.prototype.setVisualizationType = function(a) {
            var b = PowerViewMethods.getPowerViewSetVisualizationTypeMethod(a);
            this._dispatchToPowerView(b);
        }, d.prototype._onUserUtteranceConfirmed = function() {
            this.setProgressIndicatorVisibility(!0);
        }, d.prototype.setProgressIndicatorVisibility = function(a) {
            if (this._progressIndicatorVisible !== a) {
                var b = PowerViewMethods.getPowerViewSetProgressIndicatorVisibilityMethod(a);
                this._dispatchToPowerView(b), this._progressIndicatorVisible = a;
            }
        }, d.prototype.setSecurityToken = function(b) {
            a.Utility.throwIfNullOrEmptyString(b, this, "SetSecurityToken", "securityToken");
            var c = PowerViewMethods.getPowerViewSetSecurityTokenMethod(b);
            this._dispatchToPowerView(c), this._currentSecurityToken = b;
        }, d.prototype.createVisualizationActivity = function(a) {
            var b = this.connectionGroup.telemetryService.createNewActivity(25, a);
            return b;
        }, d.prototype.handleVisualizationEndFromPowerView = function(b) {
            var c = this;
            if (b) {
                for (var e, f, g = this._currentVisualizationActivities.length - 1; g >= 0; g--) if (this._currentVisualizationActivities[g].activityId === b.ActivityId) {
                    e = g, f = this._currentVisualizationActivities[e];
                    break;
                }
                if (!f) return void a.Tracing.warning("Matching visualization activity for activityId=" + b.ActivityId + " cannot be found");
                if (b.CorrelatedProperties && b.CorrelatedProperties.some(function(a) {
                    return a.PropertyName === d.RenderEditCorrelatedPropertyName;
                })) return f.addCorrelatedProperties(b.CorrelatedProperties.map(function(b) {
                    return new a.CorrelatedProperty(b.PropertyName, b.PropertyValue);
                })), f.end(b.ActivityEndedWith, b.Error), void this.cleanupVisualizationActivities(e);
                if (0 === e) return a.Tracing.warning("No previously completed activity exists when it is expected to"), 
                f.addCorrelatedProperties(b.CorrelatedProperties.map(function(b) {
                    return new a.CorrelatedProperty(b.PropertyName, b.PropertyValue);
                })), f.addCorrelatedProperty(new a.CorrelatedProperty("originalActivityEndedWith", b.ActivityEndedWith.toString())), 
                f.addCorrelatedProperty(new a.CorrelatedProperty("originalActivityError", JSON.stringify(b.Error))), 
                f.end(0, a.ActivityErrors.UnexpectedVisualizationActivityEnd), void this._currentVisualizationActivities.splice(0, 1);
                var h = this._currentVisualizationActivities[e - 1];
                if (h.completed) {
                    f.addCorrelatedProperties(b.CorrelatedProperties.map(function(b) {
                        return new a.CorrelatedProperty(b.PropertyName, b.PropertyValue);
                    })), f.addCorrelatedProperty(new a.CorrelatedProperty("delegated", "true")), f.addCorrelatedProperties(h.correlatedProperties), 
                    this._currentVisualizationActivities.splice(e, 1);
                    var i = this.shouldUsePreviousActivityForResult(b.ActivityEndedWith, h.activityEndResult);
                    i ? f.end(h.activityEndResult, h.error, h.activityEndTime) : f.end(b.ActivityEndedWith, b.Error, h.activityEndTime);
                } else h.onCompleted(function() {
                    c.handleVisualizationEndFromPowerView(b);
                });
            }
        }, d.prototype.shouldUsePreviousActivityForResult = function(a, b) {
            return 1 !== a && 2 !== a ? !1 : 1 !== b && 2 !== b ? !0 : 2 === a ? !1 : 2 === b ? !0 : !1;
        }, d.prototype.cleanupVisualizationActivities = function(b) {
            for (var c = b - 1; c >= 0; c--) this._currentVisualizationActivities[c].completed || (a.Tracing.warning("The activity should have ended as there is a newer completed visualization activity | " + this._currentVisualizationActivities[c].toString()), 
            this._currentVisualizationActivities[c].end(0, a.ActivityErrors.UnexpectedVisualizationActivityEnd));
            this._currentVisualizationActivities.splice(0, b);
        }, d.InfonavErrorMessageClass = "infonav-errorMessage", d.InfonavErrorTitleClass = "infonav-errorTitle", 
        d.InfonavErrorDetailClass = "infonav-errorDetail", d.CollageNavigationTextSelector = ".collageNavigationText", 
        d.CollageNavigationElementsSelector = ".collageNavigationElements", d.TransparentClass = "infonav-transparent", 
        d.EmptyErrorTimeout = 1e3, d.VisualizationAspectRatioX = 4, d.VisualizationAspectRatioY = 3, 
        d.PowerViewReportMargin = 53, d.TextLargeClass = "ms-textLarge", d.RenderEditCorrelatedPropertyName = "renderEditRequestId", 
        d.RenderedActivityCorrelatedPropertiesPrefix = "rendered_", d.CollageNavigationHtml = "<div class='collageNavigationElements'><div class='collageNavigationIcon'></div><div class='collageNavigationText'></div></div>", 
        d.DelayBeforeVisualizeInterpretResponse = 200, d.DelayBeforeNotifyingUserStoppedTyping = 1e3, 
        d;
    }(a.InfoNavConnectedClientControl);
    a.PowerViewControl = c;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d) {
            b.call(this, c, d), this._powerViewIframeWindow = null, $(window).on("message", this, this.onMessage), 
            this._powerViewDisplayElement = $(a.PowerViewHTML5Control.PowerViewIframeHtml), 
            this._controlRoot.append(this._powerViewDisplayElement), this._powerViewDisplayElement.attr("src", a.PowerViewHTML5Control.PowerViewIframeSrcUrl), 
            this._powerViewIframeWindow = this._powerViewDisplayElement[0].contentWindow;
        }
        return __extends(c, b), c.prototype._dispatchToPowerView = function(b) {
            if (this._isPowerViewReady) {
                var c = JSON.stringify(b);
                this._powerViewIframeWindow.postMessage(c, a.Configuration.siteUrl);
            }
        }, c.prototype.onMessage = function(b) {
            var c = b.data, d = b.originalEvent, e = JSON.parse(d.data);
            c._validateCallbackArgument(e) ? e.MethodName === PowerViewCallbackMethods.InitializedMethodName ? c._onPowerViewReady() : c._hostCallbackHandler(d.data) : a.Tracing.warning(a.StringExtensions.format("Unrecognized callback received: '{0}'", d.data));
        }, c.PowerViewIframeSrcUrl = "/infonav/app/resources/pv/infonavpv.html", c.PowerViewIframeHtml = "<iframe class='infonav-powerViewIframe'></iframe>", 
        c;
    }(a.PowerViewControl);
    a.PowerViewHTML5Control = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(d, e, f) {
            b.call(this, d, e), this._interactiveReportHandler = null, this._silverlightElementId = null, 
            null == e.showExplorerPane && (e.showExplorerPane = !0), a.Utility.isBoolean(e.showExplorerPane) || a.Utility.throwException(a.Errors.invalidOperation("showExplorerPane parameter must be a boolean type"));
            var g = this.createOnSilverlightLoadCallback(e.group.name), h = this.createInteractiveReportHandlerRegistrationCallback(e.group.name), i = this.connectionGroup.absoluteReportServerUrl, j = a.QueryStringUtil.getQueryStringValue("serverTraceLevel"), k = 1;
            j && (k = parseInt(j), isNaN(k) && (k = 1));
            var l = c._silverlightHtml.replace(/{reportServerUri}/g, i).replace(/{serverTraceLevel}/g, k.toString()).replace(/{xapUri}/g, f).replace(/{showExplorer}/g, e.showExplorerPane.toString()).replace(/{onLoadCallback}/g, g).replace(/{interactiveReportHandlerRegistrationCallback}/g, h), m = $(l);
            this._silverlightElementId = this._controlRoot.attr("id") + "_pv", m.attr("id", this._silverlightElementId), 
            this._controlRoot.append(m), c.resetPowerViewControlSize(), this._powerViewDisplayElement = this._controlRoot.find(a.Utility.createIdSelector(this._silverlightElementId)), 
            this.connectionGroup.getIsReady() && this.updateGeocodingState();
        }
        return __extends(c, b), c.prototype.createInteractiveReportHandlerRegistrationCallback = function(a) {
            var b = this, d = c.InteractiveReportHandlerRegistrationCallbackPrefix + a;
            return window[d] = function(a) {
                window[d] = void 0, b._interactiveReportHandler = a;
            }, d;
        }, c.prototype.createOnSilverlightLoadCallback = function(a) {
            var b = this, d = c.OnLoadCallbackPrefix + a;
            return window[d] = function() {
                window[d] = void 0, b.onSilverlightControlReady();
            }, d;
        }, Object.defineProperty(c.prototype, "interactiveReportHandler", {
            get: function() {
                return this._interactiveReportHandler || a.Utility.throwException(a.Errors.invalidOperation("InteractiveReportHandler was not yet initialized")), 
                this._interactiveReportHandler;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.onSilverlightControlReady = function() {
            this._onPowerViewReady();
            var a = "HostCallbackHandler" + this._silverlightElementId;
            this.addGlobalFunctionForHostBackHandler(a), this.interactiveReportHandler.RegisterHostCallbacksHandler(a);
        }, c.prototype.getVisualizationSnapshot = function() {
            return this._isPowerViewReady ? "data:image/png;base64," + this.interactiveReportHandler.GetSnapshot() : null;
        }, c.prototype.addGlobalFunctionForHostBackHandler = function(a) {
            var b = this;
            window[a] = function(a) {
                b._hostCallbackHandler(a);
            };
        }, c.prototype._dispatchToPowerView = function(b) {
            if (this._isPowerViewReady) {
                b.CorrelationId = a.AppManager.current.activityId;
                var c = a.JavaScriptSerializer.serialize(b);
                this.interactiveReportHandler.DispatchMethod(c);
            }
        }, c.prototype._onConnectionGroupReady = function() {
            this.updateGeocodingState();
        }, c.prototype._onPowerViewReady = function() {
            this._isPowerViewReady = !0, this.updateGeocodingState(), b.prototype._onPowerViewReady.call(this);
        }, c.prototype.updateGeocodingState = function() {
            if (this._isPowerViewReady && this.connectionGroup.getIsReady()) {
                var b = this.connectionGroup.isGeocodingEnabled;
                a.Tracing.verbose(a.StringExtensions.format("Setting geocoding to '{0}'", b ? "true" : "false"));
                var c = PowerViewMethods.getPowerViewSetAllowGeocodingMethod(b);
                this._dispatchToPowerView(c);
            }
        }, c.setModelingPreviewSize = function() {
            c.MinControlWidth = c.ModelingPreviewWidth;
        }, c.resetPowerViewControlSize = function() {
            c.MinControlWidth = c.ControlFullViewWidth;
        }, c._silverlightHtml = "<object data='data:application/x-silverlight-2,' type='application/x-silverlight-2' class='infonav-powerViewSilverlightControl'><param name='source' value='{xapUri}/Microsoft.Reporting.AdHoc.Shell.Bootstrapper.xap'/><param name='onError' value='onSilverlightError' /><param name='onLoad' value='{onLoadCallback}' /><param name='background' value='white' /><param name='windowless' value='true'/><param name='minRuntimeVersion' value='5.0.61118.0' /><param name='culture' value='en-US' /><param name='uiculture' value='en-US' /><param name='enableHtmlAccess' value='true' /><param name='enableautozoom' value ='false'/ ><param name='InitParams' value='DeferredInitialization=false,ShowInfoNavExplorer={showExplorer},ReportServerUri={reportServerUri},ViewMode=InfoNavSearchVertical,SuppressCloseConfirmation=true,ServerTraceLevel={serverTraceLevel},DefaultFontFamily=Segoe UI,Fit=true,InteractiveReportHandlerRegistrationCallback={interactiveReportHandlerRegistrationCallback}' /><a style='display: block; text-align: center; text-decoration: none;' href='http://go2.microsoft.com/fwlink/?LinkId=116053&v=5.0.61118.0'><img style='border-style: none;' alt='Microsoft Silverlight' src='{xapUri}/icon-silverlight.png'/><span style='display: block; margin-top: 20px;'>" + a.Strings.silverlightInstallRequiredText + "</span></a></object>", 
        c.InvalidSemanticQueryExceptionName = "InvalidSemanticQueryException", c._taskPaneWidth = 325, 
        c.ControlFullViewWidth = 985, c.ModelingPreviewWidth = 700, c.InteractiveReportHandlerRegistrationCallbackPrefix = "infonavInteractiveReportHandlerRegistrationCallback_", 
        c.OnLoadCallbackPrefix = "infonavInteractiveReportOnLoadCallback_", c.MinControlWidth = c.ControlFullViewWidth, 
        c.MinControlHeight = 480, c;
    }(a.PowerViewControl);
    a.PowerViewSilverlightControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(b) {
        !function(a) {
            a[a.Default = 0] = "Default", a[a.Loading = 1] = "Loading", a[a.Alert = 2] = "Alert", 
            a[a.OfficeFabric = 3] = "OfficeFabric";
        }(b.NotificationIcon || (b.NotificationIcon = {}));
        var c = (b.NotificationIcon, function(b) {
            function c(d, e) {
                var f = this;
                b.call(this, d, e), this._notification = null, this._notificationTitle = null, this._notificationContent = null, 
                this._notificationCloseButton = null, this._notificationIcon = null, this._closedCallback = null, 
                this._currentId = null, $(document).ready(function() {
                    f._notification = $(c.NotificationControlHtml), f._notificationTitle = f._notification.find(".infonav-notificationTitle"), 
                    f._notificationContent = f._notification.find(".infonav-notificationContent"), f._notificationCloseButton = f._notification.find(".infonav-notificationCloseButton"), 
                    f._notificationIcon = f._notification.find(".infonav-notificationIcon"), f._notificationCloseButton.on(a.DOMConstants.mouseClickEventName, function() {
                        f.hideNotification(f._currentId), f._closedCallback && f._closedCallback();
                    }), f.element.append(f._notification);
                    var b = $(c.notificationContainerHostClassSelector);
                    b && b.length > 0 && b.remove(), b = f.element.addClass(c.notificationContainerHostClassSelector), 
                    $(a.DOMConstants.DocumentBody).append(b);
                });
            }
            return __extends(c, b), c.prototype._onShowNotification = function(a) {
                this.showNotification(a.id, a.title, a.message, a.closedCallback, a.isDismissable, a.dismissTimeout, a.iconType, a.officeIconId);
            }, c.prototype._onHideNotification = function(a) {
                this.hideNotification(a.id);
            }, c.prototype.showNotification = function(a, b, d, e, f, g, h, i) {
                var j = this;
                if (this._notification.removeClass(c.TitleOnlyCssClass).removeClass(c.MessageOnlyCssClass).removeClass(c.DismissableCssClass).removeClass(c.ShowIconCssClass), 
                this._notificationTitle.empty(), this._notificationContent.empty(), this._notificationTitle.text(b), 
                this._notificationCloseButton.empty(), this._notificationIcon.removeClass(c.LoadingIconCssClass).removeClass(c.AlertIconCssClass).removeClass(c.DefaultCssClass).empty(), 
                this._currentId = a, jsCommon.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(b) && this._notification.addClass(c.MessageOnlyCssClass), 
                (!d || "string" == typeof d && jsCommon.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(d)) && this._notification.addClass(c.TitleOnlyCssClass), 
                ("undefined" == typeof f || f === !0) && this._notification.addClass(c.DismissableCssClass), 
                null != h) switch (this._notification.addClass(c.ShowIconCssClass), h) {
                  case 1:
                    this._notificationIcon.addClass(c.LoadingIconCssClass);
                    break;

                  case 2:
                    this._notificationIcon.addClass(c.AlertIconCssClass);
                    break;

                  case 3:
                    if (i) {
                        var k = $("<i/>");
                        k.addClass(c.OfficeFabricIconPrefixCssClass + i), this._notificationIcon.append(k);
                    }
                    break;

                  default:
                    this._notificationIcon.addClass(c.DefaultCssClass);
                }
                "string" == typeof d ? this._notificationContent.text(d) : d instanceof jQuery && this._notificationContent.append(d), 
                this._notification.fadeTo(0, 0), this._notification.fadeTo(c.AnimationSpeedMs, 1, null), 
                this._closedCallback = e, null != g && g > 0 && window.setTimeout(function() {
                    j.hideNotification(a);
                }, g);
            }, c.prototype.hideNotification = function(b) {
                var d = this;
                return this._currentId == b ? (this._notification.fadeTo(c.AnimationSpeedMs, 0, function() {
                    d._currentId === b && d._notification.css(a.CssConstants.displayProperty, a.CssConstants.noneValue);
                }), !0) : !1;
            }, Object.defineProperty(c, "animationSpeedMs", {
                get: function() {
                    return c.AnimationSpeedMs;
                },
                enumerable: !0,
                configurable: !0
            }), c.AnimationSpeedMs = 250, c.NotificationControlHtml = '<div class="infonav-notification"><div class="infonav-notificationCloseButton"></div><div class="infonav-notificationIcon"></div><div class="infonav-notificationLayout"><div class="infonav-notificationTitle"></div><div class="infonav-notificationContent"></div></div></div>', 
            c.MessageOnlyCssClass = "messageOnly", c.TitleOnlyCssClass = "titleOnly", c.DismissableCssClass = "dismissable", 
            c.DefaultCssClass = "default", c.LoadingIconCssClass = "loading", c.AlertIconCssClass = "alert", 
            c.ShowIconCssClass = "showIcon", c.OfficeFabricIconPrefixCssClass = "ms-font-color-neutralSecondaryAlt ms-Icon ms-Icon--", 
            c.notificationContainerHostClassSelector = ".infonav-notificationHost", c;
        }(a.InfoNavClientControl));
        b.NotificationControl = c;
    }(b = a.Notifications || (a.Notifications = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(d, e) {
            b.call(this, d, e), this._linguisticSchemaWarningShown = !1;
            var f = c._ModelSelectionControlHtml.replace("{modelSelectionLabel}", a.Strings.ModelSelectionControlPulldownDescriptionText);
            this._controlRoot = $(f), this._dataSourceListContainer = this._controlRoot.find(".infonavSelect"), 
            this._pinBtn = this._controlRoot.find(".pinBtn"), this._pinBtn.on(a.DOMConstants.mouseClickEventName, this, this.onPinDataSourceBtnClick), 
            this._textMeasurementElem = this._controlRoot.find(".textMeasurementElem"), this._errorElem = this._controlRoot.find(".modelSelectionError"), 
            this._errorElem.text(a.Strings.modelSelectionHasErrors), this.hide(), d.append(this._controlRoot);
        }
        return __extends(c, b), c.prototype._onInterpretSuccess = function(a) {
            this.applyInterpretResponse(a.response);
        }, c.prototype._onInterpretResultChanged = function(a) {
            this.applyInterpretResponse(a.response);
        }, c.prototype.applyInterpretResponse = function(b) {
            a.Utility.throwIfNullOrUndefined(b, this, "ApplyInterpretResult", "response"), b.isEmpty(!1) || (this.populateDataSourceList(b), 
            this.show()), this.showLinguisticSchemaNotification(b.results);
        }, c.prototype.populateDataSourceList = function(b) {
            for (var c = this._controlRoot.find("select"), d = $("<select />"), e = b.results, f = new Array(), g = !1, h = 0; h < e.length; h++) {
                var i = e[h], j = this.connectionGroup.getDataSourceProperties(i.databaseName), k = $("<option />");
                k.attr("value", i.databaseName), k.attr("datasource-index", h.toString()), k.text(j.name), 
                h === b.resultIndex && (k.prop("selected", !0), this._currentWorkbookId = i.databaseName, 
                this.updateDatasourceListWidth(j.name), h === b.defaultResultIndex ? this._pinBtn.addClass("pinned") : this._pinBtn.removeClass("pinned")), 
                a.StringExtensions.isNullOrEmpty(i.error) || (k.attr(a.DOMConstants.disabledAttributeOrValue, a.DOMConstants.disabledAttributeOrValue), 
                k.addClass("disabledOption"), g = !0), f.push(k);
            }
            g ? this._errorElem.show() : this._errorElem.hide(), d.append(f), d.on("change", this, this.onDataSourceSelectChange), 
            c.replaceWith(d);
        }, c.prototype.updateDatasourceListWidth = function(a) {
            var b = this;
            window.setTimeout(function() {
                b._textMeasurementElem.text(a);
                var d = Math.min(c._maxModelDropdownWidthPx, b._textMeasurementElem.width() + c._selectChevronWidthPx);
                b._dataSourceListContainer.width(d);
            }, 0);
        }, c.prototype.onDataSourceSelectChange = function(b) {
            var c = b.data, d = $(b.currentTarget).find(":selected"), e = d.attr("value");
            c.updateDatasourceListWidth(d.text());
            var f = new a.UserChangedModelEventArgs(c._currentWorkbookId, e);
            c.connectionGroup.telemetryService.notifyUserChangedModel(12, f), c.connectionGroup.interpretService._setResultSources(e, "");
        }, c.prototype.onPinDataSourceBtnClick = function(a) {
            var b = a.data;
            if (b._pinBtn.toggleClass("pinned"), b._pinBtn.hasClass("pinned")) {
                var c = b._currentWorkbookId;
                b.connectionGroup.interpretService._setResultSources(c, c);
            } else b.connectionGroup.interpretService._setDefaultResultSource(null);
        }, c.prototype.showLinguisticSchemaNotification = function(b) {
            var d = this;
            if (!(!this.connectionGroup.isUserAdmin || this._linguisticSchemaWarningShown || this.connectionGroup.appCache && this.connectionGroup.appCache.getData().wasLinguisticSchemaWarningShown)) {
                for (var e = new Array(), f = 0; f < b.length; f++) 1 & b[f].warnings && e.push(b[f].databaseName);
                if (e.length > 0) {
                    this._linguisticSchemaWarningShown = !0;
                    var g, h = this.connectionGroup.getDataSourceProperties(e[0]);
                    a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(h.url) ? g = $("<span/>") : (g = $("<a/>"), 
                    g.attr(a.DOMConstants.hrefAttribute, h.url), g.attr(a.DOMConstants.targetAttribute, a.DOMConstants.blankValue)), 
                    g.text(h.name);
                    var i = e.length > 1 ? a.Strings.linguisticSchemaMultipleWorkbookWarningTemplate : a.Strings.linguisticSchemaSingleWorkbookWarningTemplate, j = i.replace(c._linguisticSchemaWarningWorkbookLinkPlaceholder, a.Utility.getOuterHtml(g));
                    this.connectionGroup.bridge.showNotification(c.LinguisticSchemaWarningId, a.Strings.linguisticSchemaWarningTitle, $(c._linguisticSchemaWarningHtml.replace("{WarningContent}", j).replace("{WarningInfoLinkText}", a.Strings.linguisticSchemaWarningMoreInfoLink)), function() {
                        if (d.connectionGroup.appCache) {
                            var a = d.connectionGroup.appCache.getData();
                            a.wasLinguisticSchemaWarningShown = !0, d.connectionGroup.appCache.updateData(a);
                        }
                    });
                }
            }
        }, c._ModelSelectionControlHtml = "<div class='in_ModelSelectionControl'><div class='modelSelectionLabel'>{modelSelectionLabel}</div><div class='infonavSelect'><select></select></div><div class='pinBtn'></div><div class='textMeasurementElem'></div><div class='modelSelectionError'></div></div>", 
        c._linguisticSchemaWarningWorkbookLinkPlaceholder = "{WorkbookLink}", c._linguisticSchemaWarningHtml = "<div>{WarningContent}</div><div><a href='http://go.microsoft.com/fwlink/?LinkID=287123' target='_blank'>{WarningInfoLinkText}</a></div>", 
        c._selectChevronWidthPx = 20, c._maxModelDropdownWidthPx = 266, c.LinguisticSchemaWarningId = "88b0854b-f266-4e02-8584-3bfbab22aa48", 
        c;
    }(a.InfoNavConnectedClientControl);
    a.ModelSelectionControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    !function(a) {
        a[a.LightBlue = 0] = "LightBlue", a[a.Blue = 1] = "Blue", a[a.Green = 2] = "Green", 
        a[a.Orange = 3] = "Orange", a[a.Red = 4] = "Red", a[a.Gray = 5] = "Gray";
    }(a.CollageItemColor || (a.CollageItemColor = {}));
    var b = (a.CollageItemColor, function() {
        function b(c) {
            var d = this;
            this._position = {
                x: -1,
                y: -1
            }, this._offset = {
                left: 0,
                top: 0
            }, this._defaultIcon = 1, this._color = 1, this._itemJson = null, this._isDisposed = !1, 
            this._layout = null, this._predefinedIconElem = null, this._userDefinedIconElem = null, 
            this._textElem = null, this._layout = $(b.CollageItemHtml), this._predefinedIconElem = this._layout.find(".collageItemIcon.predefined"), 
            this._userDefinedIconElem = this._layout.find(".collageItemIcon.userDefined"), this._textElem = this._layout.find(b.CollageItemTextSelector), 
            this.source = c, this._layout.on(a.DOMConstants.mouseClickEventName, function() {
                $(d).trigger(b.CollageItemClickedEventName, d);
            }), this._layout.find(".editItemBtn").on(a.DOMConstants.mouseClickEventName, function(a) {
                a.stopPropagation(), $(d).trigger(b.CollageItemUpdateActionClickedEventName, d);
            }), this._layout.find(".deleteItemBtn").on(a.DOMConstants.mouseClickEventName, function(a) {
                a.stopPropagation(), $(d).trigger(b.CollageItemDeleteActionClickedEventName, d);
            });
        }
        return b.prototype.dispose = function() {
            var a = this;
            this.isVisible = !1, this._isDisposed = !0, window.setTimeout(function() {
                a._layout.remove(), a._itemJson = null;
            }, b.Css3TransitionSpeedMs);
        }, Object.defineProperty(b.prototype, "source", {
            get: function() {
                return this._itemJson;
            },
            set: function(a) {
                this._itemJson = a, this.populateLayout();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "layout", {
            get: function() {
                return this._layout;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "position", {
            get: function() {
                return this._position.x >= 0 && this._position.y >= 0 ? this._position : null;
            },
            set: function(a) {
                this._itemJson.PositionX = a.x, this._itemJson.PositionY = a.y, this._position = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "offset", {
            get: function() {
                return this._offset;
            },
            set: function(b) {
                this._layout.css(a.CssConstants.leftProperty, b.left), this._layout.css(a.CssConstants.topProperty, b.top), 
                this._offset = b;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "width", {
            get: function() {
                return b.TileWidth;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "height", {
            get: function() {
                return 1 === this._itemJson.TileSize ? b.TileBigHeight : b.TileSmallHeight;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "isVisible", {
            get: function() {
                return this._layout.hasClass(b.CollageItemVisibleClass);
            },
            set: function(a) {
                a === !0 ? this._layout.addClass(b.CollageItemVisibleClass) : this._layout.removeClass(b.CollageItemVisibleClass);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "backgroundImageUrl", {
            get: function() {
                return this._itemJson.ImageUrl && this._itemJson.ImageUrl.length > 0 ? a.Utility.extractUrlFromCssBackgroundImage(this._userDefinedIconElem.css(a.CssConstants.backgroundImageProperty)) : null;
            },
            set: function(c) {
                var d = this;
                if (a.StringExtensions.isNullOrEmpty(c)) this._userDefinedIconElem.hide(), this._itemJson.ImageUrl = ""; else {
                    var e = new Image();
                    e.onerror = function() {
                        d._isDisposed || (d._userDefinedIconElem.hide(), $(d).trigger(b.CollageItemBackgroundImgLoadErrorEventName, d), 
                        d._itemJson.ImageUrl = "");
                    }, e.onload = function() {
                        d._isDisposed || (d._userDefinedIconElem.css(a.CssConstants.backgroundImageProperty, "url('" + e.src + "')"), 
                        d._userDefinedIconElem.css(a.CssConstants.backgroundSizeProperty, a.CssConstants.coverValue), 
                        d._userDefinedIconElem.show(), d._itemJson.ImageUrl = c, $(d).trigger(b.CollageItemBackgroundImgLoadedEventName, d));
                    }, e.src = c;
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "text", {
            get: function() {
                return this._textElem.text();
            },
            set: function(a) {
                "string" == typeof a && (this._textElem.text(a), this._itemJson.Utterance = a);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "defaultIcon", {
            get: function() {
                return this._defaultIcon;
            },
            set: function(a) {
                this._predefinedIconElem.attr("class", "collageItemIcon predefined"), this._predefinedIconElem.addClass(b.getCssClassForCollageImage(a)), 
                this._defaultIcon = this._itemJson.DefaultImageIndex = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "size", {
            get: function() {
                return this._layout.hasClass(b.CollageItemSmallClass) ? 0 : 1;
            },
            set: function(a) {
                0 === a ? this._layout.addClass(b.CollageItemSmallClass) : this._layout.removeClass(b.CollageItemSmallClass), 
                this._itemJson.TileSize = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "color", {
            get: function() {
                return this._color;
            },
            set: function(c) {
                var d = b.getHexColorFromCollageColorIndex(c);
                this._layout.css(a.CssConstants.backgroundColorProperty, d), this._userDefinedIconElem.css(a.CssConstants.backgroundColorProperty, d), 
                this._predefinedIconElem.css(a.CssConstants.backgroundColorProperty, d), this._color = c, 
                this._itemJson.ThemeColorIndex = c;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "id", {
            get: function() {
                return this._itemJson.ItemId;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.add_onClickHandler = function(a, c) {
            $(this).on(b.CollageItemClickedEventName, c, a);
        }, b.prototype.add_onUpdateActionClickHandler = function(a, c) {
            $(this).on(b.CollageItemUpdateActionClickedEventName, c, a);
        }, b.prototype.add_onDeleteActionClickHandler = function(a, c) {
            $(this).on(b.CollageItemDeleteActionClickedEventName, c, a);
        }, b.prototype.add_onBackgroundImageLoadError = function(a, c) {
            $(this).on(b.CollageItemBackgroundImgLoadErrorEventName, c, a);
        }, b.prototype.add_onBackgroundImageLoaded = function(a, c) {
            $(this).on(b.CollageItemBackgroundImgLoadedEventName, c, a);
        }, Object.defineProperty(b.prototype, "isAddTile", {
            get: function() {
                return 9 === this._defaultIcon;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.populateLayout = function() {
            var a = this._itemJson, c = (0 === a.TileSize, 9 === a.DefaultImageIndex);
            return this.position = {
                x: 0 || a.PositionX,
                y: 0 || a.PositionY
            }, c ? (this.defaultIcon = 9, this.size = 0, this._layout.addClass(b.AddCollageCssClassName), 
            void this._textElem.remove()) : (this.size = a.TileSize, this.color = a.ThemeColorIndex, 
            this.backgroundImageUrl = a.ImageUrl, this.defaultIcon = a.DefaultImageIndex, void (this.text = a.Utterance));
        }, b.getCollageImageFromCssClass = function(a) {
            var c = b.CollageDefaultImageCssMappings.filter(function(b) {
                return b.cssClass === a;
            });
            return 1 === c.length ? c[0].imageType : 0 === c.length ? 5 : null;
        }, b.getCssClassForCollageImage = function(a) {
            var c = b.CollageDefaultImageCssMappings.filter(function(b) {
                return b.imageType === a;
            });
            return 1 === c.length ? c[0].cssClass : 0 === c.length ? b.GeneralChartCollageCssClassName : null;
        }, b.getHexColorFromCollageColorIndex = function(a) {
            return b.CollageColorMap[a];
        }, b.CollageItemHtml = "<div class='collageItem' ><div class='collageItemLayout' > <div class= 'collageItemIcon predefined'/><div class= 'collageItemIcon userDefined'/><div class='actionsContainer'><div class='actionBtn editItemBtn'></div><div class='actionBtn deleteItemBtn'></div></div><div class='collageItemTitleContainer'><span class='collageItemText'></span></div></div></div>", 
        b.CollageItemTextSelector = ".collageItemText", b.CollageItemSelector = ".collageItem", 
        b.CollageItemVisibleClass = "visible", b.TileWidth = 250, b.TileSmallHeight = 120, 
        b.TileBigHeight = 250, b.Css3TransitionSpeedMs = 250, b.CollageItemSmallClass = "small", 
        b.GeneralCollageCssClassName = "general", b.FavoriteCollageCssClassName = "favorite", 
        b.MoneyCollageCssClassName = "money", b.ColumnChartCollageCssClassName = "columnChart", 
        b.LineChartCollageCssClassName = "lineChart", b.GeneralChartCollageCssClassName = "generalChart", 
        b.PieChartCollageCssClassName = "pieChart", b.NumberCollageCssClassName = "number", 
        b.NoneCollageCssClassName = "none", b.AddCollageCssClassName = "add", b.PredefinedIconCssClassName = "predefined", 
        b.CollageDefaultImageCssMappings = [ {
            imageType: 1,
            cssClass: b.GeneralCollageCssClassName
        }, {
            imageType: 8,
            cssClass: b.FavoriteCollageCssClassName
        }, {
            imageType: 2,
            cssClass: b.MoneyCollageCssClassName
        }, {
            imageType: 3,
            cssClass: b.ColumnChartCollageCssClassName
        }, {
            imageType: 4,
            cssClass: b.LineChartCollageCssClassName
        }, {
            imageType: 5,
            cssClass: b.GeneralChartCollageCssClassName
        }, {
            imageType: 6,
            cssClass: b.PieChartCollageCssClassName
        }, {
            imageType: 7,
            cssClass: b.NumberCollageCssClassName
        }, {
            imageType: 0,
            cssClass: b.NoneCollageCssClassName
        }, {
            imageType: 9,
            cssClass: b.AddCollageCssClassName
        } ], b.CollageColorMap = [ "#2C95FF", "#0072C6", "#67999A", "#FF9934", "#930B39", "#999999" ], 
        b.CollageItemClickedEventName = "itemClicked", b.CollageItemDeleteActionClickedEventName = "itemDeleted", 
        b.CollageItemUpdateActionClickedEventName = "itemUpdated", b.CollageItemBackgroundImgLoadErrorEventName = "backgroundImageLoadError", 
        b.CollageItemBackgroundImgLoadedEventName = "backgroundImageLoaded", b;
    }());
    a.CollageItemView = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {
            this._itemsSource = new Array(), this._items = new Array();
        }
        return Object.defineProperty(b.prototype, "items", {
            get: function() {
                return this._items;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "itemsSource", {
            get: function() {
                return this._itemsSource;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.update = function(b) {
            var c = this, d = JSON.stringify(this._itemsSource) !== JSON.stringify(b) || 0 === b.length;
            return d ? (b = b.filter(function(c) {
                var d = 1 === b.filter(function(a) {
                    return a.ItemId === c.ItemId;
                }).length;
                return d || a.Tracing.warning("Dulicate item (id: " + c.ItemId + ") found while rendering Collage"), 
                d;
            }), this._items = this._items.filter(function(a) {
                var c = !b.some(function(b) {
                    return a.id === b.ItemId;
                });
                return c && a.dispose(), !c;
            }), b.forEach(function(b) {
                var d = null, e = c._items.some(function(a) {
                    var c = a.id === b.ItemId;
                    return c && (d = a), c;
                });
                e ? d.source = b : c._items.push(new a.CollageItemView(b));
            }), this._itemsSource = b, !0) : !1;
        }, b;
    }();
    a.CollageControlModel = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(c, d) {
            this._controlRoot = null, this._controlVisibilityTimeoutId = -1, this._items = new Array(), 
            this._itemColumns = new Array(), this._displayColumns = new Array(), this._addTile = null, 
            a.Utility.throwIfNullOrUndefined(d, this, "ctor", "connectionGroup"), this._controlRoot = $(b.CollageControlHtml), 
            $(c).append(this._controlRoot), this._addTile = new a.CollageItemView(b.AddTileJson), 
            this._connectionGroup = d;
        }
        return Object.defineProperty(b.prototype, "items", {
            get: function() {
                return this._items;
            },
            set: function(a) {
                this._items = a, this.update();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "itemColumns", {
            get: function() {
                return this._itemColumns;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.showCollageItems = function() {
            this.setCollageItemVisibility(!0);
        }, b.prototype.hideCollageItems = function() {
            var a = $.Deferred();
            return this.setCollageItemVisibility(!1).done(function() {
                return a.resolve();
            }), a.promise();
        }, b.prototype.getNextInsertPosition = function() {
            var b = 0, c = 0, d = new Array();
            if (this._itemColumns.forEach(function(b, c) {
                a.ArrayExtensions.isUndefinedOrEmpty(b) && d.push(c);
            }), d.length > 0) b = d[0]; else {
                var e = this.getColumnDepthsInPixels(), f = a.Utility.getIndexOfMinValue(e), g = this._itemColumns[f];
                g && (c = g.length, b = f);
            }
            return {
                x: b,
                y: c
            };
        }, b.prototype.reconcileItemCoordinates = function() {
            var a = this._displayColumns.some(function(a, b) {
                return a.some(function(a) {
                    return !a.isAddTile && a.position.x !== b;
                });
            });
            if (!a) return !1;
            for (var b = 0; b < this._displayColumns.length; b++) for (var c = this._displayColumns[b], d = 0; d < c.length; d++) {
                var e = c[d];
                e.isAddTile || (e.position = {
                    x: b,
                    y: d
                });
            }
            return this.update(), !0;
        }, b.prototype.add_collageItemClickHandler = function(a, c) {
            $(this).on(b.CollageItemClickedEventName, c, a);
        }, b.prototype.add_collageItemUpdateActionClickHandler = function(a, c) {
            $(this).on(b.CollageItemUpdateActionClickedEventName, c, a);
        }, b.prototype.add_collageItemDeleteActionClickHandler = function(a, c) {
            $(this).on(b.CollageItemDeleteActionClickedEventName, c, a);
        }, b.prototype.add_addTileClickHandler = function(a, c) {
            $(this).on(b.AddTileClickedEventName, c, a);
        }, b.prototype.update = function() {
            this.populateItemColumns(), this.renderCollageItems(), !this._connectionGroup.isSamplesOnlyModeEnabled && this.isUserAdmin() ? this._controlRoot.attr(b.IsUserAdminAttribute, "true") : this._controlRoot.removeAttr(b.IsUserAdminAttribute);
        }, b.prototype.populateItemColumns = function() {
            this._itemColumns = Array.apply(null, Array(3));
            for (var c = 0; c < this._items.length; c++) {
                var d = this._items[c], e = d.position || this.getNextInsertPosition();
                this._itemColumns[e.x] || (this._itemColumns[e.x] = new Array()), d.position = e, 
                this._itemColumns[e.x].push(d);
            }
            for (var c = 0; c < b.MaxNumberOfColumns; c++) this._itemColumns[c] && this._itemColumns[c].sort(function(b, c) {
                return a.Utility.compareInt(b.position.y, c.position.y);
            });
            if (this._displayColumns = this._itemColumns.filter(function(a) {
                return a && a.length > 0;
            }), !this._connectionGroup.isSamplesOnlyModeEnabled && this.isUserAdmin()) {
                var f = Math.min(this._displayColumns.length, b.MaxNumberOfColumns);
                this._displayColumns[f] || (this._displayColumns[f] = new Array()), this._displayColumns[f].push(this._addTile);
            }
        }, b.prototype.isUserAdmin = function() {
            return 2 === (2 & this._connectionGroup.userPermissions);
        }, b.prototype.renderCollageItems = function() {
            for (var c = 0; c < this._displayColumns.length; c++) for (var d = this._displayColumns[c], e = 0, f = 0; f < d.length; f++) {
                var g = d[f];
                0 === this._controlRoot.find(g.layout).length && (this._controlRoot.append(g.layout), 
                g.add_onClickHandler(this.collageItem_Clicked, this), g.add_onDeleteActionClickHandler(this.collageItem_DeleteActionClicked, this), 
                g.add_onUpdateActionClickHandler(this.collageItem_UpdateActionClicked, this));
                var h = c * (a.CollageItemView.TileWidth + b.TileSeparation), i = e;
                g.offset = {
                    top: i,
                    left: h
                }, e += g.height + b.TileSeparation;
            }
            var j = this.getColumnDepthsInPixels().sort(a.Utility.compareInt).reverse()[0];
            this._controlRoot.height(j);
        }, b.prototype.getColumnDepthsInPixels = function() {
            return this._itemColumns.map(function(a) {
                var c = 0;
                return a && a.forEach(function(a) {
                    a.isAddTile || (c += a.height + b.TileSeparation);
                }), c;
            });
        }, b.prototype.collageItem_Clicked = function(a, c) {
            var d = a.data;
            c.isAddTile === !0 ? $(d).trigger(b.AddTileClickedEventName) : d._connectionGroup.telemetryService.notifyUserSelectedFeaturedQuestion(0), 
            $(d).trigger(b.CollageItemClickedEventName, c.text);
        }, b.prototype.collageItem_UpdateActionClicked = function(a, c) {
            var d = a.data;
            $(d).trigger(b.CollageItemUpdateActionClickedEventName, c.source);
        }, b.prototype.collageItem_DeleteActionClicked = function(a, c) {
            var d = a.data;
            $(d).trigger(b.CollageItemDeleteActionClickedEventName, c.source);
        }, b.prototype.setCollageItemVisibility = function(a) {
            for (var c = this, d = $.Deferred(), e = 0, f = 0; f < this._items.length; f++) {
                var g = this._items[f], h = Math.floor(Math.random() * b.CollageItemAnimationDelayBaseMaximum) * b.CollageItemAnimationDelayMultiplier;
                e = Math.max(h, e), this.setCollageItemVisibilityDelayed(g, a, h);
            }
            return window.setTimeout(function() {
                c.setCollageItemVisibilityDelayed(c._addTile, !0, 500), d.resolve();
            }, e), d.promise();
        }, b.prototype.setCollageItemVisibilityDelayed = function(a, b, c) {
            setTimeout(function() {
                a.isVisible = b;
            }, c);
        }, b.AddTileJson = {
            ItemId: "layoutGeneratedAddTile",
            Utterance: "",
            DisplayText: "",
            ImageUrl: "",
            TileSize: 0,
            ThemeColorIndex: 1,
            DefaultImageIndex: 9,
            PositionX: 3,
            PositionY: 1e3
        }, b.CollageControlHtml = "<div class='in_collageControl'></div>", b.CollageLayoutHostSelector = "#collageLayoutHost", 
        b.CollageControlSelector = ".in_collageControl", b.IsUserAdminAttribute = "data-admin", 
        b.CollageItemClickedEventName = "collageItemClicked", b.CollageItemUpdateActionClickedEventName = "collageItemUpdateClicked", 
        b.CollageItemDeleteActionClickedEventName = "collageItemDeleteClicked", b.AddTileClickedEventName = "addTileClicked", 
        b.MaxNumberOfColumns = 3, b.TileSeparation = 10, b.CollageItemAnimationDelayMultiplier = 100, 
        b.CollageItemAnimationDelayBaseMaximum = 5, b.FadeOutAnimationDuration = 250, b;
    }();
    a.CollageControlView = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(c, d) {
            var e = this;
            b.call(this, c, d), this._userPermissions = 0, this._view = new a.CollageControlView(c.get(0), this.connectionGroup), 
            this._model = new a.CollageControlModel(), this._showCollageOnEmptyStateTimerId = 0, 
            this._view.add_collageItemClickHandler(this.onCollageItemClicked, this), this._view.add_collageItemDeleteActionClickHandler(this.onCollageItemDeleteActionClicked, this), 
            this._view.add_collageItemUpdateActionClickHandler(this.onCollageItemUpdateActionClicked, this), 
            this._view.add_addTileClickHandler(this.onAddTileClicked, this), this._layoutHost = $("#collageLayoutHost");
            var f = $("#showFeaturedQuestions.in_navigationBtn");
            f.length > 0 && (f.on(a.DOMConstants.mouseClickEventName, function() {
                e.connectionGroup.telemetryService.notifyUserDisplayedFeaturedQuestions(5), e.connectionGroup.bridge.showCollage();
            }), f.attr(a.DOMConstants.titleAttribute, a.Strings.showFeaturedQuestionsLinkText)), 
            this.update(this.connectionGroup.featuredQuestions);
        }
        return __extends(c, b), c.prototype._onFeaturedQuestionsUpdated = function() {
            this.updateFromServer();
        }, Object.defineProperty(c.prototype, "model", {
            get: function() {
                return this._model;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "view", {
            get: function() {
                return this._view;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype._onConnectionGroupReady = function() {
            this.update(this.connectionGroup.featuredQuestions);
        }, c.prototype._onInterpretIssued = function() {
            window.clearTimeout(this._showCollageOnEmptyStateTimerId), this._showCollageOnEmptyStateTimerId = 0, 
            this.connectionGroup.bridge.hideCollage();
        }, c.prototype._onCollageVisibilityChanged = function(b) {
            var c = this;
            b ? (this._layoutHost.show(), this._view.showCollageItems(), this._currentInterpretResponse && (a.Tracing.verbose("Clearing current interpret result due to the Collage being shown"), 
            this.connectionGroup.bridge.clearInterpretResult(!0, !0))) : this._view.hideCollageItems().done(function() {
                c._layoutHost.hide();
            });
        }, c.prototype._onInterpretResultCleared = function(a) {
            var b = this;
            this.isVisible === !1 && a.clearUtterance === !0 && 0 === this._showCollageOnEmptyStateTimerId && (this._showCollageOnEmptyStateTimerId = window.setTimeout(function() {
                b.connectionGroup.bridge.showCollage();
            }, c.ShowCollageOnEmptyStateTimeoutMs));
        }, c.prototype.update = function(a) {
            var b = a || [];
            (this._model.update(b) || this.connectionGroup.userPermissions !== this._userPermissions) && (this._userPermissions = this.connectionGroup.userPermissions, 
            this._view.items = this._model.items, this.isVisible && !this.connectionGroup.interpretService.isInitialInterpretPending && this.connectionGroup.bridge.showCollage());
        }, c.prototype.onCollageItemClicked = function(a, b) {
            var c = a.data;
            c.connectionGroup.bridge.changeUserUtterance(b);
        }, c.prototype.onCollageItemUpdateActionClicked = function(b, c) {
            var d = b.data, e = new a.CollageItemEditor(d.connectionGroup);
            e.add_onSaveSuccess(d.onUserEditingCollageItemComplete, d), e.editItem(c);
        }, c.prototype.onCollageItemDeleteActionClicked = function(b, c) {
            var d = b.data, e = [ new a.ModalDialogAction(a.Strings.YesDialogOption, function() {
                c.ItemId && (d.connectionGroup.featuredQuestionsService.deleteFeaturedQuestion(c).done(function() {
                    d.updateFromServer();
                }).fail(function() {}), d.connectionGroup.bridge.hideDialog());
            }), new a.ModalDialogAction(a.Strings.NoDialogOption, function() {
                d.connectionGroup.bridge.hideDialog();
            }) ];
            d.connectionGroup.bridge.showPrompt(a.Strings.CollageDeleteItemDialogTitle, a.Strings.CollageDeleteItemDialogText, e, !0);
        }, c.prototype.onAddTileClicked = function(b) {
            var d = b.data;
            if (d._model.items.length < c.MaxCollageItemCount) {
                var e = new a.CollageItemEditor(d.connectionGroup);
                e.add_onSaveSuccess(d.onUserEditingCollageItemComplete, d);
                var f = d._view.getNextInsertPosition();
                if (e.createItem(f), d._view.reconcileItemCoordinates() === !0) {
                    var g = d._model.items.map(function(a) {
                        return a.source;
                    });
                    d.connectionGroup.featuredQuestionsService.updateFeaturedQuestions(g).done(function() {
                        d.updateFromServer().done(function() {
                            var a = d._view.getNextInsertPosition();
                            e.item.PositionX = a.x, e.item.PositionY = a.y;
                        });
                    });
                }
            } else d.connectionGroup.bridge.showMessage(a.Strings.CollageControlMaxNumberOfItemsMessageTitle, a.Strings.CollageControlMaxNumberOfItemsMessageText);
        }, c.prototype.onUserEditingCollageItemComplete = function(a) {
            var b = a.data;
            b.updateFromServer();
        }, c.prototype.updateFromServer = function() {
            var a = this, b = $.Deferred();
            return this.connectionGroup.featuredQuestionsService.getFeaturedQuestions().done(function(c) {
                a.update(c), b.resolve();
            }).fail(function() {
                b.reject();
            }), b.promise();
        }, c.MaxCollageItemCount = 50, c.ShowCollageOnEmptyStateTimeoutMs = 2e3, c;
    }(a.InfoNavConnectedClientControl);
    a.CollageControl = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(d) {
            b.call(this, c.DefaultTemplateProvider), this._itemView = null, this._controlRoot = null, 
            this._saveBtn = null, this._cancelBtn = null, this._utteranceInput = null, this._utteranceInputCaption = null, 
            this._backgroundImgUrlInput = null, this._backgroundImgUrlCaption = null, this._connectionGroup = null, 
            this._hasValidImage = !1, this._hasValidUtterance = !1, this._hasPendingUtterance = !1, 
            this._hasPendingImageLoad = !1, this._utterance = "", this._backgroundImgUrl = "", 
            this._itemDataSourceProperties = null, this._isNewItem = !1, a.Utility.throwIfNullOrUndefined(d, this, "ctor", d), 
            this._connectionGroup = d;
        }
        return __extends(c, b), Object.defineProperty(c.prototype, "item", {
            get: function() {
                return this._itemView.source;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.createItem = function(a) {
            this._isNewItem = !0, this.editItemInternal(null, a);
        }, c.prototype.editItem = function(a) {
            this._isNewItem = !1, this.editItemInternal(a);
        }, c.prototype.close = function() {
            this._connectionGroup.bridge.hideDialog();
        }, c.prototype.add_onSaveSuccess = function(a, b) {
            $(this).on(c.OnSaveSuccessEventName, b, a);
        }, c.prototype.editItemInternal = function(b, d) {
            var e, f = this;
            e = b ? b : JSON.parse(JSON.stringify(c.BaseItemTemplateJson)), d && (e.PositionX = d.x, 
            e.PositionY = d.y), this._itemView = new a.CollageItemView(e);
            var g = this._isNewItem ? a.Strings.CollageItemEditorAddItemTitle : a.Strings.CollageItemEditorEditItemTitle;
            this._connectionGroup.bridge.showCustomDialog(g, this.templateProvider.controlTemplate, [], function(a) {
                f.initializeLayout(a, e);
            });
        }, c.prototype.initializeLayout = function(b, c) {
            var d = this;
            this._controlRoot = b, this._controlRoot.find("input#utterance").on("input", this, function() {
                d.updateItem();
            }), this._controlRoot.find("input#bgImgUrl").on("change", this, function() {
                d.updateItem();
            }), this._controlRoot.find('input[type!="text"]').on("change", this, function() {
                d.updateItem(!0);
            }), this._controlRoot.find(".collageItemContainer").append(this._itemView.layout), 
            this._itemView.isVisible = !0, this._saveBtn = this._controlRoot.find("input#saveBtn"), 
            this._cancelBtn = this._controlRoot.find("input#cancelBtn"), this._backgroundImgUrlInput = this._controlRoot.find("input#bgImgUrl"), 
            this._utteranceInput = this._controlRoot.find("input#utterance"), this._utteranceInputCaption = this._controlRoot.find(".utteranceCaption.caption"), 
            this._backgroundImgUrlCaption = this._controlRoot.find(".bgImgUrlCaption.caption"), 
            this._cancelBtn.on(a.DOMConstants.mouseClickEventName, function() {
                return d.close();
            }), this._isNewItem === !0 ? this._saveBtn.on(a.DOMConstants.mouseClickEventName, this, this.onSaveNewItemClick) : this._saveBtn.on(a.DOMConstants.mouseClickEventName, this, this.onUpdateExistingItemClick), 
            this._itemView.add_onBackgroundImageLoaded(this.onBackgroundImageLoaded, this), 
            this._itemView.add_onBackgroundImageLoadError(this.onBackgroundImageLoadError, this), 
            this._isNewItem === !1 && (this.inputItem(c), window.setTimeout(function() {
                d.updateItem();
            }, 0)), this._controlRoot.find(".previewHost").animate({
                opacity: 1
            });
        }, c.prototype.inputItem = function(b) {
            this.setUtterance(b.Utterance), this.setItemSize(b.TileSize), this.setItemColor(b.ThemeColorIndex), 
            this.setDefaultImage(b.DefaultImageIndex), this.setIsTopLevelFeatured(b.IsFeatured), 
            a.Utility.isString(b.ImageUrl) && b.ImageUrl.length > 0 && this.setBackgroundImageUrl(b.ImageUrl), 
            this._connectionGroup.interpretService && this.issueUtterance(b.Utterance);
        }, c.prototype.setUtterance = function(a) {
            var b = this._controlRoot.find("input#utterance");
            b.val(a);
        }, c.prototype.setIsTopLevelFeatured = function(a) {
            var b = this._controlRoot.find("input#isTopLevel");
            b.prop("checked", a);
        }, c.prototype.setItemSize = function(a) {
            var b = this._controlRoot.find(".sizePicker");
            this.selectRadioButtonByValue(b, a);
        }, c.prototype.setItemColor = function(a) {
            var b = this._controlRoot.find(".bgColorPicker");
            this.selectRadioButtonByValue(b, a);
        }, c.prototype.setDefaultImage = function(a) {
            var b = this._controlRoot.find(".bgIconPicker");
            this.selectRadioButtonByValue(b, a);
        }, c.prototype.selectRadioButtonByValue = function(a, b) {
            var c = a.find('input[type="radio"][value="' + b + '"]');
            c.prop("checked", !0);
        }, c.prototype.setBackgroundImageUrl = function(a) {
            var b = this._controlRoot.find("input#bgImgUrl");
            b.val(a);
        }, c.prototype.onSaveNewItemClick = function(a) {
            var b = a.data;
            b.item.WorkbookIdentifier = b._connectionGroup.featuredQuestionsService.createWorkbookIdentifier(b.item, b._itemDataSourceProperties), 
            b._connectionGroup.featuredQuestionsService.addFeaturedQuestion(b.item).done(function() {
                b.close(), $(b).trigger(c.OnSaveSuccessEventName, b);
            }).fail(function() {});
        }, c.prototype.onUpdateExistingItemClick = function(a) {
            var b = a.data;
            b.item.WorkbookIdentifier = b._connectionGroup.featuredQuestionsService.createWorkbookIdentifier(b.item, b._itemDataSourceProperties), 
            b._connectionGroup.featuredQuestionsService.updateFeaturedQuestions([ b.item ]).done(function() {
                b.close(), $(b).trigger(c.OnSaveSuccessEventName, b);
            }).fail(function() {});
        }, c.prototype.onBackgroundImageLoadError = function(a) {
            var b = a.data;
            b._itemView.backgroundImageUrl && (b._hasValidImage = b._hasPendingImageLoad = !1, 
            b.validateForm());
        }, c.prototype.onBackgroundImageLoaded = function(a) {
            var b = a.data;
            b._itemView.backgroundImageUrl && (b._hasValidImage = !0, b._hasPendingImageLoad = !1, 
            b.validateForm());
        }, c.prototype.updateItem = function(b) {
            var d = this._utterance = this._utteranceInput.val(), e = this._backgroundImgUrl = this._backgroundImgUrlInput.val(), f = parseInt(this._controlRoot.find("input[name=itemSize]:checked").val()), g = parseInt(this._controlRoot.find("input[name=itemColor]:checked").val()), h = parseInt(this._controlRoot.find("input[name=itemIcon]:checked").val()), i = this._controlRoot.find("input[name=featuredQuestionLevel]").is(":checked");
            b !== !0 && (this._hasValidImage = !1, this._hasValidUtterance = !1, this._connectionGroup.interpretService && this._itemView.text !== d && d.length >= c.MinimumUtteranceLength ? this.issueUtterance(d) : d.length > c.MinimumUtteranceLength ? (this._hasValidUtterance = !0, 
            this._hasPendingUtterance = !1) : this._utteranceInputCaption.text(a.Strings.CollageItemEditorUtteranceInputCaption), 
            0 === e.length ? (this._hasValidImage = !0, this._itemView.backgroundImageUrl = "", 
            this._backgroundImgUrlCaption.text(a.Strings.CollageItemCustomImageUrlCaption)) : a.Utility.isValidUrl(e) ? e !== this._itemView.backgroundImageUrl ? (this._itemView.backgroundImageUrl = e, 
            this._backgroundImgUrlCaption.text(a.Strings.CollageItemCustomImageUrlLoadingCaption), 
            this._hasPendingImageLoad = !0) : this._hasValidImage = !0 : this._backgroundImgUrlCaption.text(a.Strings.CollageItemCustomImageUrlBadAddressCaption)), 
            this._itemView.text = d, this._itemView.color = g, this._itemView.size = f, this._itemView.defaultIcon = h, 
            this.item.IsFeatured = i, this.validateForm();
        }, c.prototype.validateForm = function() {
            this._utteranceInputCaption.removeClass(c.SuccessCssClass).removeClass(c.ErrorCssClass), 
            this._backgroundImgUrlCaption.removeClass(c.SuccessCssClass).removeClass(c.ErrorCssClass), 
            this._utterance.length >= c.MinimumUtteranceLength && !this._hasPendingUtterance && (this._hasValidUtterance ? (this._utteranceInputCaption.addClass(c.SuccessCssClass).text(a.Strings.CollageItemEditorUtteranceInputResultFoundCaption), 
            this.item.DisplayText = this.item.Utterance) : this._utteranceInputCaption.addClass(c.ErrorCssClass).text(a.Strings.CollageItemEditorUtteranceInputNoResultsCaption)), 
            this._backgroundImgUrl.length > 0 && !this._hasPendingImageLoad && (this._hasValidImage ? this._backgroundImgUrlCaption.addClass(c.SuccessCssClass).text(a.Strings.CollageItemCustomImageUrlSuccessCaption) : this._backgroundImgUrlCaption.addClass(c.ErrorCssClass).text(a.Strings.CollageItemCustomImageUrlLoadErrorCaption)), 
            this._hasValidUtterance && this._hasValidImage ? this._saveBtn.removeAttr(a.DOMConstants.disabledAttributeOrValue) : this._saveBtn.attr(a.DOMConstants.disabledAttributeOrValue, a.DOMConstants.disabledAttributeOrValue);
        }, c.prototype.issueUtterance = function(b) {
            var c = this;
            this._hasPendingUtterance = !0, this._utteranceInputCaption.text(a.Strings.CollageItemEditorUtteranceInputSearchingCaption), 
            this._connectionGroup.interpretService.interpretAsync(b, null, function(a) {
                if (a.response.isEmpty(!1)) c._hasValidUtterance = !1; else {
                    var b = a.response.result, d = c._connectionGroup.getDataSourceProperties(b.databaseName);
                    c._itemDataSourceProperties = d, c._hasValidUtterance = !0;
                }
                c._hasPendingUtterance = !1, c.validateForm();
            }, function() {
                c._hasValidUtterance = c._hasPendingUtterance = !1, c.validateForm();
            });
        }, c.DefaultTemplateProvider = new a.CollageItemEditorTemplateProvider(), c.OnSaveSuccessEventName = "CollageItemEditorSuccessfulSave", 
        c.BaseItemTemplateJson = {
            Utterance: "",
            DisplayText: "",
            ImageUrl: "",
            TileSize: 0,
            ThemeColorIndex: 0,
            DefaultImageIndex: 1,
            IsFeatured: !1,
            OwnerName: "unknown"
        }, c.ErrorCssClass = "error", c.SuccessCssClass = "success", c.MinimumUtteranceLength = 3, 
        c;
    }(a.ClientControl);
    a.CollageItemEditor = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function a(a, b, c, d) {
            this.utterance = a, this.displayText = b, this.staticUri = c, this.databaseName = d;
        }
        return a;
    }();
    a.HelpListItem = b;
    var c = function(c) {
        function d(b, e) {
            var f = this;
            c.call(this, b, e), this.inMainHelpPage = !0, this._pullOutText = null, this._controlRoot = null, 
            this._expanderBtn = null, this._contentFrame = null, this._contentFrameHost = null, 
            this._paneCaptionTextElem = null, this._contentUnavailableTimerId = 0, this._controlRoot = b, 
            this._controlRoot.addClass("helpViewerControl");
            var g = $(d.InnerLayoutHtml.replace("{panePulloutText}", a.Strings.helpViewerControlTitleText).replace("{feedbackBannerTitle}", a.Strings.helpViewerFeedbackBannerTitle).replace("{feedbackBannerText}", a.Strings.helpViewerFeedbackBannerText).replace("{helpForumUrl}", d.HelpForumUrl));
            this._controlRoot.append(g), this._contentFrameHost = this._controlRoot.find(".contentFrameHost"), 
            this._expanderBtn = this._controlRoot.find(".expanderBtn"), this._paneCaptionTextElem = this._controlRoot.find(".paneCaption .innerText"), 
            this._expanderBtn.on(a.DOMConstants.mouseClickEventName, this, this.onExpanderBtnClick), 
            this._pullOutText = this._controlRoot.find(".pullOutText"), window.addEventListener(a.DOMConstants.messageEventName, function(a) {
                f._handleHelpViewerMessage(a);
            }, !1), this.connectionGroup.getIsReady() && this.onGroupReady();
        }
        return __extends(d, c), Object.defineProperty(d.prototype, "isExpanded", {
            get: function() {
                return this._controlRoot.hasClass(d.ExpandedClassName);
            },
            enumerable: !0,
            configurable: !0
        }), d.prototype._onConnectionGroupReady = function() {
            this.onGroupReady();
        }, d.prototype._onInterpretSuccess = function(a) {
            this._hasInterpretResponse() && this.onResultDisplayed(a.response.result);
        }, d.prototype._onInterpretResultChanged = function(a) {
            this.onResultDisplayed(a.response.result);
        }, d.prototype._onCollageVisibilityChanged = function(a) {
            a && this.navigateToGeneralHelpPage();
        }, d.prototype._onInterpretResultCleared = function() {
            this.isExpanded || this.navigateToGeneralHelpPage();
        }, d.prototype.getFirstQuestionOfModel = function(a, b) {
            var c = this.connectionGroup.getFeaturedQuestions(a);
            return c && c.length > 0 ? c[0].Utterance : b;
        }, d.prototype.buildGeneralHelpUserInterface = function() {
            this.inMainHelpPage = !0;
            for (var c = [], e = this.connectionGroup.getListOfDatabaseNames(), f = 0; f < e.length; f++) {
                var g = this.connectionGroup.getDataSourceProperties(e[f]);
                if (g) {
                    var h = this.getFirstQuestionOfModel(e[f], "");
                    c.push(new b(h, g.name, g.helpContentUrl, e[f]));
                }
            }
            this.createHelpPaneUIWithCustomContent(d.HomeBannerUri, a.Strings.mainHelpPageTitle, a.Strings.mainHelpPageDescription, a.Strings.mainHelpPageWorkbookListTitle, c, !1), 
            this.addEvents();
        }, d.prototype.buildModelSpecificHelpUserInterface = function(c, e) {
            this.inMainHelpPage = !1;
            for (var f = this.connectionGroup.getFeaturedQuestions(e), g = [], h = 0; h < f.length; h++) g.push(new b(f[h].Utterance, f[h].DisplayText));
            this.createHelpPaneUIWithCustomContent(d.DefaultBannerUri, c.name.replace(".xlsx", ""), a.Strings.modelHelpPageDescription, a.Strings.modelHelpPageQuestionListTitle, g, !1), 
            this.addEvents();
        }, d.prototype.addEvents = function() {
            var b = this;
            this._contentFrameHost.find("li[data-utterance]").on(a.DOMConstants.mouseClickEventName, function(c) {
                var d = $(c.currentTarget).attr("static-uri");
                if (d) {
                    var e = $(c.currentTarget).attr("data-utterance");
                    a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(e) || b.connectionGroup.bridge.changeUserUtterance(e), 
                    b.navigateToUrl(d);
                } else {
                    var e = $(c.currentTarget).attr("data-utterance");
                    if (a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(e)) {
                        var f = $(c.currentTarget).attr("databasename");
                        if (f) {
                            var g = b.connectionGroup.getDataSourceProperties(f);
                            b.buildModelSpecificHelpUserInterface(g, f);
                        }
                    } else b.connectionGroup.bridge.changeUserUtterance(e);
                }
            });
            var c = this._contentFrameHost.find(d.FeaturedSelector);
            c && c.on(a.DOMConstants.mouseClickEventName, function() {
                b.connectionGroup.bridge.showCollage();
            });
            var e = this._contentFrameHost.find(d.AddSelector);
            e && e.on(a.DOMConstants.mouseClickEventName, function() {
                var c = new a.CollageItemEditor(b.connectionGroup);
                c.add_onSaveSuccess(b.onUserEditingCollageItemComplete, b), c.createItem({
                    x: -1,
                    y: -1
                });
            }), window.clearTimeout(this._contentUnavailableTimerId), this._paneCaptionTextElem.text(a.Strings.emptyResultDescriptionText);
        }, d.prototype.onUserEditingCollageItemComplete = function(a) {
            var b = a.data;
            b.inMainHelpPage ? b.connectionGroup.bridge.notifyFeaturedQuestionsUpdated() : b.connectionGroup.invalidate();
        }, d.prototype.createHelpPaneUIWithCustomContent = function(b, c, e, f, g, h) {
            var i = $(d.helpPaneHtmlSkeleton.replace("{BANNERURL}", b)), j = i.find(".itemList");
            if (0 === g.length) j.text(a.Strings.helpPageNoItemsListed); else for (var k = 0; k < g.length; k++) {
                var l = $("<li></li>");
                l.attr("data-utterance", g[k].utterance), l.text(g[k].displayText), g[k].staticUri && l.attr("static-uri", g[k].staticUri), 
                g[k].databaseName && l.attr("databasename", g[k].databaseName), j.append(l);
            }
            i.find(".reportTitle").text(c), i.find(".description").text(e), i.find(".exampleQuestionsTitle").text(f), 
            i.find(".addText").text(a.Strings.helpPageAddFeaturedQuestion), i.find(".featuredText").text(a.Strings.helpPageFeaturedQuestions), 
            i.find(".reportTitle").attr("title", c), this._contentFrameHost.empty(), this._contentFrameHost.append(i), 
            this._contentFrame = this._contentFrameHost.find("#helpPane"), this.connectionGroup.isUserAdmin || this._contentFrameHost.find(d.AddSelector).remove(), 
            h && this._contentFrameHost.find(d.FeaturedSelector).remove();
        }, d.prototype.onResultDisplayed = function(a) {
            var b = this.connectionGroup.getDataSourceProperties(a.databaseName), c = b.helpContentUrl;
            if (c ? (this.inMainHelpPage = !1, this.navigateToUrl(c)) : this.buildModelSpecificHelpUserInterface(b, a.databaseName), 
            !a.isEmpty(!1)) {
                var e = this.connectionGroup.appCache.getData();
                e.dataSourceHelpData || (e.dataSourceHelpData = {}), e.dataSourceHelpData[d.HelpOptionsKey] || (e.dataSourceHelpData[d.HelpOptionsKey] = {}), 
                e.dataSourceHelpData[d.HelpOptionsKey].helpAutoShown || (e.dataSourceHelpData[d.HelpOptionsKey].helpAutoShown = !0, 
                this.expand()), this.connectionGroup.appCache.updateData(e);
            }
        }, d.prototype.expand = function() {
            this.isExpanded || this.toggleExpansionState();
        }, d.prototype.collapse = function() {
            this.isExpanded && this.toggleExpansionState();
        }, d.prototype.onGroupReady = function() {
            if (!a.StringExtensions.isNullOrEmpty(this.connectionGroup.generalHelpPageUrl)) {
                this._controlRoot.css(a.CssConstants.displayProperty, a.CssConstants.blockValue), 
                this.navigateToGeneralHelpPage();
                var b = this.connectionGroup.appCache.getData();
                b.firstRunHelpShown || (this.expand(), b.firstRunHelpShown = !0, this.connectionGroup.appCache.updateData(b));
            }
        }, d.prototype.navigateToGeneralHelpPage = function() {
            a.StringExtensions.isNullOrEmpty(this.connectionGroup.generalHelpPageUrl) || this.buildGeneralHelpUserInterface();
        }, d.prototype.navigateToUrl = function(b) {
            var c = this;
            window.clearTimeout(this._contentUnavailableTimerId), this._paneCaptionTextElem.text(a.Strings.helpViewerHelpLoadingCaptionText), 
            this._contentUnavailableTimerId = window.setTimeout(function() {
                c._paneCaptionTextElem.text(a.Strings.helpViewerHelpUnavailableCaptionText);
            }, d.HelpPageLoadTimeoutMs), this._contentFrame && this._contentFrame.attr("src") === b || (this._contentFrame && this._contentFrame.remove(), 
            this._contentFrame = $('<iframe class="contentFrame"></iframe>'), this._contentFrame.attr("src", b), 
            this._contentFrameHost.append(this._contentFrame), this._contentFrame.css(a.CssConstants.displayProperty, a.CssConstants.noneValue));
        }, d.prototype.toggleExpansionState = function() {
            !this.isExpanded && (!this._hasInterpretResponse() || this._hasInterpretResponse() && this._currentInterpretResponse.result.isEmpty(!1)) && this.navigateToGeneralHelpPage(), 
            this._controlRoot.toggleClass(d.ExpandedClassName);
        }, d.prototype.onExpanderBtnClick = function(b) {
            var c = b.data;
            c.toggleExpansionState(), c._pullOutText.html(c.isExpanded ? a.Strings.emptyResultDescriptionText : a.Strings.helpViewerControlTitleText);
        }, d.prototype._handleHelpViewerMessage = function(b) {
            var c;
            if (b.data) try {
                if (c = JSON.parse(b.data), "PowerBIQnAHelpPage" !== c.sender) return;
            } catch (e) {
                return;
            }
            c.utterance ? (this.connectionGroup.telemetryService.notifyUserSelectedFeaturedQuestion(4), 
            this.connectionGroup.bridge.changeUserUtterance(c.utterance)) : c.action === d.PageReadyHelpPageAction ? this._contentFrame.css(a.CssConstants.displayProperty, a.CssConstants.blockValue) : c.action === d.ShowCollageHelpPageAction && (this.connectionGroup.telemetryService.notifyUserDisplayedFeaturedQuestions(3), 
            this.connectionGroup.bridge.showCollage());
        }, d.HelpForumUrl = "http://go.microsoft.com/fwlink/?LinkId=390059", d.InnerLayoutHtml = '<div class="innerLayout"><div class="paneHandle"><div class = "expanderBtn"></div><div class="title"> <span class="pullOutText">{panePulloutText}</span></div></div><div class="paneCaption"><div class="innerText"></div></div><div class="contentFrameHost" ></div><a class="feedbackContentHost" href="{helpForumUrl}" target="_blank"><div class="title" >{feedbackBannerTitle}</div><div class="content" >{feedbackBannerText}</div></a></div>', 
        d.AnimationSpeedMs = 250, d.DefaultBannerUri = "https://sampleimages.blob.core.windows.net/imagessu11/DefaultBanner.png", 
        d.HomeBannerUri = "https://sampleimages.blob.core.windows.net/imagessu11/HomeBanner.png", 
        d.HelpOptionsKey = "HelpOptionsKey", d.HelpPageLoadTimeoutMs = 3e3, d.ExpandedClassName = "expanded", 
        d.AddSelector = ".add", d.FeaturedSelector = ".featured", d.ShowCollageHelpPageAction = "showCollage", 
        d.PageReadyHelpPageAction = "pageReady", d.helpPaneHtmlSkeleton = '<div id="helpPane">   <div class="imageFrame" style="background:url(\'{BANNERURL}\')">       <div class="cssMask"></div>       <h1 class="reportTitle"></h1>   </div>   <h2 class="description"></h2>   <h2 class="exampleQuestionsTitle"></h2>   <div class="questionList"><ul class="itemList"></ul></div>   <hr class="divider">   <div class="add">       <div class="addIcon"></div>       <p class="addText"></p>   </div>   <div class="featured">       <div class="featuredIcon"></div>       <p class="featuredText"></p>   </div></div>', 
        d;
    }(a.InfoNavConnectedClientControl);
    a.HelpViewerControl = c;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = (jsCommon.TraceType, function(b) {
        function c(d) {
            var e = this;
            b.call(this, d, 17), this._infoNavModelMap = null, this._featuredQuestionsService = null, 
            this._spHostUrl = null, this._spHostTitle = null, this._spBiCenterAppProductId = null, 
            this._globalServiceClusterUrl = null, this._securityToken = null, this._managementSecurityToken = null, 
            this._appCache = null, this._sessionAppCache = null, this._samplesDialogElem = null, 
            this._uiInitializationDeferred = !0, this._spSiteId = null, this._spWebId = null, 
            this._userPermissions = 0, this._isRuntimeModelingEnabled = !1, this._isSamplesOnlyEnabled = !1, 
            this._isSampleUpgradeAvailable = !1, this._isUsageReportingEnabled = !1, this._noLicensePageUrl = null, 
            this._isGeocodingEnabled = !1, this._isLoadingAppMetadataNotificationDisplayed = !1, 
            this._appMetadataLoadingNotificationTimeoutId = 0, this.uiInitializedOnce = !1, 
            this._spHostUrl = a.QueryStringUtil.getQueryStringValue(c._sharepointSiteUrlParamName), 
            this._spHostTitle = a.QueryStringUtil.getQueryStringValue(c._sharepointSiteTitleParamName), 
            a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(this._spHostUrl) && (this._spHostUrl = c.getSPHostUrlFromInfoNavShortUrl()), 
            a.Utility.throwIfNullEmptyOrWhitespaceString(this._spHostUrl, this, "ctor", "spHostUrl"), 
            this._appCache = new a.InfoNavAppLocalCache(this._spHostUrl), this._sessionAppCache = new a.InfoNavAppSessionCache(this._spHostUrl);
            var f = this._appCache.getData();
            a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(this._spHostTitle) && f && (this._spHostTitle = f.spWebTitle), 
            f && (this._isSamplesOnlyEnabled = f.isSamplesOnlyEnabled), window.addEventListener(a.DOMConstants.messageEventName, function(a) {
                e.handleSamplesDialogMessage(a);
            }, !1);
            var g = {
                cache: !0
            };
            $.ajaxSetup(g), this.invalidate(this._pageLoadActivity);
        }
        return __extends(c, b), c.requirementsMet = function() {
            var b = a.QueryStringUtil.getQueryStringValue(c._sharepointSiteUrlParamName), d = a.QueryStringUtil.getQueryStringValue(c._sharepointSiteTitleParamName), e = !a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(b) && !a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(d) && a.Utility.getProtocolFromUrl(b) === c._httpsProtocol;
            return e || (e = c.isInfoNavShortUrl()), e;
        }, c.getDocumentUrl = function(b) {
            var c = a.Utility.getDomainForUrl(b.SharePointDocument.WebProperties.WebUri), d = a.Utility.urlCombine(c, b.SharePointDocumentProperties.ServerRelativeUrl);
            return d += "?Web=1";
        }, c._createSamplesPageUrl = function(a, b, c, d, e, f) {
            return "/sharepointpages/SPIntegration/Samples/Pages/Samples.html?SpSiteId=" + a + "&SpWebId=" + b + "&SpListId=" + c + "&languageLocale=" + d + "&regionalLocale=" + e + "&IsFirstRun=" + f.toString();
        }, c.isInfoNavShortUrl = function() {
            return 0 === window.location.pathname.indexOf(c._infoNavAppPath) && window.location.pathname.length > c._infoNavAppPathLength;
        }, Object.defineProperty(c.prototype, "globalServiceClusterUri", {
            get: function() {
                return this._globalServiceClusterUrl;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getClusterUri = function() {
            return clusterUri;
        }, c.prototype.getSecurityToken = function() {
            return this._securityToken;
        }, c.prototype.getManagementSecurityToken = function() {
            return this._managementSecurityToken;
        }, c.prototype.getSpoContextToken = function() {
            return securityToken;
        }, c.prototype.getInfoNavModel = function(a) {
            return this._infoNavModelMap ? this._infoNavModelMap[a.toLowerCase()] : null;
        }, Object.defineProperty(c.prototype, "spHostUrl", {
            get: function() {
                return this._spHostUrl;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "initialUtterance", {
            get: function() {
                return a.QueryStringUtil.getQueryStringValue("k");
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isUserAdmin", {
            get: function() {
                return a.EnumExtensions.hasFlag(this.userPermissions, 1);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "userPermissions", {
            get: function() {
                return this._userPermissions;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isRuntimeModelingEnabled", {
            get: function() {
                return this._isRuntimeModelingEnabled;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isSamplesOnlyModeEnabled", {
            get: function() {
                return this._isSamplesOnlyEnabled;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.getIsUsageReportingEnabled = function() {
            return this._isUsageReportingEnabled;
        }, Object.defineProperty(c.prototype, "featuredQuestions", {
            get: function() {
                return this.appCache.getData().featuredQuestions;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "featuredQuestionsService", {
            get: function() {
                return this._featuredQuestionsService;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "isGeocodingEnabled", {
            get: function() {
                return this.getIsReady() || a.Utility.throwException(a.Errors.invalidOperation("isGeocodingEnabled should be invoked after host is ready")), 
                this._isGeocodingEnabled;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.createInfoNavShortUrl = function() {
            var b = a.Utility.getHostNameForUrl(this._spHostUrl), c = a.Utility.urlCombine(this.getInfoNavAppUrl(), b), d = {}, e = a.QueryStringUtil.getQueryStringValue("useHtml5PowerView");
            e && Boolean(e) && (d.useHtml5PowerView = "true");
            var f = a.QueryStringUtil.getQueryStringValue("serverTraceLevel");
            return f && (d.serverTraceLevel = f), a.StringExtensions.isNullOrEmpty(this.initialUtterance) || (d.k = this.initialUtterance), 
            a.Utility.urlCombine(c, a.QueryStringUtil.rebuildQueryString(d));
        }, c.prototype.initializeUI = function(b) {
            var d = this, e = c.getPowerBIUrl(this._spHostUrl, siteLanguage, siteCulture), f = {};
            f.parentSiteTitle = a.Strings.powerBIChromeBrandingText, f.spSiteUrl = this._spHostUrl, 
            f.disableTheming = !0, f.settingsLinks = [];
            var g = {};
            g.displayName = a.Strings.sharePointAppAddSamplesLinkLabel, g.onClick = function() {
                d.showSamplesDialog();
            }, f.settingsLinks[0] = g, f.appHelpPageUrl = c._helpPageUrl, f.openLinksInNewWindow = !0, 
            f.onCssLoadError = function() {
                d.modalDialogService.showError(a.Strings.fatalErrorDialogText, 3);
            };
            var h = (new CloudUX.AppChrome(f, b), $(c._appIconSelector));
            h.addClass(c._spAppIconClass), $("#backToParentSiteNavBtn").attr(a.DOMConstants.titleAttribute, a.Strings.backToBISiteLinkText), 
            $("#backToParentSiteNavBtn").attr(a.DOMConstants.hrefAttribute, e), $("#appActions").delay(500).fadeIn();
        }, c.prototype.showSamplesDialog = function() {
            var b = this;
            if (this._infoNavModelMap && !this._samplesDialogElem) {
                var d = null, e = null, f = null;
                for (var g in this._infoNavModelMap) {
                    var h = this._infoNavModelMap[g];
                    d = h.SharePointDocument.WebProperties.SiteId, e = h.SharePointDocument.WebProperties.WebId, 
                    f = h.SharePointDocument.ListId;
                    break;
                }
                var i = c._createSamplesPageUrl(d, e, f, siteLanguage, siteCulture, !1), j = c._samplesPageHtml.replace("{samplesPageUrl}", i);
                this._samplesDialogElem = $(j);
                var k = this._samplesDialogElem.find("iframe");
                k.load(function() {
                    var d = {};
                    d.__command = c._samplesDialogInitializeAction, d.host = b._spHostUrl, d.activityId = a.AppManager.current.activityId, 
                    d.contextToken = securityToken, d.languageLocale = siteLanguage, d.regionalLocale = siteCulture, 
                    k.get(0).contentWindow.postMessage(JSON.stringify(d), a.Utility.getDomainForUrl(window.location.href));
                }), $("body").append(this._samplesDialogElem), this._samplesDialogElem.fadeIn(250);
            }
        }, c.prototype.hideSamplesDialog = function() {
            var a = this;
            this._samplesDialogElem && (this.invalidate(), this._samplesDialogElem.fadeOut(250, function() {
                a._samplesDialogElem.remove(), a._samplesDialogElem = null;
            }));
        }, c.prototype.handleSamplesDialogMessage = function(b) {
            if (b.origin === a.Utility.getDomainForUrl(window.location.href)) {
                var d;
                if (b.data) try {
                    d = JSON.parse(b.data);
                } catch (e) {
                    return;
                }
                d.action === c._samplesDialogCloseAction && this.hideSamplesDialog();
            }
        }, c.prototype.getDataSourceProperties = function(b) {
            var d = this.getInfoNavModel(b);
            if (d) {
                var e = {};
                return e.name = d.Name, e.url = c.getDocumentUrl(d), e.lastModifiedTime = a.Utility.getDateFromWcfJsonString(d.SharePointDocumentProperties.LastModifiedTime, !0), 
                e.lastModifiedBy = d.SharePointDocumentProperties.LastModifiedBy, e.helpContentUrl = d.HelpContentUri, 
                e.sharePointDocument = d.SharePointDocument, e;
            }
            return null;
        }, c.prototype.getFeaturedQuestions = function(a) {
            var b = null, c = this.getInfoNavModel(a);
            return this.featuredQuestions && c && (b = this.featuredQuestions.filter(function(a) {
                var b = a.WorkbookIdentifier;
                return b.DocumentId === c.SharePointDocument.DocumentId && b.ListId === c.SharePointDocument.ListId;
            })), b;
        }, c.prototype.getListOfDatabaseNames = function() {
            var a = [];
            for (var b in this._infoNavModelMap) a.push(b);
            return a;
        }, c.prototype.getInfoNavAppUrl = function() {
            var a = c._infoNavAppUrlTemplate.exec(window.location.href);
            return a ? a[1] : null;
        }, c.getPowerBIUrl = function(a, b, c) {
            return "/sharepointpages/SPIntegration/PowerBI/Pages/PowerBI.html?languageLocale=" + b + "&regionalLocale=" + c + "&SPHostUrl=" + a;
        }, c.getSPHostUrlFromInfoNavShortUrl = function() {
            return 0 === window.location.pathname.indexOf(c._infoNavAppPath) ? a.Utility.urlCombine(c._httpsProtocol + "://", window.location.pathname.substr(c._infoNavAppPathLength)) : null;
        }, c.prototype._refreshMetadataInternal = function(b) {
            var d = this, e = b ? b.createChildActivity(20) : this.telemetryService.createNewActivity(20), f = this.tryGetCachedAppMetadataResult();
            return f ? (this._sessionAppCache.reset(), this.handleSuccessfulAppMetadataResult(f, e), 
            e) : (this._appMetadataLoadingNotificationTimeoutId = window.setTimeout(function() {
                d.showAppMetadataLoadingNotification();
            }, c._appMetadataNotificationTimeoutMs), this._getAppMetadataInternal(this._spHostUrl, e, function(a) {
                d.handleSuccessfulAppMetadataResult(a, e);
            }, function(b) {
                d.hideAppMetadataLoadingNotification();
                var f = a.HttpUtility.getErrorInfo(b);
                if (400 === b.status && f === c._infoNavUserDoesNotHaveLicenseException) return d._showNoLicensePage(), 
                void e.end(2, a.ActivityErrors.NoLicense);
                var g = a.Strings.sharePointAppLoadModelsErrorText;
                403 === b.status || 401 === b.status ? (g = a.Strings.notAuthenticatedErrorMessage, 
                e.end(2, a.ActivityErrors.NotAuthenticated)) : (a.ClientActivity.addErrorInfoIfPresent(e, b), 
                e.end(3, a.ActivityErrors.UnknownError)), d.modalDialogService.showError(g, 6, b);
            }), e);
        }, c.prototype.tryGetCachedAppMetadataResult = function() {
            var a = this._sessionAppCache.getData();
            return a && a.DatabaseAccessToken ? a : null;
        }, c.prototype.handleSuccessfulAppMetadataResult = function(a, b) {
            this.initializeAppMetadata(a), this.hideAppMetadataLoadingNotification();
            var c = this.initializeAppHost();
            c && this._raiseReadyEventInternal(), b.end(1);
        }, c.prototype.initializeAppMetadata = function(b) {
            if (this._securityToken = b.DatabaseAccessToken, this._managementSecurityToken = b.ManagementAccessToken, 
            this._spBiCenterAppProductId = b.BICenterAppProductId, this._globalServiceClusterUrl = b.GlobalServiceClusterUrl, 
            this._generalHelpPageUrl = b.GeneralHelpPageUrl, b.InfoNavModelMap) {
                this._infoNavModelMap = a.Utility.convertWcfToJsDictionary(b.InfoNavModelMap);
                for (var c in this._infoNavModelMap) {
                    var d = this._infoNavModelMap[c];
                    this._spSiteId = d.SharePointDocument.WebProperties.SiteId, this._spWebId = d.SharePointDocument.WebProperties.WebId;
                    break;
                }
                this._featuredQuestionsService = new a.FeaturedQuestionsService(this.bridge, this, this.appCache, this._spSiteId, this._spWebId);
            }
            this._userPermissions = b.WebPermissions, this._isRuntimeModelingEnabled = b.IsRuntimeModelingEnabled, 
            this._isSamplesOnlyEnabled = b.IsSamplesOnlyEnabled, this._isSampleUpgradeAvailable = b.IsSampleUpgradeAvailable, 
            this._spHostTitle = b.SPWebTitle, this._isGeocodingEnabled = b.IsGeocodeResultsEnabled, 
            this._isUsageReportingEnabled = b.IsUsageReportingEnabled;
            var e = this._appCache.getData();
            e.spWebTitle = b.SPWebTitle, e.featuredQuestions = b.FeaturedQuestions, e.isSamplesOnlyEnabled = b.IsSamplesOnlyEnabled, 
            e.generalHelpPageUrl = b.GeneralHelpPageUrl, this._appCache.updateData(e), this.getO365NavBar(b);
        }, c.prototype.initializeAppHost = function() {
            var b = this;
            if (this._uiInitializationDeferred && (a.StringExtensions.isNullOrEmpty(this.initialUtterance) || (window.location.hash = encodeURIComponent(this.initialUtterance))), 
            a.StringExtensions.isNullOrEmpty(this.getSecurityToken()) || this._isSampleUpgradeAvailable) {
                var d = [ new a.ModalDialogAction(a.Strings.dialogGoBackActionLabel, function() {
                    window.location.href = c.getPowerBIUrl(b._spHostUrl, siteLanguage, siteCulture);
                }) ];
                return this._isSamplesOnlyEnabled ? this.modalDialogService.showPrompt(a.Strings.sharePointAppNoSamplesTitle, a.Strings.sharePointAppNoSamplesMessage, d, !1) : this._isSampleUpgradeAvailable ? (d[1] = new a.ModalDialogAction(a.Strings.dialogCloseActionLabel, function() {
                    b.modalDialogService.hideDialog(), b._raiseReadyEventInternal();
                }), this.modalDialogService.showPrompt(a.Strings.sharePointAppNoSamplesTitle, a.Strings.sharePointAppNoSamplesMessage, d, !1)) : this.modalDialogService.showPrompt(a.Strings.sharePointAppNoModelsConfiguredTitle, a.Strings.sharePointAppNoModelsConfiguredMessage, d, !1), 
                !1;
            }
            return !0;
        }, c.prototype._showNoLicensePage = function() {
            var a = c._licensePageHtml.replace("{licensePageUrl}", this.noLicensePageUrl);
            $("body").append($(a));
        }, Object.defineProperty(c.prototype, "noLicensePageUrl", {
            get: function() {
                return this._noLicensePageUrl || (this._noLicensePageUrl = "/sharepointpages/SPIntegration/License/Pages/LicensePage.html?languageLocale=" + siteLanguage + "&regionalLocale=" + siteCulture), 
                this._noLicensePageUrl;
            },
            set: function(a) {
                this._noLicensePageUrl = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "appCache", {
            get: function() {
                return this._appCache;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.showAppMetadataLoadingNotification = function() {
            if (!this._isLoadingAppMetadataNotificationDisplayed) {
                var b = a.Strings.workbooksLoadingTimeoutText;
                this.notificationService.showNotification(c.AppMetadataLoadingNotificationId, a.Strings.workbooksLoadingTimeoutTitle, b, null, !1, 0, 1), 
                this._isLoadingAppMetadataNotificationDisplayed = !0;
            }
        }, c.prototype.hideAppMetadataLoadingNotification = function() {
            window.clearTimeout(this._appMetadataLoadingNotificationTimeoutId), this._isLoadingAppMetadataNotificationDisplayed && (this.notificationService.hideNotification(c.AppMetadataLoadingNotificationId), 
            this._isLoadingAppMetadataNotificationDisplayed = !1);
        }, c.prototype._getAppMetadataInternal = function(b, c, d, e) {
            var f = this, g = this.getSpoContextToken();
            if (!a.StringExtensions.isNullOrUndefinedOrWhiteSpaceString(g)) {
                var h = {};
                h.type = a.Utility.HttpGetMethod, h.url = a.Utility.urlCombine(this.getClusterUri(), "/infonav/mgmt/appmetadata/?SPHostUrl=" + encodeURIComponent(b)), 
                h.contentType = a.Utility.JsonContentType;
                var i = "";
                h.beforeSend = function(b) {
                    a.HttpUtility.setCommonRequestHeaders(b), b.setRequestHeader(a.HttpUtility.HttpSpoContextTokenHeader, f.getSpoContextToken()), 
                    b.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), i = b.requestId, 
                    a.Tracing.verbose("Requesting app metadata from server...", i), c.addCorrelatedProperty(new a.CorrelatedProperty("metadataRequestId", i));
                }, h.success = function(b) {
                    d(b), a.Tracing.verbose("Successfully retrieved app metadata from server.", i);
                }, h.error = function(b) {
                    e(b), a.Tracing.error("Failed to retrieve app metadata from server", i);
                }, $.ajax(h);
            }
        }, c.prototype.getO365NavBar = function(b) {
            var c = this, d = b.GlobalServiceClusterUrl, e = b.Puid, f = "", g = [];
            if (!b.LoginName) return void this.initializeUI(null);
            g = b.LoginName.split("|"), 3 == g.length && (f = g[2]);
            var h = {}, i = [ e, f, "settings", "en-US" ];
            h.type = a.Utility.HttpGetMethod, h.url = a.Utility.urlCombine(d, "/infonav/mgmt/o365navbar/" + i.join("/")), 
            h.contentType = a.Utility.JsonContentType;
            var j = "";
            h.beforeSend = function(b) {
                a.HttpUtility.setCommonRequestHeaders(b), b.setRequestHeader(a.HttpUtility.HttpSpoContextTokenHeader, c.getSpoContextToken()), 
                b.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), j = b.requestId, 
                a.Tracing.verbose("Requesting O365 Nav Bar from server...", j);
            }, h.success = function(b) {
                c.loadUIElements(b), a.Tracing.verbose("Successfully retrieved the Nav Bar metadata.", j);
            }, h.error = function() {
                c.loadUIElements(null), a.Tracing.verbose("Failed to retrieved the Nav Bar metadata. Will use fallback UI instead", j);
            }, $.ajax(h);
        }, c.prototype.loadUIElements = function(a) {
            if (!this.uiInitializedOnce) {
                this.uiInitializedOnce = !0, this.initializeUI(a);
                var b = this.createInfoNavShortUrl();
                window.history.replaceState ? window.history.replaceState({}, document.title, b) : window.location.href !== b && window.location.replace(b);
            }
        }, c._sharepointSiteUrlParamName = "SPHostUrl", c._sharepointSiteTitleParamName = "SPHostTitle", 
        c._helpPageUrl = "http://go.microsoft.com/fwlink/?LinkId=286787", c._infoNavAppPath = "/infonav/app/", 
        c._infoNavAppPathLength = c._infoNavAppPath.length, c._cloudUXJsUrl = "/infonav/app/resources/CloudUX.min.js", 
        c._spParentSiteIconUrl = "/sharepointpages/SPIntegration/PowerBI/Style/Images/Icon_PowerBI.png", 
        c._spAppIconClass = "spAppIcon", c._contentLayoutCssClass = "ms-pub-contentLayout", 
        c._workspaceElementId = "s4-workspace", c._bodySelector = "body", c._appIconSelector = "#appIcon", 
        c._mainLayoutSelector = "#layoutMain", c._httpsProtocol = "https", c._infoNavAppUrlTemplate = new RegExp("(.*\\/infonav\\/app\\/)"), 
        c.AppMetadataLoadingNotificationId = "1dd69400-83b3-45a4-8ac0-6aececf521a0", c._samplesPageHtml = "<div id ='publishSamplesModalContainer'><iframe id='publishSamplesFrame' src='{samplesPageUrl}'></iframe></div> ", 
        c._licensePageHtml = '<div id="noLicenseContainer"><iframe id="licensePageIFrame" class="noLicenseIFrame" src="{licensePageUrl}"/></div>', 
        c._samplesDialogCloseAction = "SamplesDialogClose", c._samplesDialogInitializeAction = "initialize", 
        c._infoNavUserDoesNotHaveLicenseException = "InfoNavUserDoesNotHaveLicenseException", 
        c._appMetadataNotificationTimeoutMs = 3e3, c;
    }(a.CloudConnectionGroup));
    a.SharePointOnlineConnectionGroup = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b;
    !function(a) {
        a.ParentActivityEnded = "Parent activity was ended before ending the child activity", 
        a.UnknownError = "Unknown error", a.NoLicense = "User does not have license", a.NotAuthenticated = "User is not authenticated", 
        a.EmptyInterpretResult = "Empty interpret result", a.InterpretError = "Interpret error", 
        a.LinguisticSchemaStillLoading = "Linguistic schema still loading", a.RenderingSkippedOnClient = "Newer visual is already being displayed so skipping rendering.", 
        a.UserAborted = "Interpret in-progress was aborted by a newer request", a.UtteranceTooShort = "Utterance is too short", 
        a.UsingCachedAutocompleteMatchOnInterpretError = "Using cached result with compatible autocomplete on interpret error", 
        a.SkippedRenderingSinceVisualIsUpToDate = "Using previous visual since the server did not respond with a change.", 
        a.InterpretSuccessfulButContainsQueryError = "Interpret produced a query which resulted in an error.\nError code: {0}.\nMessage: {1}", 
        a.NewVisualizationRequestDelayingPrevious = "New visualization request while delaying current", 
        a.NewVisualizationRequestWhileWaitingForPowerViewReady = "New visualization request while waiting for PowerView ready event", 
        a.UnexpectedVisualizationActivityEnd = "The visualization activity ended in an unexpected way";
    }(b = a.ActivityErrors || (a.ActivityErrors = {}));
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(b) {
            a.Utility.throwIfNullOrUndefined(b, "UserActionEventArgs", "ctor", "userAction"), 
            this._userAction = b;
        }
        return b.prototype.getRequestParams = function() {
            return [ {
                key: "sourceType",
                value: a.TelemetryService.SourceType
            }, {
                key: "userActionType",
                value: a.UserAction[this._userAction]
            } ];
        }, b;
    }();
    a.UserActionEventArgs = b;
    var c = function() {
        function b(b) {
            a.Utility.throwIfNullOrUndefined(b, "VisualizedInterpretResultEventArgs", "ctor", "visualizationType"), 
            this._visualizationType = b;
        }
        return b.prototype.getRequestParams = function() {
            return [ {
                key: "visualizationType",
                value: VisualizationType[this._visualizationType]
            } ];
        }, b;
    }();
    a.VisualizedInterpretResultEventArgs = c;
    var d = function() {
        function b(b, c) {
            a.Utility.throwIfNullOrUndefined(b, "UserChangedVisualizationTypeEventArgs", "ctor", "originalVisualization"), 
            a.Utility.throwIfNullOrUndefined(c, "UserChangedVisualizationTypeEventArgs", "ctor", "targetVisualization"), 
            this._originalVisualization = b, this._targetVisualization = c;
        }
        return b.prototype.getRequestParams = function() {
            return [ {
                key: "originalVisualization",
                value: VisualizationType[this._originalVisualization]
            }, {
                key: "targetVisualization",
                value: VisualizationType[this._targetVisualization]
            } ];
        }, b;
    }();
    a.UserChangedVisualizationTypeEventArgs = d;
    var e = function() {
        function b(b, c) {
            a.Utility.throwIfNullOrUndefined(b, "UserChangedModelEventArgs", "ctor", "originalWorkbookId"), 
            a.Utility.throwIfNullOrUndefined(c, "UserChangedModelEventArgs", "ctor", "targetWorkbookId"), 
            this._originalWorkbookId = b, this._targetWorkbookId = c;
        }
        return b.prototype.getRequestParams = function() {
            return [ {
                key: "originalWorkbookId",
                value: this._originalWorkbookId
            }, {
                key: "targetWorkbookId",
                value: this._targetWorkbookId
            } ];
        }, b;
    }();
    a.UserChangedModelEventArgs = e;
    var f = function() {
        function a(a, b, c) {
            this._errorType = a, this._errorText = b, this._requestId = null, c && (this._requestId = c);
        }
        return a.prototype.getRequestParams = function() {
            return [ {
                key: "errorType",
                value: this._errorType
            }, {
                key: "errorText",
                value: this._errorText
            }, {
                key: "requestId",
                value: this._requestId
            } ];
        }, a;
    }();
    a.UserGotErrorEventArgs = f;
    var g = function() {
        function b(b, c) {
            a.Utility.throwIfNullOrUndefined(b, "UserAddedPhrasingEventArgs", "ctor", "phrasingId"), 
            a.Utility.throwIfNullOrUndefined(c, "UserAddedPhrasingEventArgs", "ctor", "phrasingType"), 
            this._phrasingId = b, this._phrasingType = c;
        }
        return b.prototype.getRequestParams = function() {
            return [ {
                key: "phrasingId",
                value: this._phrasingId.toString()
            }, {
                key: "phrasingType",
                value: this._phrasingType
            } ];
        }, b;
    }();
    a.UserPhrasingEventArgs = g;
    var h = function(a) {
        function b(b, c, d) {
            a.call(this, b, c), this._phrasingTemplate = d;
        }
        return __extends(b, a), b.prototype.getRequestParams = function() {
            var b = a.prototype.getRequestParams.call(this);
            return b.push({
                key: "phrasingTemplate",
                value: this._phrasingTemplate
            }), b;
        }, b;
    }(g);
    a.UserPhrasingNewPhrasingEventArgs = h;
    var i = function(a) {
        function b(b, c, d) {
            a.call(this, b, c), this._updateSuccessful = d;
        }
        return __extends(b, a), b.prototype.getRequestParams = function() {
            var b = a.prototype.getRequestParams.call(this);
            return b.push({
                key: "updateSuccessful",
                value: this._updateSuccessful.toString()
            }), b;
        }, b;
    }(g);
    a.UserPhrasingSimpleUpdateEventArgs = i, function(a) {
        a[a.Table = 0] = "Table", a[a.Column = 1] = "Column";
    }(a.UserSynonymsTargetType || (a.UserSynonymsTargetType = {}));
    var j = (a.UserSynonymsTargetType, function() {
        function a(a, b, c) {
            this._targetType = a, this._oldSynonymCount = b, this._newSynonymCount = c;
        }
        return a.prototype.getRequestParams = function() {
            return [ {
                key: "targetType",
                value: a.targetTypeToString(this._targetType)
            }, {
                key: "oldSynonymCount",
                value: this._oldSynonymCount
            }, {
                key: "newSynonymCount",
                value: this._newSynonymCount
            } ];
        }, a.targetTypeToString = function(a) {
            switch (a) {
              case 0:
                return "Table";

              case 1:
                return "Column";
            }
            return "Unknown";
        }, a;
    }());
    a.UserSynonymsTableOrColumnUpdateEventArgs = j, function(a) {
        a[a.Subject = 0] = "Subject", a[a.Object = 1] = "Object", a[a.IndirectObject = 2] = "IndirectObject", 
        a[a.Name = 3] = "Name", a[a.DynamicNoun = 4] = "DynamicNoun", a[a.DynamicAdjective = 5] = "DynamicAdjective", 
        a[a.Measure = 6] = "Measure";
    }(a.UserPhrasingRoleUpdateType || (a.UserPhrasingRoleUpdateType = {}));
    var k = (a.UserPhrasingRoleUpdateType, function(a) {
        function b(b, c, d, e) {
            a.call(this, b, c, d), this._roleType = e;
        }
        return __extends(b, a), b.prototype.getRequestParams = function() {
            var c = a.prototype.getRequestParams.call(this);
            return c.push({
                key: "roleType",
                value: b.userPhrasingRoleTypeToString(this._roleType)
            }), c;
        }, b.userPhrasingRoleTypeToString = function(a) {
            switch (a) {
              case 0:
                return "Subject";

              case 1:
                return "Object";

              case 2:
                return "IndirectObject";

              case 3:
                return "Name";

              case 4:
                return "DynamicNoun";

              case 5:
                return "DynamicAdjective";

              case 6:
                return "Measure";
            }
            return "Unknown";
        }, b;
    }(i));
    a.UserPhrasingRoleUpdateEventArgs = k, function(a) {
        a[a.Add = 0] = "Add", a[a.Remove = 1] = "Remove", a[a.Update = 2] = "Update";
    }(a.UserPhrasingActionType || (a.UserPhrasingActionType = {}));
    var l = (a.UserPhrasingActionType, function(a) {
        function b(b, c, d, e) {
            a.call(this, b, c, d), this._actionType = e;
        }
        return __extends(b, a), b.prototype.getRequestParams = function() {
            var c = a.prototype.getRequestParams.call(this);
            return c.push({
                key: "actionType",
                value: b.userPhrasingActionTypeToString(this._actionType)
            }), c;
        }, b.userPhrasingActionTypeToString = function(a) {
            switch (a) {
              case 0:
                return "Add";

              case 1:
                return "Remove";

              case 2:
                return "Update";
            }
            return "Unknown";
        }, b;
    }(i));
    a.UserPhrasingActionTypeUpdateEventArgs = l;
    var m = function() {
        function a() {}
        return a.prototype.getRequestParams = function() {
            return [];
        }, a;
    }();
    a.SaveEventArgs = m;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(c, d, e, f) {
            this._activityId = a.Utility.generateGuid(), this._activityStartTime = new Date().getTime(), 
            this._activityType = d, this._childAddedCallbacks = new Array(), this._childCompletedCallbacks = new Array(), 
            this._completed = !1, this._completedCallbacks = new Array(), this._contentProviderType = "", 
            this._ownerType = 0, this._correlatedProperties = new Array(), this._unreportedCorrelatedProperties = new Array(), 
            this._summaryReported = !1, this._reporting = f, this._telemetryService = c, this._rootActivity = e ? e._rootActivity : this, 
            this._parentActivity = e ? e : this, this._parentActivity !== this && ($(this._parentActivity).on(b.ActivityEndedEventName, this, this.endOnParentEnded), 
            this._parentActivity.raiseChildAdded(this)), a.Tracing.verbose("Activity started | " + this.toString());
        }
        return Object.defineProperty(b.prototype, "activityEndResult", {
            get: function() {
                return this._activityEndResult;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "activityEndTime", {
            get: function() {
                return this._activityEndTime;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "activityId", {
            get: function() {
                return this._activityId;
            },
            set: function(a) {
                this._activityId = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "activityStartTime", {
            get: function() {
                return this._activityStartTime;
            },
            set: function(a) {
                this._activityStartTime = a;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "activityType", {
            get: function() {
                return this._activityType;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "completed", {
            get: function() {
                return this._completed;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "correlatedProperties", {
            get: function() {
                return this._correlatedProperties;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "error", {
            get: function() {
                return this._error;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "parentActivityId", {
            get: function() {
                return this._parentActivity.activityId;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "reporting", {
            get: function() {
                return this._reporting;
            },
            set: function(a) {
                this._reporting = a, this.reportIfReporting();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "rootActivityId", {
            get: function() {
                return this._rootActivity.activityId;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(b.prototype, "contentProviderType", {
            get: function() {
                return this._contentProviderType;
            },
            set: function(a) {
                this._contentProviderType = a;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.addCorrelatedProperties = function(a) {
            for (var b = 0, c = a.length; c > b; b++) this.addCorrelatedPropertyInternal(a[b], b === c - 1);
        }, b.prototype.addCorrelatedProperty = function(a) {
            this.addCorrelatedPropertyInternal(a, !0);
        }, b.prototype.addOwnerType = function(a) {
            this._ownerType = a;
        }, b.addErrorInfoIfPresent = function(b, d) {
            b && d && (d.status && b.addCorrelatedProperty(new c("statusCode", d.status.toString())), 
            b.addCorrelatedProperty(new c("errorType", a.HttpUtility.getErrorInfo(d))));
        }, b.prototype.createChildActivity = function(a, c) {
            var d = new b(this._telemetryService, a, this, c);
            return d;
        }, b.prototype.end = function(c, d, f) {
            if (this.completed) return void a.Tracing.error("Attempted to end already ended activity | " + this.toString());
            this._activityEndTime = f ? f : new Date().getTime(), this._activityEndResult = c, 
            this._completed = !0, this._error = d, a.Tracing.verbose("Activity ended with " + e[this._activityEndResult] + " | " + this.toString()), 
            $(this).trigger(b.ActivityEndedEventName), this.reportIfReporting();
            for (var g = 0, h = this._completedCallbacks.length; h > g; g++) this._completedCallbacks[g](this);
            this._parentActivity !== this && this._parentActivity.raiseChildCompleted(this);
        }, b.getParentActivityIfAny = function(a) {
            return a && a._parentActivity && a._parentActivity !== a ? a._parentActivity : null;
        }, b.prototype.getRequestParams = function() {
            var c = new Array();
            c.push(this.parentActivityId !== this.activityId ? {
                key: "parentActivityId",
                value: this.parentActivityId
            } : {
                key: "parentActivityId",
                value: "00000000-0000-0000-0000-000000000000"
            });
            var d = "";
            return this.error && (d = a.Utility.isString(this.error) ? this.error : JSON.stringify(this.error), 
            d = d.substring(0, b.MaxErrorLength).replace("[", "<").replace("]", ">")), c.push({
                key: "howEnded",
                value: this._activityEndResult
            }), c.push({
                key: "duration",
                value: this._activityEndTime - this._activityStartTime
            }), c.push({
                key: "err",
                value: d
            }), c.push({
                key: "contentProviderType",
                value: this._contentProviderType
            }), c.push({
                key: "ownerType",
                value: this._ownerType
            }), c;
        }, b.prototype.hasCorrelatedProperty = function(a) {
            for (var b = 0, c = this._correlatedProperties.length; c > b; b++) if (this._correlatedProperties[b].propertyName === a) return !0;
            return !1;
        }, b.prototype.isChildOf = function(a, b) {
            return this._parentActivity === this ? !1 : b ? this._parentActivity === a : this._parentActivity === a || this._parentActivity.isChildOf(a);
        }, b.prototype.onChildAdded = function(a) {
            return this._childAddedCallbacks.push(a), this;
        }, b.prototype.onChildCompleted = function(a) {
            return this._childCompletedCallbacks.push(a), this;
        }, b.prototype.onCompleted = function(a) {
            return this.completed ? (a(this), this) : (this._completedCallbacks.push(a), this);
        }, b.prototype.toString = function() {
            return "Name: " + a.ActivityType[this.activityType] + " | AID: " + this.activityId + " | RAID: " + this._rootActivity.activityId;
        }, b.prototype.addCorrelatedPropertyInternal = function(a, b) {
            this._correlatedProperties.push(a), this._unreportedCorrelatedProperties.push(a), 
            this.completed && b && this.reportIfReporting();
        }, b.prototype.endOnParentEnded = function(b) {
            var c = b.data;
            c.completed || (a.Tracing.error("Activity not ended even though parent has | " + c.toString()), 
            c.end(0, a.ActivityErrors.ParentActivityEnded, c._parentActivity.activityEndTime));
        }, b.prototype.raiseChildAdded = function(a) {
            for (var b = 0, c = this._childAddedCallbacks.length; c > b; b++) this._childAddedCallbacks[b](a);
            this._parentActivity !== this && this._parentActivity.raiseChildAdded(a);
        }, b.prototype.raiseChildCompleted = function(a) {
            for (var b = 0, c = this._childCompletedCallbacks.length; c > b; b++) this._childCompletedCallbacks[b](a);
            this._parentActivity !== this && this._parentActivity.raiseChildCompleted(a);
        }, b.prototype.reportIfReporting = function() {
            this.completed && this.reporting && (this.sendCorrelatedPropertiesIfAny(), this.sendActivityCompletionSummaryIfNotReported());
        }, b.prototype.sendActivityCompletionSummaryIfNotReported = function() {
            this._summaryReported || this._telemetryService.fireActivityCompletionSummary(this), 
            this._summaryReported = !0;
        }, b.prototype.sendCorrelatedPropertiesIfAny = function() {
            this._unreportedCorrelatedProperties.length && (this._telemetryService.notifyActivityCorrelationProperties(this, this._unreportedCorrelatedProperties), 
            this._unreportedCorrelatedProperties = new Array());
        }, b.ActivityEndedEventName = "ActivityEnded", b.MaxErrorLength = 256, b;
    }();
    a.ClientActivity = b;
    var c = function() {
        function a(a, b) {
            this._propertyName = a, this._propertyValue = b ? b : "";
        }
        return Object.defineProperty(a.prototype, "propertyName", {
            get: function() {
                return this._propertyName;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(a.prototype, "propertyValue", {
            get: function() {
                return this._propertyValue;
            },
            enumerable: !0,
            configurable: !0
        }), a;
    }();
    a.CorrelatedProperty = c;
    var d = function() {
        function a(a) {
            for (var b = 0, c = a.length; c > b; b++) {
                var d = a[b].propertyName + "=" + a[b].propertyValue;
                this._propertyBag ? this._propertyBag += "|" + d : this._propertyBag = d;
            }
        }
        return a.prototype.getRequestParams = function() {
            return [ {
                key: "propertyBag",
                value: this._propertyBag
            } ];
        }, a;
    }();
    a.CorrelatedPropertiesEventArgs = d, function(a) {
        a[a.Unknown = 0] = "Unknown", a[a.Owner = 1] = "Owner", a[a.Shared = 2] = "Shared";
    }(a.OwnerType || (a.OwnerType = {}));
    a.OwnerType;
    !function(a) {
        a[a.Unknown = 0] = "Unknown", a[a.Success = 1] = "Success", a[a.SuccessDespiteError = 2] = "SuccessDespiteError", 
        a[a.Error = 3] = "Error", a[a.RemoteError = 4] = "RemoteError";
    }(a.ActivityEndedWith || (a.ActivityEndedWith = {}));
    var e = a.ActivityEndedWith;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function d(a, c) {
            b.call(this, a, c), this._unreportedTelemetryEvents = [], this._telemetryEventQueueTimerId = 0;
        }
        return __extends(d, b), d.prototype.notifyVisualizedInterpretResult = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 9 ]), "Telemetry", "notifyVisualizedInterpretResult", "activityType"), 
            a.Utility.throwIfNullOrUndefined(c, "Telemetry", "notifyUserChangedVisualizationType", "parameters"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyVisualizedInterpretResult], d.NotifyVisualizedInterpretResult, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedVisualizationType = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 13 ]), "Telemetry", "notifyUserChangedVisualizationType", "activityType"), 
            a.Utility.throwIfNullOrUndefined(c, "Telemetry", "notifyUserChangedVisualizationType", "parameters"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedVisualizationType], d.NotifyUserChangedVisualizationType, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedModel = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 12 ]), "Telemetry", "notifyUserChangedModel", "activityType"), 
            a.Utility.throwIfNullOrUndefined(c, "Telemetry", "notifyUserChangedModel", "parameters"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedModel], d.NotifyUserChangedModel, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserGotError = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 6, 1 ]), "Telemetry", "notifyUserGotError", "activityType"), 
            a.Utility.throwIfNullOrUndefined(c, "Telemetry", "notifyUserGotError", "parameters"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserGotError], d.NotifyUserGotError, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserDisplayedFeaturedQuestions = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 5, 3, 2 ]), "Telemetry", "notifyUserDisplayedFeaturedQuestions", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(1).getRequestParams());
        }, d.prototype.notifyUserSelectedFeaturedQuestion = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 0, 4 ]), "Telemetry", "notifyUserSelectedFeaturedQuestion", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(0).getRequestParams());
        }, d.prototype.notifyUserSelectedAutocomplete = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 10 ]), "Telemetry", "notifyUserSelectedAutocomplete", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(2).getRequestParams());
        }, d.prototype.notifyUserSelectedSuggestion = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 11 ]), "Telemetry", "notifyUserSelectedSuggestion", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(3).getRequestParams());
        }, d.prototype.notifyUserOpenedFilterPane = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 7 ]), "Telemetry", "notifyUserOpenedFilterPane", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(4).getRequestParams());
        }, d.prototype.notifyUserOpenedFieldExplorer = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 8 ]), "Telemetry", "notifyUserOpenedFieldExplorer", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(5).getRequestParams());
        }, d.prototype.notifyUserAddedPhrasing = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserAddedPhrasing", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserAddedPhrasing], d.NotifyUserAddedPhrasing, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserRemovedPhrasing = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserRemovedPhrasing", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserRemovedPhrasing], d.NotifyUserRemovedPhrasing, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedRole = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedRole", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedRole], d.NotifyUserChangedRole, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedCondition = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedCondition", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedCondition], d.NotifyUserChangedCondition, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedPrepPhrase = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedPrepPhrase", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedPrepPhrase], d.NotifyUserChangedPrepPhrase, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedSynonyms = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedSynonyms", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedSynonyms], d.NotifyUserChangedSynonyms, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedAntonyms = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedAntonyms", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedAntonyms], d.NotifyUserChangedAntonyms, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedWhere = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedWhere", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedWhere], d.NotifyUserChangedWhere, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangedWhen = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedWhen", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedWhen], d.NotifyUserChangedWhen, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserSaved = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserSaved", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserSaved], d.NotifyUserSaved, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserChangeModelingTab = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangedModelingTab", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(c).getRequestParams());
        }, d.prototype.notifyUserUsageChangeReport = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserChangeUsageReport", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(c).getRequestParams());
        }, d.prototype.notifyUserUsageIncludeModels = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserUsageIncludeModels", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(c).getRequestParams());
        }, d.prototype.notifyUserUsageShowMore = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserUsageShowMore", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(c).getRequestParams());
        }, d.prototype.notifyUserUsageClickUtterance = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserUsageClickUtterance", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(c).getRequestParams());
        }, d.prototype.notifyUserSynonymsTableOrColumnUpdate = function(b, c) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 14 ]), "Telemetry", "notifyUserSynonymsTableOrColumnUpdate", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyUserChangedTableOrColumnSynonyms], d.NotifyUserChangedTableOrColumnSynonyms, b, null, 2, c.getRequestParams());
        }, d.prototype.notifyUserCopyResultUrlToClipboard = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 15 ]), "Telemetry", "notifyUserCopyResultUrlToClipboard", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(7).getRequestParams());
        }, d.prototype.notifyUserShareResultViaEmail = function(b) {
            a.Utility.throwIfNotTrue(this.verifyActivityType(b, [ 16 ]), "Telemetry", "notifyUserShareResultViaEmail", "activityType"), 
            this.fireTelemetryEvent(d.EventIds[d.NotifyNewUserAction], d.NotifyNewUserAction, b, null, 2, new a.UserActionEventArgs(6).getRequestParams());
        }, d.prototype.createNewActivity = function(b, c, d) {
            var e = new a.ClientActivity(this, b, c, d);
            return e;
        }, d.prototype.notifyActivityCorrelationProperties = function(b, c) {
            this.fireTelemetryEvent(d.EventIds[d.NotifyActivityCorrelationDataEvent], d.NotifyActivityCorrelationDataEvent, b.activityType, null, 2, new a.CorrelatedPropertiesEventArgs(c).getRequestParams(), b.activityId, b.rootActivityId, b.activityStartTime);
        }, d.prototype.fireActivityCompletionSummary = function(a) {
            this.fireTelemetryEvent(d.EventIds[d.FireActivityCompletionSummaryEvent], d.FireActivityCompletionSummaryEvent, a.activityType, null, 2, a.getRequestParams(), a.activityId, a.rootActivityId, a.activityStartTime);
        }, d.prototype.verifyActivityType = function(b, d) {
            return a.Utility.throwIfNullOrUndefined(d, "Telemetry", "verifyActivityType", "allowedActivityTypes"), 
            c[b] && d.indexOf(b) >= 0;
        }, d.prototype.fireTelemetryEvent = function(b, e, f, g, h, i, j, k, l) {
            j = j || a.AppManager.current.activityId, k = k || a.Utility.generateGuid(), l = l || new Date().getTime();
            var m = {
                aid: j,
                at: c[f],
                caid: a.AppManager.current.activityId,
                el: d.SourceType,
                id: b,
                l: h.toString(),
                m: g,
                n: e,
                p: i,
                raid: k,
                t: d.DateEnvelopeStart + l + d.DateEnvelopeEnd
            };
            this.queueTelemetryEvent(m);
        }, d.prototype.queueTelemetryEvent = function(b) {
            var c = this;
            0 === this._telemetryEventQueueTimerId && (this._telemetryEventQueueTimerId = window.setTimeout(function() {
                c.sendQueuedTelemetryEvents(), c._telemetryEventQueueTimerId = 0;
            }, d.TelemetryEventBatchTimeout)), a.Tracing.verbose("Queuing telemetry event " + b.n + " | Activity name: " + b.at + " | AID: " + b.aid + " | RAID: " + b.raid), 
            this._unreportedTelemetryEvents.push(b), this._unreportedTelemetryEvents.length > d.MaxTelemetryEventBatchSize && (a.Tracing.verbose("Flushing telemetry event queue due to size"), 
            window.clearTimeout(this._telemetryEventQueueTimerId), this._telemetryEventQueueTimerId = 0, 
            this.sendQueuedTelemetryEvents());
        }, d.prototype.sendQueuedTelemetryEvents = function() {
            this.sendTelemetryRequest(this._unreportedTelemetryEvents, d.RetryCount), this._unreportedTelemetryEvents = [];
        }, d.prototype.sendTelemetryRequest = function(b, c) {
            var e, f = this, g = b.map(function(a) {
                return JSON.stringify(a);
            }).join("\r\n"), h = {
                type: a.Utility.HttpPostMethod,
                url: this.telemetryUrl,
                contentType: a.Utility.XJavascriptContentType,
                timeout: d.TelemetryRequestTimeout,
                data: g
            };
            h.beforeSend = function(b) {
                e = f.formatTelemetryRequest(b), b.setRequestHeader(a.Utility.HttpAcceptHeader, a.Utility.JsonContentType), 
                a.Tracing.verbose("Firing telemetry event request " + e, e);
            }, h.success = function(c) {
                var g = c.NumberOfSuccessfulEvents;
                if (a.Tracing.verbose("Telemetry event request " + e + " logged " + g + " of " + b.length + " expected event(s). Status code: " + c.TelemetryStatusCode, e), 
                g < b.length) {
                    var h = b[g];
                    if (a.Tracing.warning("Server rejected telemetry event " + h.n + " | Activity name: " + h.at + " | AID: " + h.aid + " | RAID: " + h.raid), 
                    b.length - (g + 1) > 0) {
                        for (var i = [], j = g + 1, k = b.length; k > j; j++) i.push(b[j]);
                        f.sendTelemetryRequest(i, d.RetryCount);
                    }
                }
            }, h.error = function(d) {
                a.Tracing.warning("Telemetry event request " + e + " logging failed", e), f.isRetriableError(d.status) && c > 0 ? (a.Tracing.verbose("Retrying telemetry event request " + e, e), 
                f.sendTelemetryRequest(b, c - 1)) : a.Tracing.error("Not retrying telemetry request " + e + " because there was a non-retriable error or we exhausted maximum number of allowed retries", e);
            }, $.ajax(h);
        }, d.prototype.formatTelemetryRequest = function(b) {
            var c = a.Utility.generateGuid();
            b.setRequestHeader(a.HttpUtility.HttpCloudBIAccessTokenHeader, this.configurationProvider.getSecurityToken()), 
            b.setRequestHeader(d.HttpActivityIdHeader, a.AppManager.current.activityId), b.setRequestHeader(d.HttpRequestIdHeader, c);
            var e = this.configurationProvider.getSpoContextToken();
            return e && b.setRequestHeader(a.HttpUtility.HttpSpoContextTokenHeader, e), c;
        }, Object.defineProperty(d.prototype, "telemetryUrl", {
            get: function() {
                return a.Utility.urlCombine(this.configurationProvider.getClusterUri(), d.TelemetryEndpointPath);
            },
            enumerable: !0,
            configurable: !0
        }), d.prototype.isRetriableError = function(a) {
            return 401 !== a && 403 !== a;
        }, d.TelemetryEndpointPath = "telemetry/Telemetry", d.SourceType = "infoNav", d.DateEnvelopeStart = "/Date(", 
        d.DateEnvelopeEnd = ")/", d.HttpActivityIdHeader = "X-AS-ActivityID", d.HttpRequestIdHeader = "X-AS-RequestID", 
        d.TelemetryRequestTimeout = 5e3, d.TelemetryEventBatchTimeout = 3e4, d.MaxTelemetryEventBatchSize = 100, 
        d.RetryCount = 2, d.NotifyActivityCorrelationDataEvent = "NotifyActivityCorrelationDataEvent", 
        d.FireActivityCompletionSummaryEvent = "FireActivityCompletionSummaryEvent", d.NotifyVisualizedInterpretResult = "NotifyVisualizedInterpretResult", 
        d.NotifyUserChangedVisualizationType = "NotifyUserChangedVisualizationType", d.NotifyUserChangedModel = "NotifyUserChangedModel", 
        d.NotifyUserGotError = "NotifyUserGotError", d.NotifyNewUserAction = "NotifyNewUserAction", 
        d.NotifyUserAddedPhrasing = "NotifyUserAddedPhrasing", d.NotifyUserRemovedPhrasing = "NotifyUserRemovedPhrasing", 
        d.NotifyUserReorderedPhrasing = "NotifyUserReorderedPhrasing", d.NotifyUserChangedRole = "NotifyUserChangedRole", 
        d.NotifyUserChangedCondition = "NotifyUserChangedCondition", d.NotifyUserChangedPrepPhrase = "NotifyUserChangedPrepPhrase", 
        d.NotifyUserChangedSynonyms = "NotifyUserChangedSynonyms", d.NotifyUserChangedAntonyms = "NotifyUserChangedAntonyms", 
        d.NotifyUserChangedWhere = "NotifyUserChangedWhere", d.NotifyUserChangedWhen = "NotifyUserChangedWhen", 
        d.NotifyUserSaved = "NotifyUserSaved", d.NotifyUserChangedTableOrColumnSynonyms = "NotifyUserChangedTableOrColumnSynonyms", 
        d.EventIds = {
            NotifyActivityCorrelationDataEvent: "6282129749136568722",
            FireActivityCompletionSummaryEvent: "6994294237486268222",
            NotifyVisualizedInterpretResult: "5669266953005547207",
            NotifyUserChangedVisualizationType: "4281925833501306497",
            NotifyUserChangedModel: "8729928910078157500",
            NotifyUserGotError: "4644360672233841357",
            NotifyNewUserAction: "1785946859649747271",
            NotifyUserAddedPhrasing: "4089628018928559701",
            NotifyUserRemovedPhrasing: "3907843229528186413",
            NotifyUserReorderedPhrasing: "1486379178168147256",
            NotifyUserChangedRole: "8982531571555799151",
            NotifyUserChangedCondition: "3511819276698362970",
            NotifyUserChangedPrepPhrase: "6379214669720148016",
            NotifyUserChangedSynonyms: "8567744340581635579",
            NotifyUserChangedAntonyms: "1997279985662893587",
            NotifyUserSaved: "2131456592293043617",
            NotifyUserChangedTableOrColumnSynonyms: "3036747692433250351"
        }, d;
    }(a.InfoNavClientService);
    a.TelemetryService = b, function(a) {
        a[a.ICSF = 0] = "ICSF", a[a.IEDE = 1] = "IEDE", a[a.IEDF = 2] = "IEDF", a[a.IHDF = 3] = "IHDF", 
        a[a.IHSF = 4] = "IHSF", a[a.ILDF = 5] = "ILDF", a[a.IMDE = 6] = "IMDE", a[a.IPOF = 7] = "IPOF", 
        a[a.IPOX = 8] = "IPOX", a[a.IPVI = 9] = "IPVI", a[a.IQSC = 10] = "IQSC", a[a.IQSS = 11] = "IQSS", 
        a[a.IRCM = 12] = "IRCM", a[a.IRCV = 13] = "IRCV", a[a.IMUP = 14] = "IMUP", a[a.ICRU = 15] = "ICRU", 
        a[a.ISRE = 16] = "ISRE", a[a.IAPL = 17] = "IAPL", a[a.IMPL = 18] = "IMPL", a[a.IEPL = 19] = "IEPL", 
        a[a.IAGM = 20] = "IAGM", a[a.IMMM = 21] = "IMMM", a[a.IEPT = 22] = "IEPT", a[a.INAQ = 23] = "INAQ", 
        a[a.ICIN = 24] = "ICIN", a[a.INPV = 25] = "INPV", a[a.INLM = 26] = "INLM";
    }(a.ActivityType || (a.ActivityType = {}));
    var c = a.ActivityType;
    !function(a) {
        a[a.SelectFeaturedQuestion = 0] = "SelectFeaturedQuestion", a[a.DisplayFeaturedQuestions = 1] = "DisplayFeaturedQuestions", 
        a[a.SelectAutocomplete = 2] = "SelectAutocomplete", a[a.SelectSuggestion = 3] = "SelectSuggestion", 
        a[a.OpenFilterPane = 4] = "OpenFilterPane", a[a.OpenFieldExplorer = 5] = "OpenFieldExplorer", 
        a[a.ShareResultUrlViaEmail = 6] = "ShareResultUrlViaEmail", a[a.CopyResultUrlToClipboard = 7] = "CopyResultUrlToClipboard", 
        a[a.ShareResultViaEmail = 8] = "ShareResultViaEmail", a[a.ChangeModelingTabOverview = 9] = "ChangeModelingTabOverview", 
        a[a.ChangeModelingTabSynonyms = 10] = "ChangeModelingTabSynonyms", a[a.ChangeModelingTabPhrasings = 11] = "ChangeModelingTabPhrasings", 
        a[a.ChangeModelingTabUsage = 12] = "ChangeModelingTabUsage", a[a.ChangeUsageToUserSummary = 13] = "ChangeUsageToUserSummary", 
        a[a.ChangeUsageToFlaggedUtterances = 14] = "ChangeUsageToFlaggedUtterances", a[a.ChangeUsageToUnrecognizedTerms = 15] = "ChangeUsageToUnrecognizedTerms", 
        a[a.UsageUnrecognizedTermsIncludeAllModels = 16] = "UsageUnrecognizedTermsIncludeAllModels", 
        a[a.UsageUnrecognizedTermsIncludeTopModelOnly = 17] = "UsageUnrecognizedTermsIncludeTopModelOnly", 
        a[a.UsageShowMoreUtterancesForUser = 18] = "UsageShowMoreUtterancesForUser", a[a.UsageShowMoreUtterancesForUnrecognizedTerm = 19] = "UsageShowMoreUtterancesForUnrecognizedTerm", 
        a[a.UsageClickedUtteranceUserReport = 20] = "UsageClickedUtteranceUserReport", a[a.UsageClickedUtteranceFlaggedUtteranceReport = 21] = "UsageClickedUtteranceFlaggedUtteranceReport", 
        a[a.UsageClickedUtteranceUnrecognizedTermReport = 22] = "UsageClickedUtteranceUnrecognizedTermReport";
    }(a.UserAction || (a.UserAction = {}));
    a.UserAction;
    !function(a) {
        a[a.Inherit = 0] = "Inherit", a[a.Verbose = 1] = "Verbose", a[a.Information = 2] = "Information", 
        a[a.Warning = 3] = "Warning", a[a.Error = 4] = "Error", a[a.Critical = 5] = "Critical";
    }(a.EventLevel || (a.EventLevel = {}));
    a.EventLevel;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b() {
            this._pendingInterpretations = [];
        }
        return b.prototype.register = function(a, b, c, d) {
            return this._pendingInterpretations.push({
                interpretation: a,
                flags: c || 0,
                feedback: d || 0,
                timeStamp: new Date(),
                contentProviderType: b
            }), this._pendingInterpretations.length;
        }, b.prototype.flushPending = function() {
            var a = [], c = this._pendingInterpretations.length;
            if (c > 0) {
                for (var d = 0; c > d; ++d) a.push.apply(a, b.convert(this._pendingInterpretations[d]));
                this._pendingInterpretations = [];
            }
            return a;
        }, b.prototype.setLastUtteranceAsUserFlagged = function() {
            var b = this._pendingInterpretations.length;
            return b > 0 ? (this._pendingInterpretations[b - 1].flags |= a.UtteranceFlags.User, 
            !0) : !1;
        }, b.prototype.setFeedbackForLastUtterance = function(a) {
            var b = this._pendingInterpretations.length;
            return b > 0 ? (this._pendingInterpretations[b - 1].feedback = a, !0) : !1;
        }, b.convert = function(a) {
            var b = [], c = a.flags, d = a.interpretation, e = d.results, f = a.timeStamp, g = a.contentProviderType, h = a.feedback, i = d.defaultResultIndex;
            if (i >= 0) b.push(this.createUsageData(e[i], c, h, 0, f, g)); else for (var j = 0, k = e.length; k > j; ++j) b.push(this.createUsageData(e[j], c, h, j, f, g));
            return b;
        }, b.createUsageData = function(c, d, e, f, g, h) {
            var i = c.source, j = {
                Text: c.utterance,
                ResultRank: f,
                Flags: d | b.determineFlags(c),
                DatabaseName: i.DatabaseName,
                VirtualServerName: i.VirtualServerName,
                ClientDateTime: a.JavaScriptSerializer.serializeDate(g),
                UserFeedback: e,
                ContentProviderType: h
            }, k = c.completedUtterance;
            if (k) {
                j.Text = k.Text;
                var l = c.unrecognizedTerms;
                l && l.length > 0 && (j.UnrecognizedTerms = b.convertUnrecognizedTerms(l, k));
            }
            return i.Score && (j.Score = i.Score), j;
        }, b.determineFlags = function(b) {
            var c = 0;
            return b.completedUtterance || (c |= a.UtteranceFlags.ResultIsEmpty), c;
        }, b.convertUnrecognizedTerms = function(b, c) {
            for (var d = [], e = (c.Text, c.Terms), f = 0, g = b.length; g > f; ++f) {
                var h = b[f], i = e[h].StartCharIndex, j = a.InterpretResult.getTermText(c, h);
                d.push({
                    StartIndex: i,
                    Length: a.StringExtensions.trimTrailingWhitespace(j).length
                });
            }
            return d;
        }, b;
    }();
    a.InterpretUsageQueue = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function() {
        function b(c, d, e) {
            this._bridge = c, this._usageService = d, this._timerFactory = e || a.TimerPromiseFactory.instance, 
            this._usages = new a.InterpretUsageQueue(), this._bridge.attach(a.Events.InterpretUsageIssuedEventName, b.bridge_InterpretIssued, this), 
            this._bridge.attach(a.Events.InterpretUsageSuccessEventName, b.bridge_InterpretSuccess, this), 
            $(window).on(a.DOMConstants.beforeUnload, this, b.onBeforeUnload);
        }
        return b.prototype.dispose = function() {
            this._userCompletionPromise && (this._userCompletionPromise.reject(), this._userCompletionPromise = null), 
            this._flushPendingPromise && (this._flushPendingPromise.reject(), this._flushPendingPromise = null), 
            this._bridge.detach(a.Events.InterpretUsageIssuedEventName, b.bridge_InterpretIssued), 
            this._bridge.detach(a.Events.InterpretUsageSuccessEventName, b.bridge_InterpretSuccess), 
            $(window).off(a.DOMConstants.beforeUnload, b.onBeforeUnload);
        }, b.prototype.setLastUtteranceAsUserFlagged = function() {
            var b = this._usages.setLastUtteranceAsUserFlagged();
            !b && this._lastInterpretResponse && (this.registerResponse(this._lastInterpretResponse, this._lastContentProviderType, a.UtteranceFlags.User), 
            this._lastInterpretResponse = null, this._lastContentProviderType = null);
        }, b.prototype.setFeedbackForLastUtterance = function(a) {
            var b = this._usages.setFeedbackForLastUtterance(a);
            !b && this._lastInterpretResponse && (this.registerResponse(this._lastInterpretResponse, this._lastContentProviderType, null, a), 
            this._lastInterpretResponse = null, this._lastContentProviderType = null);
        }, b.bridge_InterpretIssued = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_InterpretIssued", "eventArgs"), d.onInterpretIssued(c);
        }, b.prototype.onInterpretIssued = function() {
            var a = this;
            this._userCompletionPromise && this._userCompletionPromise.reject(), this._userCompletionPromise = this._timerFactory.create(b._interpretStartedDelayInMs), 
            this._userCompletionPromise.done(function() {
                return a.onUserCompletion();
            });
        }, b.bridge_InterpretSuccess = function(b, c) {
            var d = b.data;
            a.Utility.throwIfNullOrUndefined(c, d, "Bridge_InterpretSuccess", "eventArgs"), 
            d.onInterpretSuccess(c);
        }, b.prototype.onInterpretSuccess = function(a) {
            return this._userCompletionPromise ? (this._pendingInterpretResponse = a.response, 
            void (this._pendingContentProviderType = a.clientActivity.contentProviderType)) : void this.registerResponse(a.response, a.clientActivity.contentProviderType);
        }, b.prototype.onUserCompletion = function() {
            this._userCompletionPromise = null;
            var a = this._pendingInterpretResponse, b = this._pendingContentProviderType;
            a && this.registerResponse(a, b);
        }, b.prototype.registerResponse = function(a, c, d, e) {
            var f = this;
            if (!a.isUtteranceLinguisticallyEquivalent(this._lastInterpretResponse)) {
                var g = this._usages.register(a, c, d, e);
                this._lastInterpretResponse = a, this._lastContentProviderType = c, this._flushPendingPromise || (this._flushPendingPromise = this._timerFactory.create(b._flushPendingUsagesDelayInMs), 
                this._flushPendingPromise.done(function() {
                    return f.flushPendingUsages();
                })), g >= b._usageQueueCapacity && this.flushPendingUsages();
            }
        }, b.onBeforeUnload = function(b) {
            var c = b.data;
            a.Utility.throwIfNullOrUndefined(c, c, "onBeforeUnload", "self"), c.flushPendingUsages();
        }, b.prototype.flushPendingUsages = function() {
            this._flushPendingPromise = null;
            var a = this._usages.flushPending();
            a.length > 0 && this._usageService.update(a);
        }, b._usageQueueCapacity = 100, b._interpretStartedDelayInMs = 5e3, b._flushPendingUsagesDelayInMs = 12e4, 
        b;
    }();
    a.InterpretUsageListener = b;
}(InJs || (InJs = {}));

var InJs;

!function(a) {
    var b = function(b) {
        function c(a, c) {
            b.call(this, a, c), this._service = null, this.configurationProvider.getIsReady() && this.onGroupReady();
        }
        return __extends(c, b), Object.defineProperty(c.prototype, "service", {
            get: function() {
                return this._service;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(c.prototype, "hasInterpretListener", {
            get: function() {
                return !!this._interpretListener;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype._onConnectionGroupReady = function() {
            this.onGroupReady();
        }, c.prototype.setLastUtteranceAsUserFlagged = function() {
            this._interpretListener && this._interpretListener.setLastUtteranceAsUserFlagged();
        }, c.prototype.setFeedbackForLastUtterance = function(a) {
            this._interpretListener && this._interpretListener.setFeedbackForLastUtterance(a);
        }, c.prototype.onGroupReady = function() {
            this._service = null, this._interpretListener && (this._interpretListener.dispose(), 
            this._interpretListener = null), this._service = new a.UsageService(this.configurationProvider), 
            this.configurationProvider.getIsUsageReportingEnabled() === !0 && (this._interpretListener = new a.InterpretUsageListener(this.bridge, this._service));
        }, c;
    }(a.InfoNavClientService);
    a.UsageServiceContainer = b;
}(InJs || (InJs = {}));
//# sourceMappingURL=InfoNav.min.js.map