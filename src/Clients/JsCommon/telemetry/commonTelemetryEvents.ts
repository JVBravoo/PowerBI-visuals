/* tslint:disable */
//-----------------------------------------------------------------------
// <copyright company="Microsoft Corporation">
//        Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>  
//-----------------------------------------------------------------------


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : bondTypeScriptTransform.TT
//     File     : commonTelemetryEvents.ts
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

module powerbi.telemetry {
	var g = jsCommon.Utility.generateGuid;
	
    export interface IBaseEvent {
    	parentId: string;
    	isError: boolean;
    }
    
    /**
    * Base Event class
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var BaseEventLoggers: number;
    
    export var BaseEvent = function (parentId: string, isError: boolean = false): ITelemetryEventI<IBaseEvent>  {
    	var info = {
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<IBaseEvent> = {
    		name: 'BaseEvent',
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.BaseEventLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.BaseEventLoggers;
    	}
    
    	return event;
    }
    
    export interface ITrace {
    	type: number;
    	message: string;
    }
    
    /**
    * Trace event
    * @param type Trace type; please see TraceType for possible values. 
    * @param message Trace message 
    */
    
    export declare var TraceLoggers: number;
    
    export var Trace = function (type: number, message: string): ITelemetryEventI<ITrace>  {
    	var info = {
    		type: type,
    		message: message,
    	};
    
    	var event: ITelemetryEventI<ITrace> = {
    		name: 'Trace',
    		category: TelemetryCategory.Trace,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				type: info.type,
    				message: info.message,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.TraceLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.TraceLoggers;
    	}
    
    	return event;
    }
    
    export interface IError {
    	message: string;
    }
    
    /**
    * Event is fired when an unexpected error is encountered. This event isn't fired when an action fails and is handled by the parent code.
    * @param message Error exception message. 
    */
    
    export declare var ErrorLoggers: number;
    
    export var Error = function (message: string): ITelemetryEventI<IError>  {
    	var info = {
    		message: message,
    	};
    
    	var event: ITelemetryEventI<IError> = {
    		name: 'Error',
    		category: TelemetryCategory.CriticalError,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				message: info.message,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.ErrorLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.ErrorLoggers;
    	}
    
    	return event;
    }
    
    export interface IErrorWithStackTrace extends IError {
    	stack: string;
    }
    
    /**
    * Event is fired when an unexpected error is encountered. Event properties include the exception stack trace.
    * @param stack Stack trace 
    * @param message Error exception message. 
    */
    
    export declare var ErrorWithStackTraceLoggers: number;
    
    export var ErrorWithStackTrace = function (stack: string, message: string): ITelemetryEventI<IErrorWithStackTrace>  {
    	var info = {
    		stack: stack,
    		message: message,
    	};
    
    	var event: ITelemetryEventI<IErrorWithStackTrace> = {
    		name: 'ErrorWithStackTrace',
    		category: TelemetryCategory.CriticalError,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				stack: info.stack,
    				message: info.message,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.ErrorWithStackTraceLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.ErrorWithStackTraceLoggers;
    	}
    
    	return event;
    }
    
    export interface IErrorWithStackTraceAndSourceDetails extends IErrorWithStackTrace {
    	source: string;
    	lineNumber: number;
    	columnNumber: number;
    }
    
    /**
    * Event is fired when an unexpected error is encountered. Event properties include the source URL, line and column number.
    * @param source Source URL 
    * @param lineNumber Line number 
    * @param columnNumber Column number 
    * @param stack Stack trace 
    * @param message Error exception message. 
    */
    
    export declare var ErrorWithStackTraceAndSourceDetailsLoggers: number;
    
    export var ErrorWithStackTraceAndSourceDetails = function (source: string, lineNumber: number, columnNumber: number, stack: string, message: string): ITelemetryEventI<IErrorWithStackTraceAndSourceDetails>  {
    	var info = {
    		source: source,
    		lineNumber: lineNumber,
    		columnNumber: columnNumber,
    		stack: stack,
    		message: message,
    	};
    
    	var event: ITelemetryEventI<IErrorWithStackTraceAndSourceDetails> = {
    		name: 'ErrorWithStackTraceAndSourceDetails',
    		category: TelemetryCategory.CriticalError,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				source: info.source,
    				lineNumber: info.lineNumber,
    				columnNumber: info.columnNumber,
    				stack: info.stack,
    				message: info.message,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.ErrorWithStackTraceAndSourceDetailsLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.ErrorWithStackTraceAndSourceDetailsLoggers;
    	}
    
    	return event;
    }
    
    export interface ICustomerAction extends IBaseEvent {
    }
    
    /**
    * Telemetry event used when logging top level customer actions.
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var CustomerActionLoggers: number;
    
    export var CustomerAction = function (parentId: string, isError: boolean = false): ITelemetryEventI<ICustomerAction>  {
    	var info = {
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<ICustomerAction> = {
    		name: 'CustomerAction',
    		category: TelemetryCategory.CustomerAction,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.CustomerActionLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.CustomerActionLoggers;
    	}
    
    	return event;
    }
    
    export interface IVerbose extends IBaseEvent {
    }
    
    /**
    * Telemetry event used when logging child events.
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var VerboseLoggers: number;
    
    export var Verbose = function (parentId: string, isError: boolean = false): ITelemetryEventI<IVerbose>  {
    	var info = {
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<IVerbose> = {
    		name: 'Verbose',
    		category: TelemetryCategory.Verbose,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.VerboseLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.VerboseLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIDashboardRootSession extends ICustomerAction {
    }
    
    /**
    * Event is fired when the PBI Dashboard is first loaded, and subsequently every time the session timeout is reset.
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var DashboardRootSessionLoggers: number;
    
    export var DashboardRootSession = function (parentId: string, isError: boolean = false): ITelemetryEventI<IPBIDashboardRootSession>  {
    	var info = {
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<IPBIDashboardRootSession> = {
    		name: 'PBI.Dashboard.RootSession',
    		category: TelemetryCategory.CustomerAction,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.DashboardRootSessionLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.DashboardRootSessionLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIWFEInvitationSignUp extends ICustomerAction {
    }
    
    /**
    * Fired when the user clicks to sign up on an invitation.
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var WFEInvitationSignUpLoggers: number;
    
    export var WFEInvitationSignUp = function (parentId: string, isError: boolean = false): ITelemetryEventI<IPBIWFEInvitationSignUp>  {
    	var info = {
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<IPBIWFEInvitationSignUp> = {
    		name: 'PBI.WFE.InvitationSignUp',
    		category: TelemetryCategory.CustomerAction,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.WFEInvitationSignUpLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.WFEInvitationSignUpLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIWFEError extends ICustomerAction {
    	errorCode: string;
    	errorType: string;
    }
    
    /**
    * Fired when there is an error.
    * @param errorCode Error code 
    * @param errorType Error type 
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var WFEErrorLoggers: number;
    
    export var WFEError = function (errorCode: string, errorType: string, parentId: string, isError: boolean = false): ITelemetryEventI<IPBIWFEError>  {
    	var info = {
    		errorCode: errorCode,
    		errorType: errorType,
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<IPBIWFEError> = {
    		name: 'PBI.WFE.Error',
    		category: TelemetryCategory.CustomerAction,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				errorCode: info.errorCode,
    				errorType: info.errorType,
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.WFEErrorLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.WFEErrorLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIDashboardErrorDialog extends IError {
    	raid: string;
    	caid: string;
    	errorType: string;
    }
    
    /**
    * Event fired when an error dialog is shown to the user.
    * @param raid Root Activity Id 
    * @param caid Client Activity Id 
    * @param errorType Error Type 
    * @param message Error exception message. 
    */
    
    export declare var DashboardErrorDialogLoggers: number;
    
    export var DashboardErrorDialog = function (raid: string, caid: string, errorType: string, message: string): ITelemetryEventI<IPBIDashboardErrorDialog>  {
    	var info = {
    		raid: raid,
    		caid: caid,
    		errorType: errorType,
    		message: message,
    	};
    
    	var event: ITelemetryEventI<IPBIDashboardErrorDialog> = {
    		name: 'PBI.Dashboard.ErrorDialog',
    		category: TelemetryCategory.CriticalError,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				raid: info.raid,
    				caid: info.caid,
    				errorType: info.errorType,
    				message: info.message,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.DashboardErrorDialogLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.DashboardErrorDialogLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIMobileLandingContinuedToWeb extends ICustomerAction {
    }
    
    /**
    * Mobile user arrived at landing page and chose to continue to website
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var MobileLandingContinuedToWebLoggers: number;
    
    export var MobileLandingContinuedToWeb = function (parentId: string, isError: boolean = false): ITelemetryEventI<IPBIMobileLandingContinuedToWeb>  {
    	var info = {
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<IPBIMobileLandingContinuedToWeb> = {
    		name: 'PBI.MobileLanding.ContinuedToWeb',
    		category: TelemetryCategory.CustomerAction,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.MobileLandingContinuedToWebLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.MobileLandingContinuedToWebLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIMobileLandingDownloadApp extends ICustomerAction {
    }
    
    /**
    * Mobile user arrived at landing page and chose to download the mobile application
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    */
    
    export declare var MobileLandingDownloadAppLoggers: number;
    
    export var MobileLandingDownloadApp = function (parentId: string, isError: boolean = false): ITelemetryEventI<IPBIMobileLandingDownloadApp>  {
    	var info = {
    		parentId: parentId,
    		isError: isError,
    	};
    
    	var event: ITelemetryEventI<IPBIMobileLandingDownloadApp> = {
    		name: 'PBI.MobileLanding.DownloadApp',
    		category: TelemetryCategory.CustomerAction,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				parentId: info.parentId,
    				isError: info.isError,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.MobileLandingDownloadAppLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.MobileLandingDownloadAppLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIDashboardUnhandledAngularException extends IErrorWithStackTrace {
    }
    
    /**
    * Event fired for uncaught exception in Angular expressions.
    * @param stack Stack trace 
    * @param message Error exception message. 
    */
    
    export declare var DashboardUnhandledAngularExceptionLoggers: number;
    
    export var DashboardUnhandledAngularException = function (stack: string, message: string): ITelemetryEventI<IPBIDashboardUnhandledAngularException>  {
    	var info = {
    		stack: stack,
    		message: message,
    	};
    
    	var event: ITelemetryEventI<IPBIDashboardUnhandledAngularException> = {
    		name: 'PBI.Dashboard.UnhandledAngularException',
    		category: TelemetryCategory.CriticalError,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				stack: info.stack,
    				message: info.message,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.DashboardUnhandledAngularExceptionLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.DashboardUnhandledAngularExceptionLoggers;
    	}
    
    	return event;
    }
    
    export interface IPBIDashboardUnhandledException extends IErrorWithStackTraceAndSourceDetails {
    }
    
    /**
    * Event fired for global unhandled exceptions.
    * @param source Source URL 
    * @param lineNumber Line number 
    * @param columnNumber Column number 
    * @param stack Stack trace 
    * @param message Error exception message. 
    */
    
    export declare var DashboardUnhandledExceptionLoggers: number;
    
    export var DashboardUnhandledException = function (source: string, lineNumber: number, columnNumber: number, stack: string, message: string): ITelemetryEventI<IPBIDashboardUnhandledException>  {
    	var info = {
    		source: source,
    		lineNumber: lineNumber,
    		columnNumber: columnNumber,
    		stack: stack,
    		message: message,
    	};
    
    	var event: ITelemetryEventI<IPBIDashboardUnhandledException> = {
    		name: 'PBI.Dashboard.UnhandledException',
    		category: TelemetryCategory.CriticalError,
    		time: Date.now(),
    		id: g(),
    		getFormattedInfoObject: function() {
    			return {
    				source: info.source,
    				lineNumber: info.lineNumber,
    				columnNumber: info.columnNumber,
    				stack: info.stack,
    				message: info.message,
    			};
    		},
    		info: info
    	};
    
    	if (typeof powerbi.telemetry.DashboardUnhandledExceptionLoggers !== 'undefined') {
    		event.loggers = powerbi.telemetry.DashboardUnhandledExceptionLoggers;
    	}
    
    	return event;
    }
    
}
